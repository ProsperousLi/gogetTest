// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Year
//  - Month
//  - Day
type YMD struct {
	Year  int16 `thrift:"year,1" json:"year"`
	Month int8  `thrift:"month,2" json:"month"`
	Day   int8  `thrift:"day,3" json:"day"`
}

func NewYMD() *YMD {
	return &YMD{}
}

func (p *YMD) GetYear() int16 {
	return p.Year
}

func (p *YMD) GetMonth() int8 {
	return p.Month
}

func (p *YMD) GetDay() int8 {
	return p.Day
}
func (p *YMD) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *YMD) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Year = v
	}
	return nil
}

func (p *YMD) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Month = temp
	}
	return nil
}

func (p *YMD) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Day = temp
	}
	return nil
}

func (p *YMD) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("YMD"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *YMD) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("year", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Year)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err)
	}
	return err
}

func (p *YMD) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("month", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:month: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Month)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.month (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:month: ", p), err)
	}
	return err
}

func (p *YMD) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("day", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:day: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Day)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.day (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:day: ", p), err)
	}
	return err
}

func (p *YMD) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("YMD(%+v)", *p)
}

// 用户的账号信息
//
// Attributes:
//  - Type
//  - Accounts
//  - Mark
type AccountType struct {
	Type     int8    `thrift:"type,1" json:"type"`
	Accounts string  `thrift:"accounts,2" json:"accounts"`
	Mark     *string `thrift:"mark,3" json:"mark,omitempty"`
}

func NewAccountType() *AccountType {
	return &AccountType{}
}

func (p *AccountType) GetType() int8 {
	return p.Type
}

func (p *AccountType) GetAccounts() string {
	return p.Accounts
}

var AccountType_Mark_DEFAULT string

func (p *AccountType) GetMark() string {
	if !p.IsSetMark() {
		return AccountType_Mark_DEFAULT
	}
	return *p.Mark
}
func (p *AccountType) IsSetMark() bool {
	return p.Mark != nil
}

func (p *AccountType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Type = temp
	}
	return nil
}

func (p *AccountType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Accounts = v
	}
	return nil
}

func (p *AccountType) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Mark = &v
	}
	return nil
}

func (p *AccountType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AccountType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *AccountType) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accounts", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accounts: ", p), err)
	}
	if err := oprot.WriteString(string(p.Accounts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accounts (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accounts: ", p), err)
	}
	return err
}

func (p *AccountType) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMark() {
		if err := oprot.WriteFieldBegin("mark", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mark: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Mark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mark (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mark: ", p), err)
		}
	}
	return err
}

func (p *AccountType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountType(%+v)", *p)
}

// Attributes:
//  - Name
//  - Sex
//  - Status
//  - PortraitURL
//  - Sign
//  - UserID
//  - Match
//  - PhoneNums
//  - Emails
//  - OriPortraitURL
//  - Birthday
//  - AccountName
//  - LockDeadline
//  - RemainLockDuration
//  - SDKID
//  - Score
//  - Area
//  - EntExtend
//  - Accounts
//  - OrgID
//  - RoleID
//  - BizStatus
//  - UploadFlag
//  - Realname
//  - Extend
//  - OrgList
type SmallUserBean struct {
	// unused fields # 1 to 2
	Name string `thrift:"name,3" json:"name"`
	// unused field # 4
	Sex         *int8   `thrift:"sex,5" json:"sex,omitempty"`
	Status      int8    `thrift:"status,6" json:"status"`
	PortraitURL string  `thrift:"portraitURL,7" json:"portraitURL"`
	Sign        *string `thrift:"sign,8" json:"sign,omitempty"`
	UserID      int64   `thrift:"userID,9" json:"userID"`
	// unused field # 10
	Match              *int8               `thrift:"match,11" json:"match,omitempty"`
	PhoneNums          []string            `thrift:"phoneNums,12" json:"phoneNums,omitempty"`
	Emails             []string            `thrift:"emails,13" json:"emails,omitempty"`
	OriPortraitURL     string              `thrift:"oriPortraitURL,14" json:"oriPortraitURL"`
	Birthday           *YMD                `thrift:"birthday,15" json:"birthday,omitempty"`
	AccountName        *string             `thrift:"accountName,16" json:"accountName,omitempty"`
	LockDeadline       *int64              `thrift:"lockDeadline,17" json:"lockDeadline,omitempty"`
	RemainLockDuration *int64              `thrift:"remainLockDuration,18" json:"remainLockDuration,omitempty"`
	SDKID              *int64              `thrift:"SDKID,19" json:"SDKID,omitempty"`
	Score              *float64            `thrift:"score,20" json:"score,omitempty"`
	Area               *string             `thrift:"area,21" json:"area,omitempty"`
	EntExtend          *string             `thrift:"entExtend,22" json:"entExtend,omitempty"`
	Accounts           []*AccountType      `thrift:"accounts,23" json:"accounts,omitempty"`
	OrgID              *string             `thrift:"orgID,24" json:"orgID,omitempty"`
	RoleID             *int64              `thrift:"roleID,25" json:"roleID,omitempty"`
	BizStatus          *int8               `thrift:"bizStatus,26" json:"bizStatus,omitempty"`
	UploadFlag         *int8               `thrift:"uploadFlag,27" json:"uploadFlag,omitempty"`
	Realname           *string             `thrift:"realname,28" json:"realname,omitempty"`
	Extend             *string             `thrift:"extend,29" json:"extend,omitempty"`
	OrgList            []*OrganizationBean `thrift:"orgList,30" json:"orgList,omitempty"`
}

func NewSmallUserBean() *SmallUserBean {
	return &SmallUserBean{}
}

func (p *SmallUserBean) GetName() string {
	return p.Name
}

var SmallUserBean_Sex_DEFAULT int8

func (p *SmallUserBean) GetSex() int8 {
	if !p.IsSetSex() {
		return SmallUserBean_Sex_DEFAULT
	}
	return *p.Sex
}

func (p *SmallUserBean) GetStatus() int8 {
	return p.Status
}

func (p *SmallUserBean) GetPortraitURL() string {
	return p.PortraitURL
}

var SmallUserBean_Sign_DEFAULT string

func (p *SmallUserBean) GetSign() string {
	if !p.IsSetSign() {
		return SmallUserBean_Sign_DEFAULT
	}
	return *p.Sign
}

func (p *SmallUserBean) GetUserID() int64 {
	return p.UserID
}

var SmallUserBean_Match_DEFAULT int8

func (p *SmallUserBean) GetMatch() int8 {
	if !p.IsSetMatch() {
		return SmallUserBean_Match_DEFAULT
	}
	return *p.Match
}

var SmallUserBean_PhoneNums_DEFAULT []string

func (p *SmallUserBean) GetPhoneNums() []string {
	return p.PhoneNums
}

var SmallUserBean_Emails_DEFAULT []string

func (p *SmallUserBean) GetEmails() []string {
	return p.Emails
}

func (p *SmallUserBean) GetOriPortraitURL() string {
	return p.OriPortraitURL
}

var SmallUserBean_Birthday_DEFAULT *YMD

func (p *SmallUserBean) GetBirthday() *YMD {
	if !p.IsSetBirthday() {
		return SmallUserBean_Birthday_DEFAULT
	}
	return p.Birthday
}

var SmallUserBean_AccountName_DEFAULT string

func (p *SmallUserBean) GetAccountName() string {
	if !p.IsSetAccountName() {
		return SmallUserBean_AccountName_DEFAULT
	}
	return *p.AccountName
}

var SmallUserBean_LockDeadline_DEFAULT int64

func (p *SmallUserBean) GetLockDeadline() int64 {
	if !p.IsSetLockDeadline() {
		return SmallUserBean_LockDeadline_DEFAULT
	}
	return *p.LockDeadline
}

var SmallUserBean_RemainLockDuration_DEFAULT int64

func (p *SmallUserBean) GetRemainLockDuration() int64 {
	if !p.IsSetRemainLockDuration() {
		return SmallUserBean_RemainLockDuration_DEFAULT
	}
	return *p.RemainLockDuration
}

var SmallUserBean_SDKID_DEFAULT int64

func (p *SmallUserBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return SmallUserBean_SDKID_DEFAULT
	}
	return *p.SDKID
}

var SmallUserBean_Score_DEFAULT float64

func (p *SmallUserBean) GetScore() float64 {
	if !p.IsSetScore() {
		return SmallUserBean_Score_DEFAULT
	}
	return *p.Score
}

var SmallUserBean_Area_DEFAULT string

func (p *SmallUserBean) GetArea() string {
	if !p.IsSetArea() {
		return SmallUserBean_Area_DEFAULT
	}
	return *p.Area
}

var SmallUserBean_EntExtend_DEFAULT string

func (p *SmallUserBean) GetEntExtend() string {
	if !p.IsSetEntExtend() {
		return SmallUserBean_EntExtend_DEFAULT
	}
	return *p.EntExtend
}

var SmallUserBean_Accounts_DEFAULT []*AccountType

func (p *SmallUserBean) GetAccounts() []*AccountType {
	return p.Accounts
}

var SmallUserBean_OrgID_DEFAULT string

func (p *SmallUserBean) GetOrgID() string {
	if !p.IsSetOrgID() {
		return SmallUserBean_OrgID_DEFAULT
	}
	return *p.OrgID
}

var SmallUserBean_RoleID_DEFAULT int64

func (p *SmallUserBean) GetRoleID() int64 {
	if !p.IsSetRoleID() {
		return SmallUserBean_RoleID_DEFAULT
	}
	return *p.RoleID
}

var SmallUserBean_BizStatus_DEFAULT int8

func (p *SmallUserBean) GetBizStatus() int8 {
	if !p.IsSetBizStatus() {
		return SmallUserBean_BizStatus_DEFAULT
	}
	return *p.BizStatus
}

var SmallUserBean_UploadFlag_DEFAULT int8

func (p *SmallUserBean) GetUploadFlag() int8 {
	if !p.IsSetUploadFlag() {
		return SmallUserBean_UploadFlag_DEFAULT
	}
	return *p.UploadFlag
}

var SmallUserBean_Realname_DEFAULT string

func (p *SmallUserBean) GetRealname() string {
	if !p.IsSetRealname() {
		return SmallUserBean_Realname_DEFAULT
	}
	return *p.Realname
}

var SmallUserBean_Extend_DEFAULT string

func (p *SmallUserBean) GetExtend() string {
	if !p.IsSetExtend() {
		return SmallUserBean_Extend_DEFAULT
	}
	return *p.Extend
}

var SmallUserBean_OrgList_DEFAULT []*OrganizationBean

func (p *SmallUserBean) GetOrgList() []*OrganizationBean {
	return p.OrgList
}
func (p *SmallUserBean) IsSetSex() bool {
	return p.Sex != nil
}

func (p *SmallUserBean) IsSetSign() bool {
	return p.Sign != nil
}

func (p *SmallUserBean) IsSetMatch() bool {
	return p.Match != nil
}

func (p *SmallUserBean) IsSetPhoneNums() bool {
	return p.PhoneNums != nil
}

func (p *SmallUserBean) IsSetEmails() bool {
	return p.Emails != nil
}

func (p *SmallUserBean) IsSetBirthday() bool {
	return p.Birthday != nil
}

func (p *SmallUserBean) IsSetAccountName() bool {
	return p.AccountName != nil
}

func (p *SmallUserBean) IsSetLockDeadline() bool {
	return p.LockDeadline != nil
}

func (p *SmallUserBean) IsSetRemainLockDuration() bool {
	return p.RemainLockDuration != nil
}

func (p *SmallUserBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *SmallUserBean) IsSetScore() bool {
	return p.Score != nil
}

func (p *SmallUserBean) IsSetArea() bool {
	return p.Area != nil
}

func (p *SmallUserBean) IsSetEntExtend() bool {
	return p.EntExtend != nil
}

func (p *SmallUserBean) IsSetAccounts() bool {
	return p.Accounts != nil
}

func (p *SmallUserBean) IsSetOrgID() bool {
	return p.OrgID != nil
}

func (p *SmallUserBean) IsSetRoleID() bool {
	return p.RoleID != nil
}

func (p *SmallUserBean) IsSetBizStatus() bool {
	return p.BizStatus != nil
}

func (p *SmallUserBean) IsSetUploadFlag() bool {
	return p.UploadFlag != nil
}

func (p *SmallUserBean) IsSetRealname() bool {
	return p.Realname != nil
}

func (p *SmallUserBean) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *SmallUserBean) IsSetOrgList() bool {
	return p.OrgList != nil
}

func (p *SmallUserBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallUserBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SmallUserBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Sex = &temp
	}
	return nil
}

func (p *SmallUserBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Status = temp
	}
	return nil
}

func (p *SmallUserBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PortraitURL = v
	}
	return nil
}

func (p *SmallUserBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Sign = &v
	}
	return nil
}

func (p *SmallUserBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *SmallUserBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.Match = &temp
	}
	return nil
}

func (p *SmallUserBean) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PhoneNums = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.PhoneNums = append(p.PhoneNums, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SmallUserBean) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Emails = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Emails = append(p.Emails, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SmallUserBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.OriPortraitURL = v
	}
	return nil
}

func (p *SmallUserBean) readField15(iprot thrift.TProtocol) error {
	p.Birthday = &YMD{}
	if err := p.Birthday.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
	}
	return nil
}

func (p *SmallUserBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.AccountName = &v
	}
	return nil
}

func (p *SmallUserBean) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.LockDeadline = &v
	}
	return nil
}

func (p *SmallUserBean) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.RemainLockDuration = &v
	}
	return nil
}

func (p *SmallUserBean) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *SmallUserBean) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Score = &v
	}
	return nil
}

func (p *SmallUserBean) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.Area = &v
	}
	return nil
}

func (p *SmallUserBean) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.EntExtend = &v
	}
	return nil
}

func (p *SmallUserBean) readField23(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AccountType, 0, size)
	p.Accounts = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &AccountType{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Accounts = append(p.Accounts, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SmallUserBean) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.OrgID = &v
	}
	return nil
}

func (p *SmallUserBean) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.RoleID = &v
	}
	return nil
}

func (p *SmallUserBean) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		temp := int8(v)
		p.BizStatus = &temp
	}
	return nil
}

func (p *SmallUserBean) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		temp := int8(v)
		p.UploadFlag = &temp
	}
	return nil
}

func (p *SmallUserBean) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.Realname = &v
	}
	return nil
}

func (p *SmallUserBean) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *SmallUserBean) readField30(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OrganizationBean, 0, size)
	p.OrgList = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &OrganizationBean{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.OrgList = append(p.OrgList, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SmallUserBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallUserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallUserBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *SmallUserBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSex() {
		if err := oprot.WriteFieldBegin("sex", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sex: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Sex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sex (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sex: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err)
	}
	return err
}

func (p *SmallUserBean) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("portraitURL", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:portraitURL: ", p), err)
	}
	if err := oprot.WriteString(string(p.PortraitURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.portraitURL (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:portraitURL: ", p), err)
	}
	return err
}

func (p *SmallUserBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSign() {
		if err := oprot.WriteFieldBegin("sign", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sign: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sign)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sign (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sign: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:userID: ", p), err)
	}
	return err
}

func (p *SmallUserBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatch() {
		if err := oprot.WriteFieldBegin("match", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:match: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Match)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.match (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:match: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNums() {
		if err := oprot.WriteFieldBegin("phoneNums", thrift.LIST, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:phoneNums: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PhoneNums)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PhoneNums {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:phoneNums: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmails() {
		if err := oprot.WriteFieldBegin("emails", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:emails: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Emails {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:emails: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oriPortraitURL", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:oriPortraitURL: ", p), err)
	}
	if err := oprot.WriteString(string(p.OriPortraitURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.oriPortraitURL (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:oriPortraitURL: ", p), err)
	}
	return err
}

func (p *SmallUserBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err := oprot.WriteFieldBegin("birthday", thrift.STRUCT, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:birthday: ", p), err)
		}
		if err := p.Birthday.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:birthday: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountName() {
		if err := oprot.WriteFieldBegin("accountName", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:accountName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AccountName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.accountName (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:accountName: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetLockDeadline() {
		if err := oprot.WriteFieldBegin("lockDeadline", thrift.I64, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:lockDeadline: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LockDeadline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lockDeadline (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:lockDeadline: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainLockDuration() {
		if err := oprot.WriteFieldBegin("remainLockDuration", thrift.I64, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:remainLockDuration: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RemainLockDuration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainLockDuration (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:remainLockDuration: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:SDKID: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetScore() {
		if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:score: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Score)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.score (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:score: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetArea() {
		if err := oprot.WriteFieldBegin("area", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:area: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Area)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.area (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:area: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntExtend() {
		if err := oprot.WriteFieldBegin("entExtend", thrift.STRING, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:entExtend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntExtend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entExtend (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:entExtend: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccounts() {
		if err := oprot.WriteFieldBegin("accounts", thrift.LIST, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:accounts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Accounts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Accounts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:accounts: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgID() {
		if err := oprot.WriteFieldBegin("orgID", thrift.STRING, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:orgID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgID (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:orgID: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoleID() {
		if err := oprot.WriteFieldBegin("roleID", thrift.I64, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:roleID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RoleID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roleID (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:roleID: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizStatus() {
		if err := oprot.WriteFieldBegin("bizStatus", thrift.BYTE, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:bizStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.BizStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bizStatus (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:bizStatus: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadFlag() {
		if err := oprot.WriteFieldBegin("uploadFlag", thrift.BYTE, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:uploadFlag: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.UploadFlag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploadFlag (27) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:uploadFlag: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetRealname() {
		if err := oprot.WriteFieldBegin("realname", thrift.STRING, 28); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:realname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Realname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.realname (28) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 28:realname: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 29); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (29) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 29:extend: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgList() {
		if err := oprot.WriteFieldBegin("orgList", thrift.LIST, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:orgList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrgList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.OrgList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:orgList: ", p), err)
		}
	}
	return err
}

func (p *SmallUserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallUserBean(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Name
//  - Sex
//  - Status
//  - PortraitURL
//  - Remark
//  - GroupID
//  - Sign
//  - Page
//  - TinyUserType
//  - StarBuddy
//  - TimeZone
//  - PhoneNums
//  - Emails
//  - OriPortraitURL
//  - BackgroundURL
//  - AccountName
//  - Area
//  - Birthday
//  - LockDeadline
//  - RemainLockDuration
//  - SDKID
//  - Accounts
//  - UserTypeNum
//  - BuddySetting
type TinyUserBean struct {
	UserID             int64           `thrift:"userID,1" json:"userID"`
	Name               *string         `thrift:"name,2" json:"name,omitempty"`
	Sex                *int8           `thrift:"sex,3" json:"sex,omitempty"`
	Status             *int8           `thrift:"status,4" json:"status,omitempty"`
	PortraitURL        *string         `thrift:"portraitURL,5" json:"portraitURL,omitempty"`
	Remark             *string         `thrift:"remark,6" json:"remark,omitempty"`
	GroupID            *int64          `thrift:"groupID,7" json:"groupID,omitempty"`
	Sign               *string         `thrift:"sign,8" json:"sign,omitempty"`
	Page               *int16          `thrift:"page,9" json:"page,omitempty"`
	TinyUserType       *int8           `thrift:"tinyUserType,10" json:"tinyUserType,omitempty"`
	StarBuddy          *int8           `thrift:"starBuddy,11" json:"starBuddy,omitempty"`
	TimeZone           *int8           `thrift:"timeZone,12" json:"timeZone,omitempty"`
	PhoneNums          []string        `thrift:"phoneNums,13" json:"phoneNums,omitempty"`
	Emails             []string        `thrift:"emails,14" json:"emails,omitempty"`
	OriPortraitURL     *string         `thrift:"oriPortraitURL,15" json:"oriPortraitURL,omitempty"`
	BackgroundURL      *string         `thrift:"backgroundURL,16" json:"backgroundURL,omitempty"`
	AccountName        *string         `thrift:"accountName,17" json:"accountName,omitempty"`
	Area               *string         `thrift:"area,18" json:"area,omitempty"`
	Birthday           *YMD            `thrift:"birthday,19" json:"birthday,omitempty"`
	LockDeadline       *int64          `thrift:"lockDeadline,20" json:"lockDeadline,omitempty"`
	RemainLockDuration *int64          `thrift:"remainLockDuration,21" json:"remainLockDuration,omitempty"`
	SDKID              *int64          `thrift:"SDKID,22" json:"SDKID,omitempty"`
	Accounts           []*AccountType  `thrift:"accounts,23" json:"accounts,omitempty"`
	UserTypeNum        *int16          `thrift:"userTypeNum,24" json:"userTypeNum,omitempty"`
	BuddySetting       map[int32]int32 `thrift:"buddySetting,25" json:"buddySetting,omitempty"`
}

func NewTinyUserBean() *TinyUserBean {
	return &TinyUserBean{}
}

func (p *TinyUserBean) GetUserID() int64 {
	return p.UserID
}

var TinyUserBean_Name_DEFAULT string

func (p *TinyUserBean) GetName() string {
	if !p.IsSetName() {
		return TinyUserBean_Name_DEFAULT
	}
	return *p.Name
}

var TinyUserBean_Sex_DEFAULT int8

func (p *TinyUserBean) GetSex() int8 {
	if !p.IsSetSex() {
		return TinyUserBean_Sex_DEFAULT
	}
	return *p.Sex
}

var TinyUserBean_Status_DEFAULT int8

func (p *TinyUserBean) GetStatus() int8 {
	if !p.IsSetStatus() {
		return TinyUserBean_Status_DEFAULT
	}
	return *p.Status
}

var TinyUserBean_PortraitURL_DEFAULT string

func (p *TinyUserBean) GetPortraitURL() string {
	if !p.IsSetPortraitURL() {
		return TinyUserBean_PortraitURL_DEFAULT
	}
	return *p.PortraitURL
}

var TinyUserBean_Remark_DEFAULT string

func (p *TinyUserBean) GetRemark() string {
	if !p.IsSetRemark() {
		return TinyUserBean_Remark_DEFAULT
	}
	return *p.Remark
}

var TinyUserBean_GroupID_DEFAULT int64

func (p *TinyUserBean) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return TinyUserBean_GroupID_DEFAULT
	}
	return *p.GroupID
}

var TinyUserBean_Sign_DEFAULT string

func (p *TinyUserBean) GetSign() string {
	if !p.IsSetSign() {
		return TinyUserBean_Sign_DEFAULT
	}
	return *p.Sign
}

var TinyUserBean_Page_DEFAULT int16

func (p *TinyUserBean) GetPage() int16 {
	if !p.IsSetPage() {
		return TinyUserBean_Page_DEFAULT
	}
	return *p.Page
}

var TinyUserBean_TinyUserType_DEFAULT int8

func (p *TinyUserBean) GetTinyUserType() int8 {
	if !p.IsSetTinyUserType() {
		return TinyUserBean_TinyUserType_DEFAULT
	}
	return *p.TinyUserType
}

var TinyUserBean_StarBuddy_DEFAULT int8

func (p *TinyUserBean) GetStarBuddy() int8 {
	if !p.IsSetStarBuddy() {
		return TinyUserBean_StarBuddy_DEFAULT
	}
	return *p.StarBuddy
}

var TinyUserBean_TimeZone_DEFAULT int8

func (p *TinyUserBean) GetTimeZone() int8 {
	if !p.IsSetTimeZone() {
		return TinyUserBean_TimeZone_DEFAULT
	}
	return *p.TimeZone
}

var TinyUserBean_PhoneNums_DEFAULT []string

func (p *TinyUserBean) GetPhoneNums() []string {
	return p.PhoneNums
}

var TinyUserBean_Emails_DEFAULT []string

func (p *TinyUserBean) GetEmails() []string {
	return p.Emails
}

var TinyUserBean_OriPortraitURL_DEFAULT string

func (p *TinyUserBean) GetOriPortraitURL() string {
	if !p.IsSetOriPortraitURL() {
		return TinyUserBean_OriPortraitURL_DEFAULT
	}
	return *p.OriPortraitURL
}

var TinyUserBean_BackgroundURL_DEFAULT string

func (p *TinyUserBean) GetBackgroundURL() string {
	if !p.IsSetBackgroundURL() {
		return TinyUserBean_BackgroundURL_DEFAULT
	}
	return *p.BackgroundURL
}

var TinyUserBean_AccountName_DEFAULT string

func (p *TinyUserBean) GetAccountName() string {
	if !p.IsSetAccountName() {
		return TinyUserBean_AccountName_DEFAULT
	}
	return *p.AccountName
}

var TinyUserBean_Area_DEFAULT string

func (p *TinyUserBean) GetArea() string {
	if !p.IsSetArea() {
		return TinyUserBean_Area_DEFAULT
	}
	return *p.Area
}

var TinyUserBean_Birthday_DEFAULT *YMD

func (p *TinyUserBean) GetBirthday() *YMD {
	if !p.IsSetBirthday() {
		return TinyUserBean_Birthday_DEFAULT
	}
	return p.Birthday
}

var TinyUserBean_LockDeadline_DEFAULT int64

func (p *TinyUserBean) GetLockDeadline() int64 {
	if !p.IsSetLockDeadline() {
		return TinyUserBean_LockDeadline_DEFAULT
	}
	return *p.LockDeadline
}

var TinyUserBean_RemainLockDuration_DEFAULT int64

func (p *TinyUserBean) GetRemainLockDuration() int64 {
	if !p.IsSetRemainLockDuration() {
		return TinyUserBean_RemainLockDuration_DEFAULT
	}
	return *p.RemainLockDuration
}

var TinyUserBean_SDKID_DEFAULT int64

func (p *TinyUserBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return TinyUserBean_SDKID_DEFAULT
	}
	return *p.SDKID
}

var TinyUserBean_Accounts_DEFAULT []*AccountType

func (p *TinyUserBean) GetAccounts() []*AccountType {
	return p.Accounts
}

var TinyUserBean_UserTypeNum_DEFAULT int16

func (p *TinyUserBean) GetUserTypeNum() int16 {
	if !p.IsSetUserTypeNum() {
		return TinyUserBean_UserTypeNum_DEFAULT
	}
	return *p.UserTypeNum
}

var TinyUserBean_BuddySetting_DEFAULT map[int32]int32

func (p *TinyUserBean) GetBuddySetting() map[int32]int32 {
	return p.BuddySetting
}
func (p *TinyUserBean) IsSetName() bool {
	return p.Name != nil
}

func (p *TinyUserBean) IsSetSex() bool {
	return p.Sex != nil
}

func (p *TinyUserBean) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TinyUserBean) IsSetPortraitURL() bool {
	return p.PortraitURL != nil
}

func (p *TinyUserBean) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *TinyUserBean) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *TinyUserBean) IsSetSign() bool {
	return p.Sign != nil
}

func (p *TinyUserBean) IsSetPage() bool {
	return p.Page != nil
}

func (p *TinyUserBean) IsSetTinyUserType() bool {
	return p.TinyUserType != nil
}

func (p *TinyUserBean) IsSetStarBuddy() bool {
	return p.StarBuddy != nil
}

func (p *TinyUserBean) IsSetTimeZone() bool {
	return p.TimeZone != nil
}

func (p *TinyUserBean) IsSetPhoneNums() bool {
	return p.PhoneNums != nil
}

func (p *TinyUserBean) IsSetEmails() bool {
	return p.Emails != nil
}

func (p *TinyUserBean) IsSetOriPortraitURL() bool {
	return p.OriPortraitURL != nil
}

func (p *TinyUserBean) IsSetBackgroundURL() bool {
	return p.BackgroundURL != nil
}

func (p *TinyUserBean) IsSetAccountName() bool {
	return p.AccountName != nil
}

func (p *TinyUserBean) IsSetArea() bool {
	return p.Area != nil
}

func (p *TinyUserBean) IsSetBirthday() bool {
	return p.Birthday != nil
}

func (p *TinyUserBean) IsSetLockDeadline() bool {
	return p.LockDeadline != nil
}

func (p *TinyUserBean) IsSetRemainLockDuration() bool {
	return p.RemainLockDuration != nil
}

func (p *TinyUserBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *TinyUserBean) IsSetAccounts() bool {
	return p.Accounts != nil
}

func (p *TinyUserBean) IsSetUserTypeNum() bool {
	return p.UserTypeNum != nil
}

func (p *TinyUserBean) IsSetBuddySetting() bool {
	return p.BuddySetting != nil
}

func (p *TinyUserBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TinyUserBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *TinyUserBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TinyUserBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Sex = &temp
	}
	return nil
}

func (p *TinyUserBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *TinyUserBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PortraitURL = &v
	}
	return nil
}

func (p *TinyUserBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Remark = &v
	}
	return nil
}

func (p *TinyUserBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *TinyUserBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Sign = &v
	}
	return nil
}

func (p *TinyUserBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Page = &v
	}
	return nil
}

func (p *TinyUserBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.TinyUserType = &temp
	}
	return nil
}

func (p *TinyUserBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.StarBuddy = &temp
	}
	return nil
}

func (p *TinyUserBean) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.TimeZone = &temp
	}
	return nil
}

func (p *TinyUserBean) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PhoneNums = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.PhoneNums = append(p.PhoneNums, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TinyUserBean) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Emails = tSlice
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.Emails = append(p.Emails, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TinyUserBean) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.OriPortraitURL = &v
	}
	return nil
}

func (p *TinyUserBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.BackgroundURL = &v
	}
	return nil
}

func (p *TinyUserBean) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.AccountName = &v
	}
	return nil
}

func (p *TinyUserBean) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Area = &v
	}
	return nil
}

func (p *TinyUserBean) readField19(iprot thrift.TProtocol) error {
	p.Birthday = &YMD{}
	if err := p.Birthday.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
	}
	return nil
}

func (p *TinyUserBean) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.LockDeadline = &v
	}
	return nil
}

func (p *TinyUserBean) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.RemainLockDuration = &v
	}
	return nil
}

func (p *TinyUserBean) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *TinyUserBean) readField23(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AccountType, 0, size)
	p.Accounts = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &AccountType{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Accounts = append(p.Accounts, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TinyUserBean) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.UserTypeNum = &v
	}
	return nil
}

func (p *TinyUserBean) readField25(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]int32, size)
	p.BuddySetting = tMap
	for i := 0; i < size; i++ {
		var _key7 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key7 = v
		}
		var _val8 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val8 = v
		}
		p.BuddySetting[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TinyUserBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TinyUserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TinyUserBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *TinyUserBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSex() {
		if err := oprot.WriteFieldBegin("sex", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sex: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Sex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sex (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sex: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPortraitURL() {
		if err := oprot.WriteFieldBegin("portraitURL", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:portraitURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PortraitURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.portraitURL (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:portraitURL: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err := oprot.WriteFieldBegin("remark", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:remark: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Remark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remark (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:remark: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:groupID: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSign() {
		if err := oprot.WriteFieldBegin("sign", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sign: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sign)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sign (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sign: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err := oprot.WriteFieldBegin("page", thrift.I16, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:page: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Page)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.page (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:page: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTinyUserType() {
		if err := oprot.WriteFieldBegin("tinyUserType", thrift.BYTE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:tinyUserType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.TinyUserType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tinyUserType (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:tinyUserType: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStarBuddy() {
		if err := oprot.WriteFieldBegin("starBuddy", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:starBuddy: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.StarBuddy)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.starBuddy (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:starBuddy: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeZone() {
		if err := oprot.WriteFieldBegin("timeZone", thrift.BYTE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:timeZone: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.TimeZone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeZone (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:timeZone: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNums() {
		if err := oprot.WriteFieldBegin("phoneNums", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:phoneNums: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PhoneNums)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PhoneNums {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:phoneNums: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmails() {
		if err := oprot.WriteFieldBegin("emails", thrift.LIST, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:emails: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Emails {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:emails: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriPortraitURL() {
		if err := oprot.WriteFieldBegin("oriPortraitURL", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:oriPortraitURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriPortraitURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.oriPortraitURL (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:oriPortraitURL: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackgroundURL() {
		if err := oprot.WriteFieldBegin("backgroundURL", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:backgroundURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BackgroundURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.backgroundURL (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:backgroundURL: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountName() {
		if err := oprot.WriteFieldBegin("accountName", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:accountName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AccountName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.accountName (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:accountName: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetArea() {
		if err := oprot.WriteFieldBegin("area", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:area: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Area)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.area (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:area: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err := oprot.WriteFieldBegin("birthday", thrift.STRUCT, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:birthday: ", p), err)
		}
		if err := p.Birthday.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:birthday: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetLockDeadline() {
		if err := oprot.WriteFieldBegin("lockDeadline", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:lockDeadline: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LockDeadline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lockDeadline (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:lockDeadline: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainLockDuration() {
		if err := oprot.WriteFieldBegin("remainLockDuration", thrift.I64, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:remainLockDuration: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RemainLockDuration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainLockDuration (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:remainLockDuration: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:SDKID: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccounts() {
		if err := oprot.WriteFieldBegin("accounts", thrift.LIST, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:accounts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Accounts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Accounts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:accounts: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserTypeNum() {
		if err := oprot.WriteFieldBegin("userTypeNum", thrift.I16, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:userTypeNum: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.UserTypeNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userTypeNum (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:userTypeNum: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuddySetting() {
		if err := oprot.WriteFieldBegin("buddySetting", thrift.MAP, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:buddySetting: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.BuddySetting)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.BuddySetting {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:buddySetting: ", p), err)
		}
	}
	return err
}

func (p *TinyUserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TinyUserBean(%+v)", *p)
}

// 一级用户服务对外提供的用户对象
//
// Attributes:
//  - UserID
//  - SDKID
//  - Name
//  - Status
//  - PortraitURL
//  - ChangeVersion
type UserBaseBean struct {
	UserID *int64 `thrift:"userID,1" json:"userID,omitempty"`
	SDKID  *int64 `thrift:"SDKID,2" json:"SDKID,omitempty"`
	// unused field # 3
	Name          *string `thrift:"name,4" json:"name,omitempty"`
	Status        *int8   `thrift:"status,5" json:"status,omitempty"`
	PortraitURL   *string `thrift:"portraitURL,6" json:"portraitURL,omitempty"`
	ChangeVersion *int64  `thrift:"changeVersion,7" json:"changeVersion,omitempty"`
}

func NewUserBaseBean() *UserBaseBean {
	return &UserBaseBean{}
}

var UserBaseBean_UserID_DEFAULT int64

func (p *UserBaseBean) GetUserID() int64 {
	if !p.IsSetUserID() {
		return UserBaseBean_UserID_DEFAULT
	}
	return *p.UserID
}

var UserBaseBean_SDKID_DEFAULT int64

func (p *UserBaseBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return UserBaseBean_SDKID_DEFAULT
	}
	return *p.SDKID
}

var UserBaseBean_Name_DEFAULT string

func (p *UserBaseBean) GetName() string {
	if !p.IsSetName() {
		return UserBaseBean_Name_DEFAULT
	}
	return *p.Name
}

var UserBaseBean_Status_DEFAULT int8

func (p *UserBaseBean) GetStatus() int8 {
	if !p.IsSetStatus() {
		return UserBaseBean_Status_DEFAULT
	}
	return *p.Status
}

var UserBaseBean_PortraitURL_DEFAULT string

func (p *UserBaseBean) GetPortraitURL() string {
	if !p.IsSetPortraitURL() {
		return UserBaseBean_PortraitURL_DEFAULT
	}
	return *p.PortraitURL
}

var UserBaseBean_ChangeVersion_DEFAULT int64

func (p *UserBaseBean) GetChangeVersion() int64 {
	if !p.IsSetChangeVersion() {
		return UserBaseBean_ChangeVersion_DEFAULT
	}
	return *p.ChangeVersion
}
func (p *UserBaseBean) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserBaseBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *UserBaseBean) IsSetName() bool {
	return p.Name != nil
}

func (p *UserBaseBean) IsSetStatus() bool {
	return p.Status != nil
}

func (p *UserBaseBean) IsSetPortraitURL() bool {
	return p.PortraitURL != nil
}

func (p *UserBaseBean) IsSetChangeVersion() bool {
	return p.ChangeVersion != nil
}

func (p *UserBaseBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserBaseBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *UserBaseBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *UserBaseBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *UserBaseBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *UserBaseBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PortraitURL = &v
	}
	return nil
}

func (p *UserBaseBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ChangeVersion = &v
	}
	return nil
}

func (p *UserBaseBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserBaseBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserBaseBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
		}
	}
	return err
}

func (p *UserBaseBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SDKID: ", p), err)
		}
	}
	return err
}

func (p *UserBaseBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err)
		}
	}
	return err
}

func (p *UserBaseBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err)
		}
	}
	return err
}

func (p *UserBaseBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPortraitURL() {
		if err := oprot.WriteFieldBegin("portraitURL", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:portraitURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PortraitURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.portraitURL (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:portraitURL: ", p), err)
		}
	}
	return err
}

func (p *UserBaseBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetChangeVersion() {
		if err := oprot.WriteFieldBegin("changeVersion", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:changeVersion: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ChangeVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.changeVersion (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:changeVersion: ", p), err)
		}
	}
	return err
}

func (p *UserBaseBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserBaseBean(%+v)", *p)
}

// Attributes:
//  - UserTypeNum
//  - TinyUserBean
type BuddyBean struct {
	UserTypeNum  *int16        `thrift:"userTypeNum,1" json:"userTypeNum,omitempty"`
	TinyUserBean *TinyUserBean `thrift:"tinyUserBean,2" json:"tinyUserBean,omitempty"`
}

func NewBuddyBean() *BuddyBean {
	return &BuddyBean{}
}

var BuddyBean_UserTypeNum_DEFAULT int16

func (p *BuddyBean) GetUserTypeNum() int16 {
	if !p.IsSetUserTypeNum() {
		return BuddyBean_UserTypeNum_DEFAULT
	}
	return *p.UserTypeNum
}

var BuddyBean_TinyUserBean_DEFAULT *TinyUserBean

func (p *BuddyBean) GetTinyUserBean() *TinyUserBean {
	if !p.IsSetTinyUserBean() {
		return BuddyBean_TinyUserBean_DEFAULT
	}
	return p.TinyUserBean
}
func (p *BuddyBean) IsSetUserTypeNum() bool {
	return p.UserTypeNum != nil
}

func (p *BuddyBean) IsSetTinyUserBean() bool {
	return p.TinyUserBean != nil
}

func (p *BuddyBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BuddyBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserTypeNum = &v
	}
	return nil
}

func (p *BuddyBean) readField2(iprot thrift.TProtocol) error {
	p.TinyUserBean = &TinyUserBean{}
	if err := p.TinyUserBean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TinyUserBean), err)
	}
	return nil
}

func (p *BuddyBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BuddyBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BuddyBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserTypeNum() {
		if err := oprot.WriteFieldBegin("userTypeNum", thrift.I16, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userTypeNum: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.UserTypeNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userTypeNum (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userTypeNum: ", p), err)
		}
	}
	return err
}

func (p *BuddyBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTinyUserBean() {
		if err := oprot.WriteFieldBegin("tinyUserBean", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tinyUserBean: ", p), err)
		}
		if err := p.TinyUserBean.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TinyUserBean), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tinyUserBean: ", p), err)
		}
	}
	return err
}

func (p *BuddyBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuddyBean(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Name
//  - Pwd
//  - Sex
//  - Area
//  - Birthday
//  - Status
//  - PortraitURL
//  - Sign
//  - TimeZone
//  - PhoneNums
//  - Emails
//  - OriPortraitURL
//  - AccountName
//  - Extend
//  - LockDeadline
//  - RemainLockDuration
//  - SDKID
//  - EntExtend
//  - Accounts
//  - RegFlag
//  - PwdStrength
//  - OrgID
//  - RoleID
//  - BizStatus
//  - UploadFlag
//  - OldStatus
//  - Realname
//  - Score
//  - Match
//  - ImportFlag
//  - RegTime
//  - TagIds
type UserBean struct {
	UserID *int64 `thrift:"userID,1" json:"userID,omitempty"`
	// unused fields # 2 to 4
	Name     *string `thrift:"name,5" json:"name,omitempty"`
	Pwd      *string `thrift:"pwd,6" json:"pwd,omitempty"`
	Sex      *int8   `thrift:"sex,7" json:"sex,omitempty"`
	Area     *string `thrift:"area,8" json:"area,omitempty"`
	Birthday *YMD    `thrift:"birthday,9" json:"birthday,omitempty"`
	// unused fields # 10 to 12
	Status         *int8    `thrift:"status,13" json:"status,omitempty"`
	PortraitURL    *string  `thrift:"portraitURL,14" json:"portraitURL,omitempty"`
	Sign           *string  `thrift:"sign,15" json:"sign,omitempty"`
	TimeZone       *int8    `thrift:"timeZone,16" json:"timeZone,omitempty"`
	PhoneNums      []string `thrift:"phoneNums,17" json:"phoneNums,omitempty"`
	Emails         []string `thrift:"emails,18" json:"emails,omitempty"`
	OriPortraitURL *string  `thrift:"oriPortraitURL,19" json:"oriPortraitURL,omitempty"`
	// unused field # 20
	AccountName        *string        `thrift:"accountName,21" json:"accountName,omitempty"`
	Extend             *string        `thrift:"extend,22" json:"extend,omitempty"`
	LockDeadline       *int64         `thrift:"lockDeadline,23" json:"lockDeadline,omitempty"`
	RemainLockDuration *int64         `thrift:"remainLockDuration,24" json:"remainLockDuration,omitempty"`
	SDKID              *int64         `thrift:"SDKID,25" json:"SDKID,omitempty"`
	EntExtend          *string        `thrift:"entExtend,26" json:"entExtend,omitempty"`
	Accounts           []*AccountType `thrift:"accounts,27" json:"accounts,omitempty"`
	RegFlag            *int8          `thrift:"regFlag,28" json:"regFlag,omitempty"`
	PwdStrength        *int8          `thrift:"pwdStrength,29" json:"pwdStrength,omitempty"`
	OrgID              *string        `thrift:"orgID,30" json:"orgID,omitempty"`
	RoleID             *int64         `thrift:"roleID,31" json:"roleID,omitempty"`
	BizStatus          *int8          `thrift:"bizStatus,32" json:"bizStatus,omitempty"`
	UploadFlag         *int8          `thrift:"uploadFlag,33" json:"uploadFlag,omitempty"`
	OldStatus          *int8          `thrift:"oldStatus,34" json:"oldStatus,omitempty"`
	Realname           *string        `thrift:"realname,35" json:"realname,omitempty"`
	Score              *float64       `thrift:"score,36" json:"score,omitempty"`
	Match              *int8          `thrift:"match,37" json:"match,omitempty"`
	ImportFlag         *string        `thrift:"importFlag,38" json:"importFlag,omitempty"`
	RegTime            *int64         `thrift:"regTime,39" json:"regTime,omitempty"`
	TagIds             *string        `thrift:"tagIds,40" json:"tagIds,omitempty"`
}

func NewUserBean() *UserBean {
	return &UserBean{}
}

var UserBean_UserID_DEFAULT int64

func (p *UserBean) GetUserID() int64 {
	if !p.IsSetUserID() {
		return UserBean_UserID_DEFAULT
	}
	return *p.UserID
}

var UserBean_Name_DEFAULT string

func (p *UserBean) GetName() string {
	if !p.IsSetName() {
		return UserBean_Name_DEFAULT
	}
	return *p.Name
}

var UserBean_Pwd_DEFAULT string

func (p *UserBean) GetPwd() string {
	if !p.IsSetPwd() {
		return UserBean_Pwd_DEFAULT
	}
	return *p.Pwd
}

var UserBean_Sex_DEFAULT int8

func (p *UserBean) GetSex() int8 {
	if !p.IsSetSex() {
		return UserBean_Sex_DEFAULT
	}
	return *p.Sex
}

var UserBean_Area_DEFAULT string

func (p *UserBean) GetArea() string {
	if !p.IsSetArea() {
		return UserBean_Area_DEFAULT
	}
	return *p.Area
}

var UserBean_Birthday_DEFAULT *YMD

func (p *UserBean) GetBirthday() *YMD {
	if !p.IsSetBirthday() {
		return UserBean_Birthday_DEFAULT
	}
	return p.Birthday
}

var UserBean_Status_DEFAULT int8

func (p *UserBean) GetStatus() int8 {
	if !p.IsSetStatus() {
		return UserBean_Status_DEFAULT
	}
	return *p.Status
}

var UserBean_PortraitURL_DEFAULT string

func (p *UserBean) GetPortraitURL() string {
	if !p.IsSetPortraitURL() {
		return UserBean_PortraitURL_DEFAULT
	}
	return *p.PortraitURL
}

var UserBean_Sign_DEFAULT string

func (p *UserBean) GetSign() string {
	if !p.IsSetSign() {
		return UserBean_Sign_DEFAULT
	}
	return *p.Sign
}

var UserBean_TimeZone_DEFAULT int8

func (p *UserBean) GetTimeZone() int8 {
	if !p.IsSetTimeZone() {
		return UserBean_TimeZone_DEFAULT
	}
	return *p.TimeZone
}

var UserBean_PhoneNums_DEFAULT []string

func (p *UserBean) GetPhoneNums() []string {
	return p.PhoneNums
}

var UserBean_Emails_DEFAULT []string

func (p *UserBean) GetEmails() []string {
	return p.Emails
}

var UserBean_OriPortraitURL_DEFAULT string

func (p *UserBean) GetOriPortraitURL() string {
	if !p.IsSetOriPortraitURL() {
		return UserBean_OriPortraitURL_DEFAULT
	}
	return *p.OriPortraitURL
}

var UserBean_AccountName_DEFAULT string

func (p *UserBean) GetAccountName() string {
	if !p.IsSetAccountName() {
		return UserBean_AccountName_DEFAULT
	}
	return *p.AccountName
}

var UserBean_Extend_DEFAULT string

func (p *UserBean) GetExtend() string {
	if !p.IsSetExtend() {
		return UserBean_Extend_DEFAULT
	}
	return *p.Extend
}

var UserBean_LockDeadline_DEFAULT int64

func (p *UserBean) GetLockDeadline() int64 {
	if !p.IsSetLockDeadline() {
		return UserBean_LockDeadline_DEFAULT
	}
	return *p.LockDeadline
}

var UserBean_RemainLockDuration_DEFAULT int64

func (p *UserBean) GetRemainLockDuration() int64 {
	if !p.IsSetRemainLockDuration() {
		return UserBean_RemainLockDuration_DEFAULT
	}
	return *p.RemainLockDuration
}

var UserBean_SDKID_DEFAULT int64

func (p *UserBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return UserBean_SDKID_DEFAULT
	}
	return *p.SDKID
}

var UserBean_EntExtend_DEFAULT string

func (p *UserBean) GetEntExtend() string {
	if !p.IsSetEntExtend() {
		return UserBean_EntExtend_DEFAULT
	}
	return *p.EntExtend
}

var UserBean_Accounts_DEFAULT []*AccountType

func (p *UserBean) GetAccounts() []*AccountType {
	return p.Accounts
}

var UserBean_RegFlag_DEFAULT int8

func (p *UserBean) GetRegFlag() int8 {
	if !p.IsSetRegFlag() {
		return UserBean_RegFlag_DEFAULT
	}
	return *p.RegFlag
}

var UserBean_PwdStrength_DEFAULT int8

func (p *UserBean) GetPwdStrength() int8 {
	if !p.IsSetPwdStrength() {
		return UserBean_PwdStrength_DEFAULT
	}
	return *p.PwdStrength
}

var UserBean_OrgID_DEFAULT string

func (p *UserBean) GetOrgID() string {
	if !p.IsSetOrgID() {
		return UserBean_OrgID_DEFAULT
	}
	return *p.OrgID
}

var UserBean_RoleID_DEFAULT int64

func (p *UserBean) GetRoleID() int64 {
	if !p.IsSetRoleID() {
		return UserBean_RoleID_DEFAULT
	}
	return *p.RoleID
}

var UserBean_BizStatus_DEFAULT int8

func (p *UserBean) GetBizStatus() int8 {
	if !p.IsSetBizStatus() {
		return UserBean_BizStatus_DEFAULT
	}
	return *p.BizStatus
}

var UserBean_UploadFlag_DEFAULT int8

func (p *UserBean) GetUploadFlag() int8 {
	if !p.IsSetUploadFlag() {
		return UserBean_UploadFlag_DEFAULT
	}
	return *p.UploadFlag
}

var UserBean_OldStatus_DEFAULT int8

func (p *UserBean) GetOldStatus() int8 {
	if !p.IsSetOldStatus() {
		return UserBean_OldStatus_DEFAULT
	}
	return *p.OldStatus
}

var UserBean_Realname_DEFAULT string

func (p *UserBean) GetRealname() string {
	if !p.IsSetRealname() {
		return UserBean_Realname_DEFAULT
	}
	return *p.Realname
}

var UserBean_Score_DEFAULT float64

func (p *UserBean) GetScore() float64 {
	if !p.IsSetScore() {
		return UserBean_Score_DEFAULT
	}
	return *p.Score
}

var UserBean_Match_DEFAULT int8

func (p *UserBean) GetMatch() int8 {
	if !p.IsSetMatch() {
		return UserBean_Match_DEFAULT
	}
	return *p.Match
}

var UserBean_ImportFlag_DEFAULT string

func (p *UserBean) GetImportFlag() string {
	if !p.IsSetImportFlag() {
		return UserBean_ImportFlag_DEFAULT
	}
	return *p.ImportFlag
}

var UserBean_RegTime_DEFAULT int64

func (p *UserBean) GetRegTime() int64 {
	if !p.IsSetRegTime() {
		return UserBean_RegTime_DEFAULT
	}
	return *p.RegTime
}

var UserBean_TagIds_DEFAULT string

func (p *UserBean) GetTagIds() string {
	if !p.IsSetTagIds() {
		return UserBean_TagIds_DEFAULT
	}
	return *p.TagIds
}
func (p *UserBean) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserBean) IsSetName() bool {
	return p.Name != nil
}

func (p *UserBean) IsSetPwd() bool {
	return p.Pwd != nil
}

func (p *UserBean) IsSetSex() bool {
	return p.Sex != nil
}

func (p *UserBean) IsSetArea() bool {
	return p.Area != nil
}

func (p *UserBean) IsSetBirthday() bool {
	return p.Birthday != nil
}

func (p *UserBean) IsSetStatus() bool {
	return p.Status != nil
}

func (p *UserBean) IsSetPortraitURL() bool {
	return p.PortraitURL != nil
}

func (p *UserBean) IsSetSign() bool {
	return p.Sign != nil
}

func (p *UserBean) IsSetTimeZone() bool {
	return p.TimeZone != nil
}

func (p *UserBean) IsSetPhoneNums() bool {
	return p.PhoneNums != nil
}

func (p *UserBean) IsSetEmails() bool {
	return p.Emails != nil
}

func (p *UserBean) IsSetOriPortraitURL() bool {
	return p.OriPortraitURL != nil
}

func (p *UserBean) IsSetAccountName() bool {
	return p.AccountName != nil
}

func (p *UserBean) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *UserBean) IsSetLockDeadline() bool {
	return p.LockDeadline != nil
}

func (p *UserBean) IsSetRemainLockDuration() bool {
	return p.RemainLockDuration != nil
}

func (p *UserBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *UserBean) IsSetEntExtend() bool {
	return p.EntExtend != nil
}

func (p *UserBean) IsSetAccounts() bool {
	return p.Accounts != nil
}

func (p *UserBean) IsSetRegFlag() bool {
	return p.RegFlag != nil
}

func (p *UserBean) IsSetPwdStrength() bool {
	return p.PwdStrength != nil
}

func (p *UserBean) IsSetOrgID() bool {
	return p.OrgID != nil
}

func (p *UserBean) IsSetRoleID() bool {
	return p.RoleID != nil
}

func (p *UserBean) IsSetBizStatus() bool {
	return p.BizStatus != nil
}

func (p *UserBean) IsSetUploadFlag() bool {
	return p.UploadFlag != nil
}

func (p *UserBean) IsSetOldStatus() bool {
	return p.OldStatus != nil
}

func (p *UserBean) IsSetRealname() bool {
	return p.Realname != nil
}

func (p *UserBean) IsSetScore() bool {
	return p.Score != nil
}

func (p *UserBean) IsSetMatch() bool {
	return p.Match != nil
}

func (p *UserBean) IsSetImportFlag() bool {
	return p.ImportFlag != nil
}

func (p *UserBean) IsSetRegTime() bool {
	return p.RegTime != nil
}

func (p *UserBean) IsSetTagIds() bool {
	return p.TagIds != nil
}

func (p *UserBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.readField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.readField34(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.readField35(iprot); err != nil {
				return err
			}
		case 36:
			if err := p.readField36(iprot); err != nil {
				return err
			}
		case 37:
			if err := p.readField37(iprot); err != nil {
				return err
			}
		case 38:
			if err := p.readField38(iprot); err != nil {
				return err
			}
		case 39:
			if err := p.readField39(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.readField40(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *UserBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *UserBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Pwd = &v
	}
	return nil
}

func (p *UserBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.Sex = &temp
	}
	return nil
}

func (p *UserBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Area = &v
	}
	return nil
}

func (p *UserBean) readField9(iprot thrift.TProtocol) error {
	p.Birthday = &YMD{}
	if err := p.Birthday.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
	}
	return nil
}

func (p *UserBean) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *UserBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.PortraitURL = &v
	}
	return nil
}

func (p *UserBean) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Sign = &v
	}
	return nil
}

func (p *UserBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		temp := int8(v)
		p.TimeZone = &temp
	}
	return nil
}

func (p *UserBean) readField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PhoneNums = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.PhoneNums = append(p.PhoneNums, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBean) readField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Emails = tSlice
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.Emails = append(p.Emails, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBean) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.OriPortraitURL = &v
	}
	return nil
}

func (p *UserBean) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.AccountName = &v
	}
	return nil
}

func (p *UserBean) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *UserBean) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.LockDeadline = &v
	}
	return nil
}

func (p *UserBean) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.RemainLockDuration = &v
	}
	return nil
}

func (p *UserBean) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *UserBean) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.EntExtend = &v
	}
	return nil
}

func (p *UserBean) readField27(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AccountType, 0, size)
	p.Accounts = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &AccountType{}
		if err := _elem11.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.Accounts = append(p.Accounts, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserBean) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		temp := int8(v)
		p.RegFlag = &temp
	}
	return nil
}

func (p *UserBean) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		temp := int8(v)
		p.PwdStrength = &temp
	}
	return nil
}

func (p *UserBean) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.OrgID = &v
	}
	return nil
}

func (p *UserBean) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.RoleID = &v
	}
	return nil
}

func (p *UserBean) readField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		temp := int8(v)
		p.BizStatus = &temp
	}
	return nil
}

func (p *UserBean) readField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		temp := int8(v)
		p.UploadFlag = &temp
	}
	return nil
}

func (p *UserBean) readField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		temp := int8(v)
		p.OldStatus = &temp
	}
	return nil
}

func (p *UserBean) readField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.Realname = &v
	}
	return nil
}

func (p *UserBean) readField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.Score = &v
	}
	return nil
}

func (p *UserBean) readField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		temp := int8(v)
		p.Match = &temp
	}
	return nil
}

func (p *UserBean) readField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		p.ImportFlag = &v
	}
	return nil
}

func (p *UserBean) readField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		p.RegTime = &v
	}
	return nil
}

func (p *UserBean) readField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.TagIds = &v
	}
	return nil
}

func (p *UserBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField36(oprot); err != nil {
		return err
	}
	if err := p.writeField37(oprot); err != nil {
		return err
	}
	if err := p.writeField38(oprot); err != nil {
		return err
	}
	if err := p.writeField39(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwd() {
		if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pwd: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Pwd)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pwd (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pwd: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSex() {
		if err := oprot.WriteFieldBegin("sex", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sex: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Sex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sex (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sex: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetArea() {
		if err := oprot.WriteFieldBegin("area", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:area: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Area)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.area (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:area: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err := oprot.WriteFieldBegin("birthday", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:birthday: ", p), err)
		}
		if err := p.Birthday.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:birthday: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:status: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetPortraitURL() {
		if err := oprot.WriteFieldBegin("portraitURL", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:portraitURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PortraitURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.portraitURL (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:portraitURL: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSign() {
		if err := oprot.WriteFieldBegin("sign", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:sign: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sign)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sign (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:sign: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeZone() {
		if err := oprot.WriteFieldBegin("timeZone", thrift.BYTE, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:timeZone: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.TimeZone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeZone (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:timeZone: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNums() {
		if err := oprot.WriteFieldBegin("phoneNums", thrift.LIST, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:phoneNums: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PhoneNums)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PhoneNums {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:phoneNums: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmails() {
		if err := oprot.WriteFieldBegin("emails", thrift.LIST, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:emails: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Emails {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:emails: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriPortraitURL() {
		if err := oprot.WriteFieldBegin("oriPortraitURL", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:oriPortraitURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OriPortraitURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.oriPortraitURL (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:oriPortraitURL: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountName() {
		if err := oprot.WriteFieldBegin("accountName", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:accountName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AccountName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.accountName (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:accountName: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:extend: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetLockDeadline() {
		if err := oprot.WriteFieldBegin("lockDeadline", thrift.I64, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:lockDeadline: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LockDeadline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lockDeadline (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:lockDeadline: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainLockDuration() {
		if err := oprot.WriteFieldBegin("remainLockDuration", thrift.I64, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:remainLockDuration: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RemainLockDuration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainLockDuration (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:remainLockDuration: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:SDKID: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntExtend() {
		if err := oprot.WriteFieldBegin("entExtend", thrift.STRING, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:entExtend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntExtend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entExtend (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:entExtend: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccounts() {
		if err := oprot.WriteFieldBegin("accounts", thrift.LIST, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:accounts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Accounts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Accounts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:accounts: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegFlag() {
		if err := oprot.WriteFieldBegin("regFlag", thrift.BYTE, 28); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:regFlag: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.RegFlag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.regFlag (28) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 28:regFlag: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwdStrength() {
		if err := oprot.WriteFieldBegin("pwdStrength", thrift.BYTE, 29); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:pwdStrength: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.PwdStrength)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pwdStrength (29) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 29:pwdStrength: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgID() {
		if err := oprot.WriteFieldBegin("orgID", thrift.STRING, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:orgID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgID (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:orgID: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoleID() {
		if err := oprot.WriteFieldBegin("roleID", thrift.I64, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:roleID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RoleID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roleID (31) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:roleID: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizStatus() {
		if err := oprot.WriteFieldBegin("bizStatus", thrift.BYTE, 32); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:bizStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.BizStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bizStatus (32) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 32:bizStatus: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadFlag() {
		if err := oprot.WriteFieldBegin("uploadFlag", thrift.BYTE, 33); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:uploadFlag: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.UploadFlag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploadFlag (33) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 33:uploadFlag: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetOldStatus() {
		if err := oprot.WriteFieldBegin("oldStatus", thrift.BYTE, 34); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:oldStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.OldStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.oldStatus (34) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 34:oldStatus: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetRealname() {
		if err := oprot.WriteFieldBegin("realname", thrift.STRING, 35); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:realname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Realname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.realname (35) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 35:realname: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetScore() {
		if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 36); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:score: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Score)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.score (36) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 36:score: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField37(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatch() {
		if err := oprot.WriteFieldBegin("match", thrift.BYTE, 37); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:match: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Match)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.match (37) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 37:match: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField38(oprot thrift.TProtocol) (err error) {
	if p.IsSetImportFlag() {
		if err := oprot.WriteFieldBegin("importFlag", thrift.STRING, 38); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:importFlag: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ImportFlag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.importFlag (38) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 38:importFlag: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField39(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegTime() {
		if err := oprot.WriteFieldBegin("regTime", thrift.I64, 39); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:regTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RegTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.regTime (39) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 39:regTime: ", p), err)
		}
	}
	return err
}

func (p *UserBean) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagIds() {
		if err := oprot.WriteFieldBegin("tagIds", thrift.STRING, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:tagIds: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TagIds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tagIds (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:tagIds: ", p), err)
		}
	}
	return err
}

func (p *UserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserBean(%+v)", *p)
}

// Attributes:
//  - SendUserID
//  - ReceTargetID
//  - SendTime
//  - Message
//  - MessageType
//  - MessageID
//  - Format
//  - LastMessageID
//  - SenderSessionID
//  - LimitRange
//  - MsgProperties
//  - ActiveType
//  - RelatedUsers
//  - RelatedMsgID
//  - SDKID
//  - SetRead
//  - SourceID
//  - SubMsgType
//  - UnreadCount
//  - SnapshotID
//  - ApFlag
type MessageStorageBean struct {
	SendUserID   int64   `thrift:"sendUserID,1" json:"sendUserID"`
	ReceTargetID int64   `thrift:"receTargetID,2" json:"receTargetID"`
	SendTime     int64   `thrift:"sendTime,3" json:"sendTime"`
	Message      *string `thrift:"message,4" json:"message,omitempty"`
	// unused field # 5
	MessageType     int8    `thrift:"messageType,6" json:"messageType"`
	MessageID       int64   `thrift:"messageID,7" json:"messageID"`
	Format          string  `thrift:"format,8" json:"format"`
	LastMessageID   *int64  `thrift:"lastMessageID,9" json:"lastMessageID,omitempty"`
	SenderSessionID *int64  `thrift:"senderSessionID,10" json:"senderSessionID,omitempty"`
	LimitRange      []int64 `thrift:"limitRange,11" json:"limitRange,omitempty"`
	MsgProperties   *string `thrift:"msgProperties,12" json:"msgProperties,omitempty"`
	ActiveType      *int8   `thrift:"activeType,13" json:"activeType,omitempty"`
	RelatedUsers    []int64 `thrift:"relatedUsers,14" json:"relatedUsers,omitempty"`
	RelatedMsgID    *int64  `thrift:"relatedMsgID,15" json:"relatedMsgID,omitempty"`
	SDKID           *int64  `thrift:"SDKID,16" json:"SDKID,omitempty"`
	SetRead         *int8   `thrift:"setRead,17" json:"setRead,omitempty"`
	SourceID        *string `thrift:"sourceID,18" json:"sourceID,omitempty"`
	SubMsgType      *int32  `thrift:"subMsgType,19" json:"subMsgType,omitempty"`
	UnreadCount     *int32  `thrift:"unreadCount,20" json:"unreadCount,omitempty"`
	SnapshotID      *int64  `thrift:"snapshotID,21" json:"snapshotID,omitempty"`
	// unused fields # 22 to 899
	ApFlag *int64 `thrift:"apFlag,900" json:"apFlag,omitempty"`
}

func NewMessageStorageBean() *MessageStorageBean {
	return &MessageStorageBean{}
}

func (p *MessageStorageBean) GetSendUserID() int64 {
	return p.SendUserID
}

func (p *MessageStorageBean) GetReceTargetID() int64 {
	return p.ReceTargetID
}

func (p *MessageStorageBean) GetSendTime() int64 {
	return p.SendTime
}

var MessageStorageBean_Message_DEFAULT string

func (p *MessageStorageBean) GetMessage() string {
	if !p.IsSetMessage() {
		return MessageStorageBean_Message_DEFAULT
	}
	return *p.Message
}

func (p *MessageStorageBean) GetMessageType() int8 {
	return p.MessageType
}

func (p *MessageStorageBean) GetMessageID() int64 {
	return p.MessageID
}

func (p *MessageStorageBean) GetFormat() string {
	return p.Format
}

var MessageStorageBean_LastMessageID_DEFAULT int64

func (p *MessageStorageBean) GetLastMessageID() int64 {
	if !p.IsSetLastMessageID() {
		return MessageStorageBean_LastMessageID_DEFAULT
	}
	return *p.LastMessageID
}

var MessageStorageBean_SenderSessionID_DEFAULT int64

func (p *MessageStorageBean) GetSenderSessionID() int64 {
	if !p.IsSetSenderSessionID() {
		return MessageStorageBean_SenderSessionID_DEFAULT
	}
	return *p.SenderSessionID
}

var MessageStorageBean_LimitRange_DEFAULT []int64

func (p *MessageStorageBean) GetLimitRange() []int64 {
	return p.LimitRange
}

var MessageStorageBean_MsgProperties_DEFAULT string

func (p *MessageStorageBean) GetMsgProperties() string {
	if !p.IsSetMsgProperties() {
		return MessageStorageBean_MsgProperties_DEFAULT
	}
	return *p.MsgProperties
}

var MessageStorageBean_ActiveType_DEFAULT int8

func (p *MessageStorageBean) GetActiveType() int8 {
	if !p.IsSetActiveType() {
		return MessageStorageBean_ActiveType_DEFAULT
	}
	return *p.ActiveType
}

var MessageStorageBean_RelatedUsers_DEFAULT []int64

func (p *MessageStorageBean) GetRelatedUsers() []int64 {
	return p.RelatedUsers
}

var MessageStorageBean_RelatedMsgID_DEFAULT int64

func (p *MessageStorageBean) GetRelatedMsgID() int64 {
	if !p.IsSetRelatedMsgID() {
		return MessageStorageBean_RelatedMsgID_DEFAULT
	}
	return *p.RelatedMsgID
}

var MessageStorageBean_SDKID_DEFAULT int64

func (p *MessageStorageBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return MessageStorageBean_SDKID_DEFAULT
	}
	return *p.SDKID
}

var MessageStorageBean_SetRead_DEFAULT int8

func (p *MessageStorageBean) GetSetRead() int8 {
	if !p.IsSetSetRead() {
		return MessageStorageBean_SetRead_DEFAULT
	}
	return *p.SetRead
}

var MessageStorageBean_SourceID_DEFAULT string

func (p *MessageStorageBean) GetSourceID() string {
	if !p.IsSetSourceID() {
		return MessageStorageBean_SourceID_DEFAULT
	}
	return *p.SourceID
}

var MessageStorageBean_SubMsgType_DEFAULT int32

func (p *MessageStorageBean) GetSubMsgType() int32 {
	if !p.IsSetSubMsgType() {
		return MessageStorageBean_SubMsgType_DEFAULT
	}
	return *p.SubMsgType
}

var MessageStorageBean_UnreadCount_DEFAULT int32

func (p *MessageStorageBean) GetUnreadCount() int32 {
	if !p.IsSetUnreadCount() {
		return MessageStorageBean_UnreadCount_DEFAULT
	}
	return *p.UnreadCount
}

var MessageStorageBean_SnapshotID_DEFAULT int64

func (p *MessageStorageBean) GetSnapshotID() int64 {
	if !p.IsSetSnapshotID() {
		return MessageStorageBean_SnapshotID_DEFAULT
	}
	return *p.SnapshotID
}

var MessageStorageBean_ApFlag_DEFAULT int64

func (p *MessageStorageBean) GetApFlag() int64 {
	if !p.IsSetApFlag() {
		return MessageStorageBean_ApFlag_DEFAULT
	}
	return *p.ApFlag
}
func (p *MessageStorageBean) IsSetMessage() bool {
	return p.Message != nil
}

func (p *MessageStorageBean) IsSetLastMessageID() bool {
	return p.LastMessageID != nil
}

func (p *MessageStorageBean) IsSetSenderSessionID() bool {
	return p.SenderSessionID != nil
}

func (p *MessageStorageBean) IsSetLimitRange() bool {
	return p.LimitRange != nil
}

func (p *MessageStorageBean) IsSetMsgProperties() bool {
	return p.MsgProperties != nil
}

func (p *MessageStorageBean) IsSetActiveType() bool {
	return p.ActiveType != nil
}

func (p *MessageStorageBean) IsSetRelatedUsers() bool {
	return p.RelatedUsers != nil
}

func (p *MessageStorageBean) IsSetRelatedMsgID() bool {
	return p.RelatedMsgID != nil
}

func (p *MessageStorageBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *MessageStorageBean) IsSetSetRead() bool {
	return p.SetRead != nil
}

func (p *MessageStorageBean) IsSetSourceID() bool {
	return p.SourceID != nil
}

func (p *MessageStorageBean) IsSetSubMsgType() bool {
	return p.SubMsgType != nil
}

func (p *MessageStorageBean) IsSetUnreadCount() bool {
	return p.UnreadCount != nil
}

func (p *MessageStorageBean) IsSetSnapshotID() bool {
	return p.SnapshotID != nil
}

func (p *MessageStorageBean) IsSetApFlag() bool {
	return p.ApFlag != nil
}

func (p *MessageStorageBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 900:
			if err := p.readField900(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MessageStorageBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SendUserID = v
	}
	return nil
}

func (p *MessageStorageBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReceTargetID = v
	}
	return nil
}

func (p *MessageStorageBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SendTime = v
	}
	return nil
}

func (p *MessageStorageBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *MessageStorageBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.MessageType = temp
	}
	return nil
}

func (p *MessageStorageBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.MessageID = v
	}
	return nil
}

func (p *MessageStorageBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Format = v
	}
	return nil
}

func (p *MessageStorageBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.LastMessageID = &v
	}
	return nil
}

func (p *MessageStorageBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SenderSessionID = &v
	}
	return nil
}

func (p *MessageStorageBean) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.LimitRange = tSlice
	for i := 0; i < size; i++ {
		var _elem12 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.LimitRange = append(p.LimitRange, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MessageStorageBean) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.MsgProperties = &v
	}
	return nil
}

func (p *MessageStorageBean) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := int8(v)
		p.ActiveType = &temp
	}
	return nil
}

func (p *MessageStorageBean) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.RelatedUsers = tSlice
	for i := 0; i < size; i++ {
		var _elem13 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.RelatedUsers = append(p.RelatedUsers, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MessageStorageBean) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.RelatedMsgID = &v
	}
	return nil
}

func (p *MessageStorageBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *MessageStorageBean) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := int8(v)
		p.SetRead = &temp
	}
	return nil
}

func (p *MessageStorageBean) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.SourceID = &v
	}
	return nil
}

func (p *MessageStorageBean) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.SubMsgType = &v
	}
	return nil
}

func (p *MessageStorageBean) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.UnreadCount = &v
	}
	return nil
}

func (p *MessageStorageBean) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.SnapshotID = &v
	}
	return nil
}

func (p *MessageStorageBean) readField900(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 900: ", err)
	} else {
		p.ApFlag = &v
	}
	return nil
}

func (p *MessageStorageBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageStorageBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField900(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MessageStorageBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendUserID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sendUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SendUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sendUserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sendUserID: ", p), err)
	}
	return err
}

func (p *MessageStorageBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receTargetID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:receTargetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReceTargetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receTargetID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:receTargetID: ", p), err)
	}
	return err
}

func (p *MessageStorageBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sendTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SendTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sendTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sendTime: ", p), err)
	}
	return err
}

func (p *MessageStorageBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageType", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:messageType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.MessageType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:messageType: ", p), err)
	}
	return err
}

func (p *MessageStorageBean) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageID", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:messageID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MessageID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageID (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:messageID: ", p), err)
	}
	return err
}

func (p *MessageStorageBean) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("format", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:format: ", p), err)
	}
	if err := oprot.WriteString(string(p.Format)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.format (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:format: ", p), err)
	}
	return err
}

func (p *MessageStorageBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastMessageID() {
		if err := oprot.WriteFieldBegin("lastMessageID", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastMessageID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastMessageID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastMessageID (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastMessageID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSenderSessionID() {
		if err := oprot.WriteFieldBegin("senderSessionID", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:senderSessionID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SenderSessionID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.senderSessionID (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:senderSessionID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimitRange() {
		if err := oprot.WriteFieldBegin("limitRange", thrift.LIST, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:limitRange: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.LimitRange)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.LimitRange {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:limitRange: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgProperties() {
		if err := oprot.WriteFieldBegin("msgProperties", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:msgProperties: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MsgProperties)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.msgProperties (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:msgProperties: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveType() {
		if err := oprot.WriteFieldBegin("activeType", thrift.BYTE, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:activeType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ActiveType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.activeType (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:activeType: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedUsers() {
		if err := oprot.WriteFieldBegin("relatedUsers", thrift.LIST, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:relatedUsers: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.RelatedUsers)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RelatedUsers {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:relatedUsers: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedMsgID() {
		if err := oprot.WriteFieldBegin("relatedMsgID", thrift.I64, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:relatedMsgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RelatedMsgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.relatedMsgID (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:relatedMsgID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:SDKID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetRead() {
		if err := oprot.WriteFieldBegin("setRead", thrift.BYTE, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:setRead: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.SetRead)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.setRead (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:setRead: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceID() {
		if err := oprot.WriteFieldBegin("sourceID", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:sourceID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SourceID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceID (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:sourceID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubMsgType() {
		if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:subMsgType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SubMsgType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subMsgType (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:subMsgType: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnreadCount() {
		if err := oprot.WriteFieldBegin("unreadCount", thrift.I32, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:unreadCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UnreadCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unreadCount (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:unreadCount: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotID() {
		if err := oprot.WriteFieldBegin("snapshotID", thrift.I64, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:snapshotID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SnapshotID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotID (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:snapshotID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) writeField900(oprot thrift.TProtocol) (err error) {
	if p.IsSetApFlag() {
		if err := oprot.WriteFieldBegin("apFlag", thrift.I64, 900); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 900:apFlag: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ApFlag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.apFlag (900) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 900:apFlag: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageStorageBean(%+v)", *p)
}

// Attributes:
//  - UserID
//  - TargetID
//  - Message
//  - MessageType: 消息类型（新增类型请务必添加注释）
// 1：html
// 2：文本
// 3：语音
// 4：位置
// 5：图片
// 6：文件
// 7：名片
// 8：弱提示
// 9：网页链接消息
// 10：应用推送消息
// 11：指令消息
// 12：机器人图文消息
// 13：组合消息
// 14：音视频请求消息（比如：呼叫消息、邀请消息、结束消息）
// 15：音视频握手消息（比如：接听）
// 16：语音视频预留类型
// 17：任务消息
// 18：消息撤回
// 19：动态表情
// 20：端到端
// 21-25：验证消息预留类型
// 26：模板消息
// 27：自定义表情消息
// 28：九宫格图片消息
// ...未知
// 31：邮件消息
// ...未知
// 34：已读未读消息
// 35：记事本
// 36：应用分享消息
// 37：潜水者消息
// ...未知
// 64：消息置顶动作（subMsgType：2置顶 3取消置顶）
// ...未知
// 66：智能客服消息
// ...未知
// 88：红包类型
// 89：微视频消息
// ...未知
// 99：SDK特殊消息类型
// 100：系统消息
//  - LocalID
//  - Maccode
//  - Format
//  - LimitRange
//  - MsgProperties
//  - ActiveType
//  - RelatedUsers
//  - RelatedMsgID
//  - SDKID
//  - SetRead
//  - SourceID
//  - SubMsgType
type MessageBean struct {
	UserID   int64  `thrift:"userID,1" json:"userID"`
	TargetID int64  `thrift:"targetID,2" json:"targetID"`
	Message  string `thrift:"message,3" json:"message"`
	// unused field # 4
	MessageType   int8    `thrift:"messageType,5" json:"messageType"`
	LocalID       int64   `thrift:"localID,6" json:"localID"`
	Maccode       *string `thrift:"maccode,7" json:"maccode,omitempty"`
	Format        string  `thrift:"format,8" json:"format"`
	LimitRange    []int64 `thrift:"limitRange,9" json:"limitRange,omitempty"`
	MsgProperties *string `thrift:"msgProperties,10" json:"msgProperties,omitempty"`
	ActiveType    *int8   `thrift:"activeType,11" json:"activeType,omitempty"`
	RelatedUsers  []int64 `thrift:"relatedUsers,12" json:"relatedUsers,omitempty"`
	RelatedMsgID  *int64  `thrift:"relatedMsgID,13" json:"relatedMsgID,omitempty"`
	SDKID         *int64  `thrift:"SDKID,14" json:"SDKID,omitempty"`
	SetRead       *int8   `thrift:"setRead,15" json:"setRead,omitempty"`
	SourceID      *string `thrift:"sourceID,16" json:"sourceID,omitempty"`
	SubMsgType    *int32  `thrift:"subMsgType,17" json:"subMsgType,omitempty"`
}

func NewMessageBean() *MessageBean {
	return &MessageBean{}
}

func (p *MessageBean) GetUserID() int64 {
	return p.UserID
}

func (p *MessageBean) GetTargetID() int64 {
	return p.TargetID
}

func (p *MessageBean) GetMessage() string {
	return p.Message
}

func (p *MessageBean) GetMessageType() int8 {
	return p.MessageType
}

func (p *MessageBean) GetLocalID() int64 {
	return p.LocalID
}

var MessageBean_Maccode_DEFAULT string

func (p *MessageBean) GetMaccode() string {
	if !p.IsSetMaccode() {
		return MessageBean_Maccode_DEFAULT
	}
	return *p.Maccode
}

func (p *MessageBean) GetFormat() string {
	return p.Format
}

var MessageBean_LimitRange_DEFAULT []int64

func (p *MessageBean) GetLimitRange() []int64 {
	return p.LimitRange
}

var MessageBean_MsgProperties_DEFAULT string

func (p *MessageBean) GetMsgProperties() string {
	if !p.IsSetMsgProperties() {
		return MessageBean_MsgProperties_DEFAULT
	}
	return *p.MsgProperties
}

var MessageBean_ActiveType_DEFAULT int8

func (p *MessageBean) GetActiveType() int8 {
	if !p.IsSetActiveType() {
		return MessageBean_ActiveType_DEFAULT
	}
	return *p.ActiveType
}

var MessageBean_RelatedUsers_DEFAULT []int64

func (p *MessageBean) GetRelatedUsers() []int64 {
	return p.RelatedUsers
}

var MessageBean_RelatedMsgID_DEFAULT int64

func (p *MessageBean) GetRelatedMsgID() int64 {
	if !p.IsSetRelatedMsgID() {
		return MessageBean_RelatedMsgID_DEFAULT
	}
	return *p.RelatedMsgID
}

var MessageBean_SDKID_DEFAULT int64

func (p *MessageBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return MessageBean_SDKID_DEFAULT
	}
	return *p.SDKID
}

var MessageBean_SetRead_DEFAULT int8

func (p *MessageBean) GetSetRead() int8 {
	if !p.IsSetSetRead() {
		return MessageBean_SetRead_DEFAULT
	}
	return *p.SetRead
}

var MessageBean_SourceID_DEFAULT string

func (p *MessageBean) GetSourceID() string {
	if !p.IsSetSourceID() {
		return MessageBean_SourceID_DEFAULT
	}
	return *p.SourceID
}

var MessageBean_SubMsgType_DEFAULT int32

func (p *MessageBean) GetSubMsgType() int32 {
	if !p.IsSetSubMsgType() {
		return MessageBean_SubMsgType_DEFAULT
	}
	return *p.SubMsgType
}
func (p *MessageBean) IsSetMaccode() bool {
	return p.Maccode != nil
}

func (p *MessageBean) IsSetLimitRange() bool {
	return p.LimitRange != nil
}

func (p *MessageBean) IsSetMsgProperties() bool {
	return p.MsgProperties != nil
}

func (p *MessageBean) IsSetActiveType() bool {
	return p.ActiveType != nil
}

func (p *MessageBean) IsSetRelatedUsers() bool {
	return p.RelatedUsers != nil
}

func (p *MessageBean) IsSetRelatedMsgID() bool {
	return p.RelatedMsgID != nil
}

func (p *MessageBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *MessageBean) IsSetSetRead() bool {
	return p.SetRead != nil
}

func (p *MessageBean) IsSetSourceID() bool {
	return p.SourceID != nil
}

func (p *MessageBean) IsSetSubMsgType() bool {
	return p.SubMsgType != nil
}

func (p *MessageBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MessageBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *MessageBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TargetID = v
	}
	return nil
}

func (p *MessageBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *MessageBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.MessageType = temp
	}
	return nil
}

func (p *MessageBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LocalID = v
	}
	return nil
}

func (p *MessageBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Maccode = &v
	}
	return nil
}

func (p *MessageBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Format = v
	}
	return nil
}

func (p *MessageBean) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.LimitRange = tSlice
	for i := 0; i < size; i++ {
		var _elem14 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.LimitRange = append(p.LimitRange, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MessageBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.MsgProperties = &v
	}
	return nil
}

func (p *MessageBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.ActiveType = &temp
	}
	return nil
}

func (p *MessageBean) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.RelatedUsers = tSlice
	for i := 0; i < size; i++ {
		var _elem15 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem15 = v
		}
		p.RelatedUsers = append(p.RelatedUsers, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MessageBean) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.RelatedMsgID = &v
	}
	return nil
}

func (p *MessageBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *MessageBean) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p.SetRead = &temp
	}
	return nil
}

func (p *MessageBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.SourceID = &v
	}
	return nil
}

func (p *MessageBean) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.SubMsgType = &v
	}
	return nil
}

func (p *MessageBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MessageBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *MessageBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TargetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targetID: ", p), err)
	}
	return err
}

func (p *MessageBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
	}
	return err
}

func (p *MessageBean) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageType", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:messageType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.MessageType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:messageType: ", p), err)
	}
	return err
}

func (p *MessageBean) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:localID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LocalID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:localID: ", p), err)
	}
	return err
}

func (p *MessageBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaccode() {
		if err := oprot.WriteFieldBegin("maccode", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:maccode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Maccode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maccode (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:maccode: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("format", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:format: ", p), err)
	}
	if err := oprot.WriteString(string(p.Format)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.format (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:format: ", p), err)
	}
	return err
}

func (p *MessageBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimitRange() {
		if err := oprot.WriteFieldBegin("limitRange", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:limitRange: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.LimitRange)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.LimitRange {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:limitRange: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgProperties() {
		if err := oprot.WriteFieldBegin("msgProperties", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:msgProperties: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MsgProperties)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.msgProperties (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:msgProperties: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveType() {
		if err := oprot.WriteFieldBegin("activeType", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:activeType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ActiveType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.activeType (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:activeType: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedUsers() {
		if err := oprot.WriteFieldBegin("relatedUsers", thrift.LIST, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:relatedUsers: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.RelatedUsers)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RelatedUsers {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:relatedUsers: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedMsgID() {
		if err := oprot.WriteFieldBegin("relatedMsgID", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:relatedMsgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RelatedMsgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.relatedMsgID (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:relatedMsgID: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:SDKID: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetRead() {
		if err := oprot.WriteFieldBegin("setRead", thrift.BYTE, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:setRead: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.SetRead)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.setRead (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:setRead: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceID() {
		if err := oprot.WriteFieldBegin("sourceID", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:sourceID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SourceID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceID (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:sourceID: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubMsgType() {
		if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:subMsgType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SubMsgType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subMsgType (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:subMsgType: ", p), err)
		}
	}
	return err
}

func (p *MessageBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageBean(%+v)", *p)
}

// Attributes:
//  - RequestType
//  - UserID
//  - VerifyInfo
//  - GroupID
//  - Remark
//  - ReqVerifyboxID
//  - SDKID
type RequestBuddyBean struct {
	RequestType    int8     `thrift:"requestType,1" json:"requestType"`
	UserID         int64    `thrift:"userID,2" json:"userID"`
	VerifyInfo     []string `thrift:"verifyInfo,3" json:"verifyInfo,omitempty"`
	GroupID        *int64   `thrift:"groupID,4" json:"groupID,omitempty"`
	Remark         *string  `thrift:"remark,5" json:"remark,omitempty"`
	ReqVerifyboxID *int64   `thrift:"reqVerifyboxID,6" json:"reqVerifyboxID,omitempty"`
	SDKID          *int64   `thrift:"SDKID,7" json:"SDKID,omitempty"`
}

func NewRequestBuddyBean() *RequestBuddyBean {
	return &RequestBuddyBean{}
}

func (p *RequestBuddyBean) GetRequestType() int8 {
	return p.RequestType
}

func (p *RequestBuddyBean) GetUserID() int64 {
	return p.UserID
}

var RequestBuddyBean_VerifyInfo_DEFAULT []string

func (p *RequestBuddyBean) GetVerifyInfo() []string {
	return p.VerifyInfo
}

var RequestBuddyBean_GroupID_DEFAULT int64

func (p *RequestBuddyBean) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return RequestBuddyBean_GroupID_DEFAULT
	}
	return *p.GroupID
}

var RequestBuddyBean_Remark_DEFAULT string

func (p *RequestBuddyBean) GetRemark() string {
	if !p.IsSetRemark() {
		return RequestBuddyBean_Remark_DEFAULT
	}
	return *p.Remark
}

var RequestBuddyBean_ReqVerifyboxID_DEFAULT int64

func (p *RequestBuddyBean) GetReqVerifyboxID() int64 {
	if !p.IsSetReqVerifyboxID() {
		return RequestBuddyBean_ReqVerifyboxID_DEFAULT
	}
	return *p.ReqVerifyboxID
}

var RequestBuddyBean_SDKID_DEFAULT int64

func (p *RequestBuddyBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return RequestBuddyBean_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *RequestBuddyBean) IsSetVerifyInfo() bool {
	return p.VerifyInfo != nil
}

func (p *RequestBuddyBean) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *RequestBuddyBean) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *RequestBuddyBean) IsSetReqVerifyboxID() bool {
	return p.ReqVerifyboxID != nil
}

func (p *RequestBuddyBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *RequestBuddyBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RequestBuddyBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.RequestType = temp
	}
	return nil
}

func (p *RequestBuddyBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *RequestBuddyBean) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.VerifyInfo = tSlice
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.VerifyInfo = append(p.VerifyInfo, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RequestBuddyBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *RequestBuddyBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Remark = &v
	}
	return nil
}

func (p *RequestBuddyBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ReqVerifyboxID = &v
	}
	return nil
}

func (p *RequestBuddyBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *RequestBuddyBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RequestBuddyBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RequestBuddyBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestType", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.RequestType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestType: ", p), err)
	}
	return err
}

func (p *RequestBuddyBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
	}
	return err
}

func (p *RequestBuddyBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVerifyInfo() {
		if err := oprot.WriteFieldBegin("verifyInfo", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifyInfo: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.VerifyInfo)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VerifyInfo {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifyInfo: ", p), err)
		}
	}
	return err
}

func (p *RequestBuddyBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groupID: ", p), err)
		}
	}
	return err
}

func (p *RequestBuddyBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err := oprot.WriteFieldBegin("remark", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:remark: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Remark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remark (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:remark: ", p), err)
		}
	}
	return err
}

func (p *RequestBuddyBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqVerifyboxID() {
		if err := oprot.WriteFieldBegin("reqVerifyboxID", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:reqVerifyboxID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReqVerifyboxID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqVerifyboxID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:reqVerifyboxID: ", p), err)
		}
	}
	return err
}

func (p *RequestBuddyBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SDKID: ", p), err)
		}
	}
	return err
}

func (p *RequestBuddyBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RequestBuddyBean(%+v)", *p)
}

// Attributes:
//  - UserID
//  - RefuseReason
//  - GroupID
//  - Remark
//  - IsAgree
//  - ReqVerifyboxID
//  - SDKID
//  - InviteMark
type ResponseBuddyBean struct {
	UserID         int64   `thrift:"userID,1" json:"userID"`
	RefuseReason   *string `thrift:"refuseReason,2" json:"refuseReason,omitempty"`
	GroupID        *int64  `thrift:"groupID,3" json:"groupID,omitempty"`
	Remark         *string `thrift:"remark,4" json:"remark,omitempty"`
	IsAgree        int8    `thrift:"isAgree,5" json:"isAgree"`
	ReqVerifyboxID int64   `thrift:"reqVerifyboxID,6" json:"reqVerifyboxID"`
	SDKID          *int64  `thrift:"SDKID,7" json:"SDKID,omitempty"`
	InviteMark     *int64  `thrift:"inviteMark,8" json:"inviteMark,omitempty"`
}

func NewResponseBuddyBean() *ResponseBuddyBean {
	return &ResponseBuddyBean{}
}

func (p *ResponseBuddyBean) GetUserID() int64 {
	return p.UserID
}

var ResponseBuddyBean_RefuseReason_DEFAULT string

func (p *ResponseBuddyBean) GetRefuseReason() string {
	if !p.IsSetRefuseReason() {
		return ResponseBuddyBean_RefuseReason_DEFAULT
	}
	return *p.RefuseReason
}

var ResponseBuddyBean_GroupID_DEFAULT int64

func (p *ResponseBuddyBean) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return ResponseBuddyBean_GroupID_DEFAULT
	}
	return *p.GroupID
}

var ResponseBuddyBean_Remark_DEFAULT string

func (p *ResponseBuddyBean) GetRemark() string {
	if !p.IsSetRemark() {
		return ResponseBuddyBean_Remark_DEFAULT
	}
	return *p.Remark
}

func (p *ResponseBuddyBean) GetIsAgree() int8 {
	return p.IsAgree
}

func (p *ResponseBuddyBean) GetReqVerifyboxID() int64 {
	return p.ReqVerifyboxID
}

var ResponseBuddyBean_SDKID_DEFAULT int64

func (p *ResponseBuddyBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return ResponseBuddyBean_SDKID_DEFAULT
	}
	return *p.SDKID
}

var ResponseBuddyBean_InviteMark_DEFAULT int64

func (p *ResponseBuddyBean) GetInviteMark() int64 {
	if !p.IsSetInviteMark() {
		return ResponseBuddyBean_InviteMark_DEFAULT
	}
	return *p.InviteMark
}
func (p *ResponseBuddyBean) IsSetRefuseReason() bool {
	return p.RefuseReason != nil
}

func (p *ResponseBuddyBean) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *ResponseBuddyBean) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *ResponseBuddyBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *ResponseBuddyBean) IsSetInviteMark() bool {
	return p.InviteMark != nil
}

func (p *ResponseBuddyBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ResponseBuddyBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *ResponseBuddyBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RefuseReason = &v
	}
	return nil
}

func (p *ResponseBuddyBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *ResponseBuddyBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Remark = &v
	}
	return nil
}

func (p *ResponseBuddyBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.IsAgree = temp
	}
	return nil
}

func (p *ResponseBuddyBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ReqVerifyboxID = v
	}
	return nil
}

func (p *ResponseBuddyBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *ResponseBuddyBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.InviteMark = &v
	}
	return nil
}

func (p *ResponseBuddyBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResponseBuddyBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResponseBuddyBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *ResponseBuddyBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRefuseReason() {
		if err := oprot.WriteFieldBegin("refuseReason", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:refuseReason: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RefuseReason)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.refuseReason (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:refuseReason: ", p), err)
		}
	}
	return err
}

func (p *ResponseBuddyBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupID: ", p), err)
		}
	}
	return err
}

func (p *ResponseBuddyBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err := oprot.WriteFieldBegin("remark", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:remark: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Remark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remark (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:remark: ", p), err)
		}
	}
	return err
}

func (p *ResponseBuddyBean) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isAgree", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isAgree: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.IsAgree)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isAgree (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isAgree: ", p), err)
	}
	return err
}

func (p *ResponseBuddyBean) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqVerifyboxID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:reqVerifyboxID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReqVerifyboxID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqVerifyboxID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:reqVerifyboxID: ", p), err)
	}
	return err
}

func (p *ResponseBuddyBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SDKID: ", p), err)
		}
	}
	return err
}

func (p *ResponseBuddyBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteMark() {
		if err := oprot.WriteFieldBegin("inviteMark", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:inviteMark: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.InviteMark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.inviteMark (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:inviteMark: ", p), err)
		}
	}
	return err
}

func (p *ResponseBuddyBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResponseBuddyBean(%+v)", *p)
}

// Attributes:
//  - ReqVerifyboxID
//  - ReqUserBean
//  - VerifyInfo
//  - RequestType: 请求类型:1:添加好友请求,2：请求关注类型
//  - RequestTime
//  - IsResponse
type BuddyReqBean struct {
	ReqVerifyboxID int64          `thrift:"reqVerifyboxID,1" json:"reqVerifyboxID"`
	ReqUserBean    *SmallUserBean `thrift:"reqUserBean,2" json:"reqUserBean"`
	VerifyInfo     []string       `thrift:"verifyInfo,3" json:"verifyInfo"`
	RequestType    int8           `thrift:"requestType,4" json:"requestType"`
	RequestTime    int64          `thrift:"requestTime,5" json:"requestTime"`
	IsResponse     int8           `thrift:"isResponse,6" json:"isResponse"`
}

func NewBuddyReqBean() *BuddyReqBean {
	return &BuddyReqBean{}
}

func (p *BuddyReqBean) GetReqVerifyboxID() int64 {
	return p.ReqVerifyboxID
}

var BuddyReqBean_ReqUserBean_DEFAULT *SmallUserBean

func (p *BuddyReqBean) GetReqUserBean() *SmallUserBean {
	if !p.IsSetReqUserBean() {
		return BuddyReqBean_ReqUserBean_DEFAULT
	}
	return p.ReqUserBean
}

func (p *BuddyReqBean) GetVerifyInfo() []string {
	return p.VerifyInfo
}

func (p *BuddyReqBean) GetRequestType() int8 {
	return p.RequestType
}

func (p *BuddyReqBean) GetRequestTime() int64 {
	return p.RequestTime
}

func (p *BuddyReqBean) GetIsResponse() int8 {
	return p.IsResponse
}
func (p *BuddyReqBean) IsSetReqUserBean() bool {
	return p.ReqUserBean != nil
}

func (p *BuddyReqBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BuddyReqBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqVerifyboxID = v
	}
	return nil
}

func (p *BuddyReqBean) readField2(iprot thrift.TProtocol) error {
	p.ReqUserBean = &SmallUserBean{}
	if err := p.ReqUserBean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReqUserBean), err)
	}
	return nil
}

func (p *BuddyReqBean) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.VerifyInfo = tSlice
	for i := 0; i < size; i++ {
		var _elem17 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem17 = v
		}
		p.VerifyInfo = append(p.VerifyInfo, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BuddyReqBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.RequestType = temp
	}
	return nil
}

func (p *BuddyReqBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RequestTime = v
	}
	return nil
}

func (p *BuddyReqBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.IsResponse = temp
	}
	return nil
}

func (p *BuddyReqBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BuddyReqBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BuddyReqBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqVerifyboxID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqVerifyboxID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReqVerifyboxID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqVerifyboxID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqVerifyboxID: ", p), err)
	}
	return err
}

func (p *BuddyReqBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqUserBean", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reqUserBean: ", p), err)
	}
	if err := p.ReqUserBean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReqUserBean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reqUserBean: ", p), err)
	}
	return err
}

func (p *BuddyReqBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("verifyInfo", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifyInfo: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VerifyInfo)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VerifyInfo {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifyInfo: ", p), err)
	}
	return err
}

func (p *BuddyReqBean) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestType", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:requestType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.RequestType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:requestType: ", p), err)
	}
	return err
}

func (p *BuddyReqBean) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:requestTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RequestTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:requestTime: ", p), err)
	}
	return err
}

func (p *BuddyReqBean) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isResponse", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isResponse: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.IsResponse)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isResponse (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isResponse: ", p), err)
	}
	return err
}

func (p *BuddyReqBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuddyReqBean(%+v)", *p)
}

// Attributes:
//  - RespVerifyboxID
//  - RespUserBean
//  - RefuseReason
//  - IsAgree
//  - ResponseTime
type BuddyRespBean struct {
	RespVerifyboxID int64          `thrift:"respVerifyboxID,1" json:"respVerifyboxID"`
	RespUserBean    *SmallUserBean `thrift:"respUserBean,2" json:"respUserBean"`
	RefuseReason    string         `thrift:"refuseReason,3" json:"refuseReason"`
	IsAgree         int8           `thrift:"isAgree,4" json:"isAgree"`
	ResponseTime    int64          `thrift:"responseTime,5" json:"responseTime"`
}

func NewBuddyRespBean() *BuddyRespBean {
	return &BuddyRespBean{}
}

func (p *BuddyRespBean) GetRespVerifyboxID() int64 {
	return p.RespVerifyboxID
}

var BuddyRespBean_RespUserBean_DEFAULT *SmallUserBean

func (p *BuddyRespBean) GetRespUserBean() *SmallUserBean {
	if !p.IsSetRespUserBean() {
		return BuddyRespBean_RespUserBean_DEFAULT
	}
	return p.RespUserBean
}

func (p *BuddyRespBean) GetRefuseReason() string {
	return p.RefuseReason
}

func (p *BuddyRespBean) GetIsAgree() int8 {
	return p.IsAgree
}

func (p *BuddyRespBean) GetResponseTime() int64 {
	return p.ResponseTime
}
func (p *BuddyRespBean) IsSetRespUserBean() bool {
	return p.RespUserBean != nil
}

func (p *BuddyRespBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BuddyRespBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RespVerifyboxID = v
	}
	return nil
}

func (p *BuddyRespBean) readField2(iprot thrift.TProtocol) error {
	p.RespUserBean = &SmallUserBean{}
	if err := p.RespUserBean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RespUserBean), err)
	}
	return nil
}

func (p *BuddyRespBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RefuseReason = v
	}
	return nil
}

func (p *BuddyRespBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.IsAgree = temp
	}
	return nil
}

func (p *BuddyRespBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ResponseTime = v
	}
	return nil
}

func (p *BuddyRespBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BuddyRespBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BuddyRespBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("respVerifyboxID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:respVerifyboxID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RespVerifyboxID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.respVerifyboxID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:respVerifyboxID: ", p), err)
	}
	return err
}

func (p *BuddyRespBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("respUserBean", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:respUserBean: ", p), err)
	}
	if err := p.RespUserBean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RespUserBean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:respUserBean: ", p), err)
	}
	return err
}

func (p *BuddyRespBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("refuseReason", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:refuseReason: ", p), err)
	}
	if err := oprot.WriteString(string(p.RefuseReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.refuseReason (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:refuseReason: ", p), err)
	}
	return err
}

func (p *BuddyRespBean) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isAgree", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isAgree: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.IsAgree)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isAgree (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isAgree: ", p), err)
	}
	return err
}

func (p *BuddyRespBean) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("responseTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:responseTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ResponseTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.responseTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:responseTime: ", p), err)
	}
	return err
}

func (p *BuddyRespBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuddyRespBean(%+v)", *p)
}

// Attributes:
//  - UserID
//  - TargetID
//  - MaxReadID
//  - MaxUnreadID
//  - SDKID
//  - MinMessageID
//  - PushMaxID
//  - CurrentMaxReadID
type MessageStorageCursor struct {
	UserID           int64  `thrift:"userID,1" json:"userID"`
	TargetID         int64  `thrift:"targetID,2" json:"targetID"`
	MaxReadID        int64  `thrift:"maxReadID,3" json:"maxReadID"`
	MaxUnreadID      int64  `thrift:"maxUnreadID,4" json:"maxUnreadID"`
	SDKID            *int64 `thrift:"SDKID,5" json:"SDKID,omitempty"`
	MinMessageID     int64  `thrift:"minMessageID,6" json:"minMessageID"`
	PushMaxID        *int64 `thrift:"pushMaxID,7" json:"pushMaxID,omitempty"`
	CurrentMaxReadID *int64 `thrift:"currentMaxReadID,8" json:"currentMaxReadID,omitempty"`
}

func NewMessageStorageCursor() *MessageStorageCursor {
	return &MessageStorageCursor{}
}

func (p *MessageStorageCursor) GetUserID() int64 {
	return p.UserID
}

func (p *MessageStorageCursor) GetTargetID() int64 {
	return p.TargetID
}

func (p *MessageStorageCursor) GetMaxReadID() int64 {
	return p.MaxReadID
}

func (p *MessageStorageCursor) GetMaxUnreadID() int64 {
	return p.MaxUnreadID
}

var MessageStorageCursor_SDKID_DEFAULT int64

func (p *MessageStorageCursor) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return MessageStorageCursor_SDKID_DEFAULT
	}
	return *p.SDKID
}

func (p *MessageStorageCursor) GetMinMessageID() int64 {
	return p.MinMessageID
}

var MessageStorageCursor_PushMaxID_DEFAULT int64

func (p *MessageStorageCursor) GetPushMaxID() int64 {
	if !p.IsSetPushMaxID() {
		return MessageStorageCursor_PushMaxID_DEFAULT
	}
	return *p.PushMaxID
}

var MessageStorageCursor_CurrentMaxReadID_DEFAULT int64

func (p *MessageStorageCursor) GetCurrentMaxReadID() int64 {
	if !p.IsSetCurrentMaxReadID() {
		return MessageStorageCursor_CurrentMaxReadID_DEFAULT
	}
	return *p.CurrentMaxReadID
}
func (p *MessageStorageCursor) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *MessageStorageCursor) IsSetPushMaxID() bool {
	return p.PushMaxID != nil
}

func (p *MessageStorageCursor) IsSetCurrentMaxReadID() bool {
	return p.CurrentMaxReadID != nil
}

func (p *MessageStorageCursor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MessageStorageCursor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *MessageStorageCursor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TargetID = v
	}
	return nil
}

func (p *MessageStorageCursor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxReadID = v
	}
	return nil
}

func (p *MessageStorageCursor) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxUnreadID = v
	}
	return nil
}

func (p *MessageStorageCursor) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *MessageStorageCursor) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MinMessageID = v
	}
	return nil
}

func (p *MessageStorageCursor) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PushMaxID = &v
	}
	return nil
}

func (p *MessageStorageCursor) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CurrentMaxReadID = &v
	}
	return nil
}

func (p *MessageStorageCursor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageStorageCursor"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MessageStorageCursor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *MessageStorageCursor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TargetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targetID: ", p), err)
	}
	return err
}

func (p *MessageStorageCursor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxReadID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxReadID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxReadID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxReadID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxReadID: ", p), err)
	}
	return err
}

func (p *MessageStorageCursor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUnreadID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUnreadID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxUnreadID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxUnreadID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUnreadID: ", p), err)
	}
	return err
}

func (p *MessageStorageCursor) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SDKID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageCursor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minMessageID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:minMessageID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MinMessageID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.minMessageID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:minMessageID: ", p), err)
	}
	return err
}

func (p *MessageStorageCursor) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPushMaxID() {
		if err := oprot.WriteFieldBegin("pushMaxID", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pushMaxID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PushMaxID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pushMaxID (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pushMaxID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageCursor) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentMaxReadID() {
		if err := oprot.WriteFieldBegin("currentMaxReadID", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:currentMaxReadID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CurrentMaxReadID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.currentMaxReadID (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:currentMaxReadID: ", p), err)
		}
	}
	return err
}

func (p *MessageStorageCursor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageStorageCursor(%+v)", *p)
}

// Attributes:
//  - MessageIDOfLate
//  - MessageList
//  - MaxReadID
//  - SDKID
type Messages struct {
	MessageIDOfLate int64                 `thrift:"messageIDOfLate,1" json:"messageIDOfLate"`
	MessageList     []*MessageStorageBean `thrift:"messageList,2" json:"messageList"`
	MaxReadID       int64                 `thrift:"maxReadID,3" json:"maxReadID"`
	SDKID           *int64                `thrift:"SDKID,4" json:"SDKID,omitempty"`
}

func NewMessages() *Messages {
	return &Messages{}
}

func (p *Messages) GetMessageIDOfLate() int64 {
	return p.MessageIDOfLate
}

func (p *Messages) GetMessageList() []*MessageStorageBean {
	return p.MessageList
}

func (p *Messages) GetMaxReadID() int64 {
	return p.MaxReadID
}

var Messages_SDKID_DEFAULT int64

func (p *Messages) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return Messages_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *Messages) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *Messages) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Messages) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MessageIDOfLate = v
	}
	return nil
}

func (p *Messages) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MessageStorageBean, 0, size)
	p.MessageList = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &MessageStorageBean{}
		if err := _elem18.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
		}
		p.MessageList = append(p.MessageList, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Messages) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxReadID = v
	}
	return nil
}

func (p *Messages) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *Messages) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Messages"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Messages) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageIDOfLate", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageIDOfLate: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MessageIDOfLate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageIDOfLate (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageIDOfLate: ", p), err)
	}
	return err
}

func (p *Messages) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MessageList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageList: ", p), err)
	}
	return err
}

func (p *Messages) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxReadID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxReadID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxReadID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxReadID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxReadID: ", p), err)
	}
	return err
}

func (p *Messages) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
		}
	}
	return err
}

func (p *Messages) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Messages(%+v)", *p)
}

// Attributes:
//  - ContactNum
//  - Name
//  - Source
//  - SDKID
type ContactBean struct {
	ContactNum string `thrift:"contactNum,1" json:"contactNum"`
	Name       string `thrift:"name,2" json:"name"`
	Source     int8   `thrift:"source,3" json:"source"`
	SDKID      *int64 `thrift:"SDKID,4" json:"SDKID,omitempty"`
}

func NewContactBean() *ContactBean {
	return &ContactBean{}
}

func (p *ContactBean) GetContactNum() string {
	return p.ContactNum
}

func (p *ContactBean) GetName() string {
	return p.Name
}

func (p *ContactBean) GetSource() int8 {
	return p.Source
}

var ContactBean_SDKID_DEFAULT int64

func (p *ContactBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return ContactBean_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *ContactBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *ContactBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ContactNum = v
	}
	return nil
}

func (p *ContactBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ContactBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Source = temp
	}
	return nil
}

func (p *ContactBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *ContactBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactNum", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contactNum: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContactNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contactNum (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contactNum: ", p), err)
	}
	return err
}

func (p *ContactBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *ContactBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Source)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err)
	}
	return err
}

func (p *ContactBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
		}
	}
	return err
}

func (p *ContactBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactBean(%+v)", *p)
}

// Attributes:
//  - Contact
//  - Sub
//  - Recommend
//  - IsBuddy
type RecommendContact struct {
	Contact   *ContactBean   `thrift:"contact,1" json:"contact"`
	Sub       *SmallUserBean `thrift:"sub,2" json:"sub"`
	Recommend *SmallUserBean `thrift:"recommend,3" json:"recommend,omitempty"`
	IsBuddy   int8           `thrift:"isBuddy,4" json:"isBuddy"`
}

func NewRecommendContact() *RecommendContact {
	return &RecommendContact{}
}

var RecommendContact_Contact_DEFAULT *ContactBean

func (p *RecommendContact) GetContact() *ContactBean {
	if !p.IsSetContact() {
		return RecommendContact_Contact_DEFAULT
	}
	return p.Contact
}

var RecommendContact_Sub_DEFAULT *SmallUserBean

func (p *RecommendContact) GetSub() *SmallUserBean {
	if !p.IsSetSub() {
		return RecommendContact_Sub_DEFAULT
	}
	return p.Sub
}

var RecommendContact_Recommend_DEFAULT *SmallUserBean

func (p *RecommendContact) GetRecommend() *SmallUserBean {
	if !p.IsSetRecommend() {
		return RecommendContact_Recommend_DEFAULT
	}
	return p.Recommend
}

func (p *RecommendContact) GetIsBuddy() int8 {
	return p.IsBuddy
}
func (p *RecommendContact) IsSetContact() bool {
	return p.Contact != nil
}

func (p *RecommendContact) IsSetSub() bool {
	return p.Sub != nil
}

func (p *RecommendContact) IsSetRecommend() bool {
	return p.Recommend != nil
}

func (p *RecommendContact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecommendContact) readField1(iprot thrift.TProtocol) error {
	p.Contact = &ContactBean{}
	if err := p.Contact.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
	}
	return nil
}

func (p *RecommendContact) readField2(iprot thrift.TProtocol) error {
	p.Sub = &SmallUserBean{}
	if err := p.Sub.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sub), err)
	}
	return nil
}

func (p *RecommendContact) readField3(iprot thrift.TProtocol) error {
	p.Recommend = &SmallUserBean{}
	if err := p.Recommend.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Recommend), err)
	}
	return nil
}

func (p *RecommendContact) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.IsBuddy = temp
	}
	return nil
}

func (p *RecommendContact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecommendContact"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecommendContact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contact: ", p), err)
	}
	if err := p.Contact.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contact: ", p), err)
	}
	return err
}

func (p *RecommendContact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sub", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sub: ", p), err)
	}
	if err := p.Sub.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sub), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sub: ", p), err)
	}
	return err
}

func (p *RecommendContact) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecommend() {
		if err := oprot.WriteFieldBegin("recommend", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommend: ", p), err)
		}
		if err := p.Recommend.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Recommend), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommend: ", p), err)
		}
	}
	return err
}

func (p *RecommendContact) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isBuddy", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isBuddy: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.IsBuddy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isBuddy (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isBuddy: ", p), err)
	}
	return err
}

func (p *RecommendContact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendContact(%+v)", *p)
}

// Attributes:
//  - Cb
//  - Tub
type AutoAttentionBean struct {
	Cb  *ContactBean  `thrift:"cb,1" json:"cb"`
	Tub *TinyUserBean `thrift:"tub,2" json:"tub"`
}

func NewAutoAttentionBean() *AutoAttentionBean {
	return &AutoAttentionBean{}
}

var AutoAttentionBean_Cb_DEFAULT *ContactBean

func (p *AutoAttentionBean) GetCb() *ContactBean {
	if !p.IsSetCb() {
		return AutoAttentionBean_Cb_DEFAULT
	}
	return p.Cb
}

var AutoAttentionBean_Tub_DEFAULT *TinyUserBean

func (p *AutoAttentionBean) GetTub() *TinyUserBean {
	if !p.IsSetTub() {
		return AutoAttentionBean_Tub_DEFAULT
	}
	return p.Tub
}
func (p *AutoAttentionBean) IsSetCb() bool {
	return p.Cb != nil
}

func (p *AutoAttentionBean) IsSetTub() bool {
	return p.Tub != nil
}

func (p *AutoAttentionBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AutoAttentionBean) readField1(iprot thrift.TProtocol) error {
	p.Cb = &ContactBean{}
	if err := p.Cb.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cb), err)
	}
	return nil
}

func (p *AutoAttentionBean) readField2(iprot thrift.TProtocol) error {
	p.Tub = &TinyUserBean{}
	if err := p.Tub.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tub), err)
	}
	return nil
}

func (p *AutoAttentionBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AutoAttentionBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AutoAttentionBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cb", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cb: ", p), err)
	}
	if err := p.Cb.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cb), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cb: ", p), err)
	}
	return err
}

func (p *AutoAttentionBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tub", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tub: ", p), err)
	}
	if err := p.Tub.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tub), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tub: ", p), err)
	}
	return err
}

func (p *AutoAttentionBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AutoAttentionBean(%+v)", *p)
}

// Attributes:
//  - Aabs
//  - PageTimestamp
//  - Recommends
//  - Timestamp
//  - SDKID
type HandledContactBean struct {
	Aabs          []*AutoAttentionBean `thrift:"aabs,1" json:"aabs,omitempty"`
	PageTimestamp map[int16]int64      `thrift:"pageTimestamp,2" json:"pageTimestamp,omitempty"`
	Recommends    []*RecommendContact  `thrift:"recommends,3" json:"recommends"`
	Timestamp     int64                `thrift:"timestamp,4" json:"timestamp"`
	SDKID         *int64               `thrift:"SDKID,5" json:"SDKID,omitempty"`
}

func NewHandledContactBean() *HandledContactBean {
	return &HandledContactBean{}
}

var HandledContactBean_Aabs_DEFAULT []*AutoAttentionBean

func (p *HandledContactBean) GetAabs() []*AutoAttentionBean {
	return p.Aabs
}

var HandledContactBean_PageTimestamp_DEFAULT map[int16]int64

func (p *HandledContactBean) GetPageTimestamp() map[int16]int64 {
	return p.PageTimestamp
}

func (p *HandledContactBean) GetRecommends() []*RecommendContact {
	return p.Recommends
}

func (p *HandledContactBean) GetTimestamp() int64 {
	return p.Timestamp
}

var HandledContactBean_SDKID_DEFAULT int64

func (p *HandledContactBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return HandledContactBean_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *HandledContactBean) IsSetAabs() bool {
	return p.Aabs != nil
}

func (p *HandledContactBean) IsSetPageTimestamp() bool {
	return p.PageTimestamp != nil
}

func (p *HandledContactBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *HandledContactBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HandledContactBean) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AutoAttentionBean, 0, size)
	p.Aabs = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &AutoAttentionBean{}
		if err := _elem19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
		}
		p.Aabs = append(p.Aabs, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HandledContactBean) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int16]int64, size)
	p.PageTimestamp = tMap
	for i := 0; i < size; i++ {
		var _key20 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key20 = v
		}
		var _val21 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val21 = v
		}
		p.PageTimestamp[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HandledContactBean) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RecommendContact, 0, size)
	p.Recommends = tSlice
	for i := 0; i < size; i++ {
		_elem22 := &RecommendContact{}
		if err := _elem22.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
		}
		p.Recommends = append(p.Recommends, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HandledContactBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HandledContactBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *HandledContactBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HandledContactBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HandledContactBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAabs() {
		if err := oprot.WriteFieldBegin("aabs", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aabs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Aabs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Aabs {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aabs: ", p), err)
		}
	}
	return err
}

func (p *HandledContactBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageTimestamp() {
		if err := oprot.WriteFieldBegin("pageTimestamp", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageTimestamp: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I16, thrift.I64, len(p.PageTimestamp)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.PageTimestamp {
			if err := oprot.WriteI16(int16(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageTimestamp: ", p), err)
		}
	}
	return err
}

func (p *HandledContactBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recommends", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommends: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Recommends)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Recommends {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommends: ", p), err)
	}
	return err
}

func (p *HandledContactBean) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *HandledContactBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SDKID: ", p), err)
		}
	}
	return err
}

func (p *HandledContactBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HandledContactBean(%+v)", *p)
}

// Attributes:
//  - GroupValueAddedAttr
//  - GroupMemberNum
type GroupValueAddedAttr struct {
	GroupValueAddedAttr *int64 `thrift:"groupValueAddedAttr,1" json:"groupValueAddedAttr,omitempty"`
	GroupMemberNum      *int32 `thrift:"groupMemberNum,2" json:"groupMemberNum,omitempty"`
}

func NewGroupValueAddedAttr() *GroupValueAddedAttr {
	return &GroupValueAddedAttr{}
}

var GroupValueAddedAttr_GroupValueAddedAttr_DEFAULT int64

func (p *GroupValueAddedAttr) GetGroupValueAddedAttr() int64 {
	if !p.IsSetGroupValueAddedAttr() {
		return GroupValueAddedAttr_GroupValueAddedAttr_DEFAULT
	}
	return *p.GroupValueAddedAttr
}

var GroupValueAddedAttr_GroupMemberNum_DEFAULT int32

func (p *GroupValueAddedAttr) GetGroupMemberNum() int32 {
	if !p.IsSetGroupMemberNum() {
		return GroupValueAddedAttr_GroupMemberNum_DEFAULT
	}
	return *p.GroupMemberNum
}
func (p *GroupValueAddedAttr) IsSetGroupValueAddedAttr() bool {
	return p.GroupValueAddedAttr != nil
}

func (p *GroupValueAddedAttr) IsSetGroupMemberNum() bool {
	return p.GroupMemberNum != nil
}

func (p *GroupValueAddedAttr) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupValueAddedAttr) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupValueAddedAttr = &v
	}
	return nil
}

func (p *GroupValueAddedAttr) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupMemberNum = &v
	}
	return nil
}

func (p *GroupValueAddedAttr) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupValueAddedAttr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupValueAddedAttr) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupValueAddedAttr() {
		if err := oprot.WriteFieldBegin("groupValueAddedAttr", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupValueAddedAttr: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupValueAddedAttr)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupValueAddedAttr (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupValueAddedAttr: ", p), err)
		}
	}
	return err
}

func (p *GroupValueAddedAttr) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupMemberNum() {
		if err := oprot.WriteFieldBegin("groupMemberNum", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMemberNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.GroupMemberNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupMemberNum (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMemberNum: ", p), err)
		}
	}
	return err
}

func (p *GroupValueAddedAttr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupValueAddedAttr(%+v)", *p)
}

// Attributes:
//  - GroupID
//  - GroupName
//  - GroupIcon
//  - GroupBulletin
//  - GroupLevel
//  - GroupMemberNum
//  - CreateUser
//  - CreateTime
//  - RelatedGroupID
//  - RelatedEnterpriseID
//  - GroupBackgroundURL
//  - ExtendProperties
//  - SDKID
//  - GroupMessageContentMode
//  - GroupBrief
//  - GroupSearch
//  - ActiveExitFlag
//  - UTOGStatus
//  - GroupType
//  - AddGroupUserID
//  - GForbidUntil
type TinyGroupInfo struct {
	GroupID                 *int64  `thrift:"groupID,1" json:"groupID,omitempty"`
	GroupName               *string `thrift:"groupName,2" json:"groupName,omitempty"`
	GroupIcon               *string `thrift:"groupIcon,3" json:"groupIcon,omitempty"`
	GroupBulletin           *string `thrift:"groupBulletin,4" json:"groupBulletin,omitempty"`
	GroupLevel              *int8   `thrift:"groupLevel,5" json:"groupLevel,omitempty"`
	GroupMemberNum          *int32  `thrift:"groupMemberNum,6" json:"groupMemberNum,omitempty"`
	CreateUser              *int64  `thrift:"createUser,7" json:"createUser,omitempty"`
	CreateTime              *int64  `thrift:"createTime,8" json:"createTime,omitempty"`
	RelatedGroupID          *int64  `thrift:"relatedGroupID,9" json:"relatedGroupID,omitempty"`
	RelatedEnterpriseID     *int64  `thrift:"relatedEnterpriseID,10" json:"relatedEnterpriseID,omitempty"`
	GroupBackgroundURL      *string `thrift:"groupBackgroundURL,11" json:"groupBackgroundURL,omitempty"`
	ExtendProperties        *string `thrift:"extendProperties,12" json:"extendProperties,omitempty"`
	SDKID                   *int64  `thrift:"SDKID,13" json:"SDKID,omitempty"`
	GroupMessageContentMode *int8   `thrift:"groupMessageContentMode,14" json:"groupMessageContentMode,omitempty"`
	GroupBrief              *string `thrift:"groupBrief,15" json:"groupBrief,omitempty"`
	GroupSearch             *int8   `thrift:"groupSearch,16" json:"groupSearch,omitempty"`
	ActiveExitFlag          *int8   `thrift:"activeExitFlag,17" json:"activeExitFlag,omitempty"`
	UTOGStatus              *int32  `thrift:"UTOGStatus,18" json:"UTOGStatus,omitempty"`
	GroupType               *string `thrift:"groupType,19" json:"groupType,omitempty"`
	AddGroupUserID          *int64  `thrift:"addGroupUserID,20" json:"addGroupUserID,omitempty"`
	GForbidUntil            *int64  `thrift:"gForbidUntil,21" json:"gForbidUntil,omitempty"`
}

func NewTinyGroupInfo() *TinyGroupInfo {
	return &TinyGroupInfo{}
}

var TinyGroupInfo_GroupID_DEFAULT int64

func (p *TinyGroupInfo) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return TinyGroupInfo_GroupID_DEFAULT
	}
	return *p.GroupID
}

var TinyGroupInfo_GroupName_DEFAULT string

func (p *TinyGroupInfo) GetGroupName() string {
	if !p.IsSetGroupName() {
		return TinyGroupInfo_GroupName_DEFAULT
	}
	return *p.GroupName
}

var TinyGroupInfo_GroupIcon_DEFAULT string

func (p *TinyGroupInfo) GetGroupIcon() string {
	if !p.IsSetGroupIcon() {
		return TinyGroupInfo_GroupIcon_DEFAULT
	}
	return *p.GroupIcon
}

var TinyGroupInfo_GroupBulletin_DEFAULT string

func (p *TinyGroupInfo) GetGroupBulletin() string {
	if !p.IsSetGroupBulletin() {
		return TinyGroupInfo_GroupBulletin_DEFAULT
	}
	return *p.GroupBulletin
}

var TinyGroupInfo_GroupLevel_DEFAULT int8

func (p *TinyGroupInfo) GetGroupLevel() int8 {
	if !p.IsSetGroupLevel() {
		return TinyGroupInfo_GroupLevel_DEFAULT
	}
	return *p.GroupLevel
}

var TinyGroupInfo_GroupMemberNum_DEFAULT int32

func (p *TinyGroupInfo) GetGroupMemberNum() int32 {
	if !p.IsSetGroupMemberNum() {
		return TinyGroupInfo_GroupMemberNum_DEFAULT
	}
	return *p.GroupMemberNum
}

var TinyGroupInfo_CreateUser_DEFAULT int64

func (p *TinyGroupInfo) GetCreateUser() int64 {
	if !p.IsSetCreateUser() {
		return TinyGroupInfo_CreateUser_DEFAULT
	}
	return *p.CreateUser
}

var TinyGroupInfo_CreateTime_DEFAULT int64

func (p *TinyGroupInfo) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return TinyGroupInfo_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TinyGroupInfo_RelatedGroupID_DEFAULT int64

func (p *TinyGroupInfo) GetRelatedGroupID() int64 {
	if !p.IsSetRelatedGroupID() {
		return TinyGroupInfo_RelatedGroupID_DEFAULT
	}
	return *p.RelatedGroupID
}

var TinyGroupInfo_RelatedEnterpriseID_DEFAULT int64

func (p *TinyGroupInfo) GetRelatedEnterpriseID() int64 {
	if !p.IsSetRelatedEnterpriseID() {
		return TinyGroupInfo_RelatedEnterpriseID_DEFAULT
	}
	return *p.RelatedEnterpriseID
}

var TinyGroupInfo_GroupBackgroundURL_DEFAULT string

func (p *TinyGroupInfo) GetGroupBackgroundURL() string {
	if !p.IsSetGroupBackgroundURL() {
		return TinyGroupInfo_GroupBackgroundURL_DEFAULT
	}
	return *p.GroupBackgroundURL
}

var TinyGroupInfo_ExtendProperties_DEFAULT string

func (p *TinyGroupInfo) GetExtendProperties() string {
	if !p.IsSetExtendProperties() {
		return TinyGroupInfo_ExtendProperties_DEFAULT
	}
	return *p.ExtendProperties
}

var TinyGroupInfo_SDKID_DEFAULT int64

func (p *TinyGroupInfo) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return TinyGroupInfo_SDKID_DEFAULT
	}
	return *p.SDKID
}

var TinyGroupInfo_GroupMessageContentMode_DEFAULT int8

func (p *TinyGroupInfo) GetGroupMessageContentMode() int8 {
	if !p.IsSetGroupMessageContentMode() {
		return TinyGroupInfo_GroupMessageContentMode_DEFAULT
	}
	return *p.GroupMessageContentMode
}

var TinyGroupInfo_GroupBrief_DEFAULT string

func (p *TinyGroupInfo) GetGroupBrief() string {
	if !p.IsSetGroupBrief() {
		return TinyGroupInfo_GroupBrief_DEFAULT
	}
	return *p.GroupBrief
}

var TinyGroupInfo_GroupSearch_DEFAULT int8

func (p *TinyGroupInfo) GetGroupSearch() int8 {
	if !p.IsSetGroupSearch() {
		return TinyGroupInfo_GroupSearch_DEFAULT
	}
	return *p.GroupSearch
}

var TinyGroupInfo_ActiveExitFlag_DEFAULT int8

func (p *TinyGroupInfo) GetActiveExitFlag() int8 {
	if !p.IsSetActiveExitFlag() {
		return TinyGroupInfo_ActiveExitFlag_DEFAULT
	}
	return *p.ActiveExitFlag
}

var TinyGroupInfo_UTOGStatus_DEFAULT int32

func (p *TinyGroupInfo) GetUTOGStatus() int32 {
	if !p.IsSetUTOGStatus() {
		return TinyGroupInfo_UTOGStatus_DEFAULT
	}
	return *p.UTOGStatus
}

var TinyGroupInfo_GroupType_DEFAULT string

func (p *TinyGroupInfo) GetGroupType() string {
	if !p.IsSetGroupType() {
		return TinyGroupInfo_GroupType_DEFAULT
	}
	return *p.GroupType
}

var TinyGroupInfo_AddGroupUserID_DEFAULT int64

func (p *TinyGroupInfo) GetAddGroupUserID() int64 {
	if !p.IsSetAddGroupUserID() {
		return TinyGroupInfo_AddGroupUserID_DEFAULT
	}
	return *p.AddGroupUserID
}

var TinyGroupInfo_GForbidUntil_DEFAULT int64

func (p *TinyGroupInfo) GetGForbidUntil() int64 {
	if !p.IsSetGForbidUntil() {
		return TinyGroupInfo_GForbidUntil_DEFAULT
	}
	return *p.GForbidUntil
}
func (p *TinyGroupInfo) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *TinyGroupInfo) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *TinyGroupInfo) IsSetGroupIcon() bool {
	return p.GroupIcon != nil
}

func (p *TinyGroupInfo) IsSetGroupBulletin() bool {
	return p.GroupBulletin != nil
}

func (p *TinyGroupInfo) IsSetGroupLevel() bool {
	return p.GroupLevel != nil
}

func (p *TinyGroupInfo) IsSetGroupMemberNum() bool {
	return p.GroupMemberNum != nil
}

func (p *TinyGroupInfo) IsSetCreateUser() bool {
	return p.CreateUser != nil
}

func (p *TinyGroupInfo) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TinyGroupInfo) IsSetRelatedGroupID() bool {
	return p.RelatedGroupID != nil
}

func (p *TinyGroupInfo) IsSetRelatedEnterpriseID() bool {
	return p.RelatedEnterpriseID != nil
}

func (p *TinyGroupInfo) IsSetGroupBackgroundURL() bool {
	return p.GroupBackgroundURL != nil
}

func (p *TinyGroupInfo) IsSetExtendProperties() bool {
	return p.ExtendProperties != nil
}

func (p *TinyGroupInfo) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *TinyGroupInfo) IsSetGroupMessageContentMode() bool {
	return p.GroupMessageContentMode != nil
}

func (p *TinyGroupInfo) IsSetGroupBrief() bool {
	return p.GroupBrief != nil
}

func (p *TinyGroupInfo) IsSetGroupSearch() bool {
	return p.GroupSearch != nil
}

func (p *TinyGroupInfo) IsSetActiveExitFlag() bool {
	return p.ActiveExitFlag != nil
}

func (p *TinyGroupInfo) IsSetUTOGStatus() bool {
	return p.UTOGStatus != nil
}

func (p *TinyGroupInfo) IsSetGroupType() bool {
	return p.GroupType != nil
}

func (p *TinyGroupInfo) IsSetAddGroupUserID() bool {
	return p.AddGroupUserID != nil
}

func (p *TinyGroupInfo) IsSetGForbidUntil() bool {
	return p.GForbidUntil != nil
}

func (p *TinyGroupInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TinyGroupInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupIcon = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GroupBulletin = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.GroupLevel = &temp
	}
	return nil
}

func (p *TinyGroupInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.GroupMemberNum = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CreateUser = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.RelatedGroupID = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.RelatedEnterpriseID = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.GroupBackgroundURL = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ExtendProperties = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := int8(v)
		p.GroupMessageContentMode = &temp
	}
	return nil
}

func (p *TinyGroupInfo) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.GroupBrief = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		temp := int8(v)
		p.GroupSearch = &temp
	}
	return nil
}

func (p *TinyGroupInfo) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := int8(v)
		p.ActiveExitFlag = &temp
	}
	return nil
}

func (p *TinyGroupInfo) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.UTOGStatus = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.GroupType = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.AddGroupUserID = &v
	}
	return nil
}

func (p *TinyGroupInfo) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.GForbidUntil = &v
	}
	return nil
}

func (p *TinyGroupInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TinyGroupInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TinyGroupInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupID: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupName: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupIcon() {
		if err := oprot.WriteFieldBegin("groupIcon", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupIcon: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupIcon)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupIcon (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupIcon: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupBulletin() {
		if err := oprot.WriteFieldBegin("groupBulletin", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groupBulletin: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupBulletin)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupBulletin (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groupBulletin: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupLevel() {
		if err := oprot.WriteFieldBegin("groupLevel", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groupLevel: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.GroupLevel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupLevel (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groupLevel: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupMemberNum() {
		if err := oprot.WriteFieldBegin("groupMemberNum", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:groupMemberNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.GroupMemberNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupMemberNum (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:groupMemberNum: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateUser() {
		if err := oprot.WriteFieldBegin("createUser", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createUser: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateUser)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createUser (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createUser: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createTime: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedGroupID() {
		if err := oprot.WriteFieldBegin("relatedGroupID", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:relatedGroupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RelatedGroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.relatedGroupID (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:relatedGroupID: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedEnterpriseID() {
		if err := oprot.WriteFieldBegin("relatedEnterpriseID", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:relatedEnterpriseID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RelatedEnterpriseID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.relatedEnterpriseID (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:relatedEnterpriseID: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupBackgroundURL() {
		if err := oprot.WriteFieldBegin("groupBackgroundURL", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:groupBackgroundURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupBackgroundURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupBackgroundURL (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:groupBackgroundURL: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtendProperties() {
		if err := oprot.WriteFieldBegin("extendProperties", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:extendProperties: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtendProperties)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extendProperties (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:extendProperties: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:SDKID: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupMessageContentMode() {
		if err := oprot.WriteFieldBegin("groupMessageContentMode", thrift.BYTE, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:groupMessageContentMode: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.GroupMessageContentMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupMessageContentMode (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:groupMessageContentMode: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupBrief() {
		if err := oprot.WriteFieldBegin("groupBrief", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:groupBrief: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupBrief)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupBrief (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:groupBrief: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupSearch() {
		if err := oprot.WriteFieldBegin("groupSearch", thrift.BYTE, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:groupSearch: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.GroupSearch)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupSearch (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:groupSearch: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveExitFlag() {
		if err := oprot.WriteFieldBegin("activeExitFlag", thrift.BYTE, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:activeExitFlag: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ActiveExitFlag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.activeExitFlag (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:activeExitFlag: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetUTOGStatus() {
		if err := oprot.WriteFieldBegin("UTOGStatus", thrift.I32, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:UTOGStatus: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UTOGStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.UTOGStatus (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:UTOGStatus: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupType() {
		if err := oprot.WriteFieldBegin("groupType", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:groupType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupType (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:groupType: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddGroupUserID() {
		if err := oprot.WriteFieldBegin("addGroupUserID", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:addGroupUserID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AddGroupUserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.addGroupUserID (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:addGroupUserID: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetGForbidUntil() {
		if err := oprot.WriteFieldBegin("gForbidUntil", thrift.I64, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:gForbidUntil: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GForbidUntil)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gForbidUntil (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:gForbidUntil: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TinyGroupInfo(%+v)", *p)
}

// Attributes:
//  - PcMsgSet
//  - PhoneMsgSet
//  - HtmlMsgSet
//  - ReceiveTimePeriod
//  - GroupMessageContentMode
//  - Vsign
type ShieldGroupMessageSet struct {
	// unused fields # 1 to 9
	PcMsgSet                *int8   `thrift:"pcMsgSet,10" json:"pcMsgSet,omitempty"`
	PhoneMsgSet             *int8   `thrift:"phoneMsgSet,11" json:"phoneMsgSet,omitempty"`
	HtmlMsgSet              *int8   `thrift:"htmlMsgSet,12" json:"htmlMsgSet,omitempty"`
	ReceiveTimePeriod       *string `thrift:"receiveTimePeriod,13" json:"receiveTimePeriod,omitempty"`
	GroupMessageContentMode *int8   `thrift:"groupMessageContentMode,14" json:"groupMessageContentMode,omitempty"`
	Vsign                   *int8   `thrift:"vsign,15" json:"vsign,omitempty"`
}

func NewShieldGroupMessageSet() *ShieldGroupMessageSet {
	return &ShieldGroupMessageSet{}
}

var ShieldGroupMessageSet_PcMsgSet_DEFAULT int8

func (p *ShieldGroupMessageSet) GetPcMsgSet() int8 {
	if !p.IsSetPcMsgSet() {
		return ShieldGroupMessageSet_PcMsgSet_DEFAULT
	}
	return *p.PcMsgSet
}

var ShieldGroupMessageSet_PhoneMsgSet_DEFAULT int8

func (p *ShieldGroupMessageSet) GetPhoneMsgSet() int8 {
	if !p.IsSetPhoneMsgSet() {
		return ShieldGroupMessageSet_PhoneMsgSet_DEFAULT
	}
	return *p.PhoneMsgSet
}

var ShieldGroupMessageSet_HtmlMsgSet_DEFAULT int8

func (p *ShieldGroupMessageSet) GetHtmlMsgSet() int8 {
	if !p.IsSetHtmlMsgSet() {
		return ShieldGroupMessageSet_HtmlMsgSet_DEFAULT
	}
	return *p.HtmlMsgSet
}

var ShieldGroupMessageSet_ReceiveTimePeriod_DEFAULT string

func (p *ShieldGroupMessageSet) GetReceiveTimePeriod() string {
	if !p.IsSetReceiveTimePeriod() {
		return ShieldGroupMessageSet_ReceiveTimePeriod_DEFAULT
	}
	return *p.ReceiveTimePeriod
}

var ShieldGroupMessageSet_GroupMessageContentMode_DEFAULT int8

func (p *ShieldGroupMessageSet) GetGroupMessageContentMode() int8 {
	if !p.IsSetGroupMessageContentMode() {
		return ShieldGroupMessageSet_GroupMessageContentMode_DEFAULT
	}
	return *p.GroupMessageContentMode
}

var ShieldGroupMessageSet_Vsign_DEFAULT int8

func (p *ShieldGroupMessageSet) GetVsign() int8 {
	if !p.IsSetVsign() {
		return ShieldGroupMessageSet_Vsign_DEFAULT
	}
	return *p.Vsign
}
func (p *ShieldGroupMessageSet) IsSetPcMsgSet() bool {
	return p.PcMsgSet != nil
}

func (p *ShieldGroupMessageSet) IsSetPhoneMsgSet() bool {
	return p.PhoneMsgSet != nil
}

func (p *ShieldGroupMessageSet) IsSetHtmlMsgSet() bool {
	return p.HtmlMsgSet != nil
}

func (p *ShieldGroupMessageSet) IsSetReceiveTimePeriod() bool {
	return p.ReceiveTimePeriod != nil
}

func (p *ShieldGroupMessageSet) IsSetGroupMessageContentMode() bool {
	return p.GroupMessageContentMode != nil
}

func (p *ShieldGroupMessageSet) IsSetVsign() bool {
	return p.Vsign != nil
}

func (p *ShieldGroupMessageSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShieldGroupMessageSet) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.PcMsgSet = &temp
	}
	return nil
}

func (p *ShieldGroupMessageSet) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.PhoneMsgSet = &temp
	}
	return nil
}

func (p *ShieldGroupMessageSet) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.HtmlMsgSet = &temp
	}
	return nil
}

func (p *ShieldGroupMessageSet) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.ReceiveTimePeriod = &v
	}
	return nil
}

func (p *ShieldGroupMessageSet) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := int8(v)
		p.GroupMessageContentMode = &temp
	}
	return nil
}

func (p *ShieldGroupMessageSet) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p.Vsign = &temp
	}
	return nil
}

func (p *ShieldGroupMessageSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShieldGroupMessageSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShieldGroupMessageSet) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPcMsgSet() {
		if err := oprot.WriteFieldBegin("pcMsgSet", thrift.BYTE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pcMsgSet: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.PcMsgSet)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pcMsgSet (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pcMsgSet: ", p), err)
		}
	}
	return err
}

func (p *ShieldGroupMessageSet) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneMsgSet() {
		if err := oprot.WriteFieldBegin("phoneMsgSet", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:phoneMsgSet: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.PhoneMsgSet)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.phoneMsgSet (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:phoneMsgSet: ", p), err)
		}
	}
	return err
}

func (p *ShieldGroupMessageSet) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetHtmlMsgSet() {
		if err := oprot.WriteFieldBegin("htmlMsgSet", thrift.BYTE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:htmlMsgSet: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.HtmlMsgSet)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.htmlMsgSet (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:htmlMsgSet: ", p), err)
		}
	}
	return err
}

func (p *ShieldGroupMessageSet) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiveTimePeriod() {
		if err := oprot.WriteFieldBegin("receiveTimePeriod", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:receiveTimePeriod: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReceiveTimePeriod)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.receiveTimePeriod (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:receiveTimePeriod: ", p), err)
		}
	}
	return err
}

func (p *ShieldGroupMessageSet) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupMessageContentMode() {
		if err := oprot.WriteFieldBegin("groupMessageContentMode", thrift.BYTE, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:groupMessageContentMode: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.GroupMessageContentMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupMessageContentMode (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:groupMessageContentMode: ", p), err)
		}
	}
	return err
}

func (p *ShieldGroupMessageSet) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetVsign() {
		if err := oprot.WriteFieldBegin("vsign", thrift.BYTE, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:vsign: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Vsign)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vsign (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:vsign: ", p), err)
		}
	}
	return err
}

func (p *ShieldGroupMessageSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShieldGroupMessageSet(%+v)", *p)
}

// Attributes:
//  - TinyGroupInfos
//  - MaxTimeStamp
//  - GroupID
//  - IsHavMark
//  - ShieldList
type UserGroupTimeStampInfo struct {
	TinyGroupInfos []*TinyGroupInfo         `thrift:"tinyGroupInfos,1" json:"tinyGroupInfos"`
	MaxTimeStamp   *int64                   `thrift:"maxTimeStamp,2" json:"maxTimeStamp,omitempty"`
	GroupID        *int64                   `thrift:"groupID,3" json:"groupID,omitempty"`
	IsHavMark      *int16                   `thrift:"isHavMark,4" json:"isHavMark,omitempty"`
	ShieldList     []*ShieldGroupMessageSet `thrift:"shieldList,5" json:"shieldList"`
}

func NewUserGroupTimeStampInfo() *UserGroupTimeStampInfo {
	return &UserGroupTimeStampInfo{}
}

func (p *UserGroupTimeStampInfo) GetTinyGroupInfos() []*TinyGroupInfo {
	return p.TinyGroupInfos
}

var UserGroupTimeStampInfo_MaxTimeStamp_DEFAULT int64

func (p *UserGroupTimeStampInfo) GetMaxTimeStamp() int64 {
	if !p.IsSetMaxTimeStamp() {
		return UserGroupTimeStampInfo_MaxTimeStamp_DEFAULT
	}
	return *p.MaxTimeStamp
}

var UserGroupTimeStampInfo_GroupID_DEFAULT int64

func (p *UserGroupTimeStampInfo) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return UserGroupTimeStampInfo_GroupID_DEFAULT
	}
	return *p.GroupID
}

var UserGroupTimeStampInfo_IsHavMark_DEFAULT int16

func (p *UserGroupTimeStampInfo) GetIsHavMark() int16 {
	if !p.IsSetIsHavMark() {
		return UserGroupTimeStampInfo_IsHavMark_DEFAULT
	}
	return *p.IsHavMark
}

func (p *UserGroupTimeStampInfo) GetShieldList() []*ShieldGroupMessageSet {
	return p.ShieldList
}
func (p *UserGroupTimeStampInfo) IsSetMaxTimeStamp() bool {
	return p.MaxTimeStamp != nil
}

func (p *UserGroupTimeStampInfo) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *UserGroupTimeStampInfo) IsSetIsHavMark() bool {
	return p.IsHavMark != nil
}

func (p *UserGroupTimeStampInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserGroupTimeStampInfo) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TinyGroupInfo, 0, size)
	p.TinyGroupInfos = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &TinyGroupInfo{}
		if err := _elem23.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
		}
		p.TinyGroupInfos = append(p.TinyGroupInfos, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserGroupTimeStampInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxTimeStamp = &v
	}
	return nil
}

func (p *UserGroupTimeStampInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *UserGroupTimeStampInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IsHavMark = &v
	}
	return nil
}

func (p *UserGroupTimeStampInfo) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ShieldGroupMessageSet, 0, size)
	p.ShieldList = tSlice
	for i := 0; i < size; i++ {
		_elem24 := &ShieldGroupMessageSet{}
		if err := _elem24.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
		}
		p.ShieldList = append(p.ShieldList, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserGroupTimeStampInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserGroupTimeStampInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserGroupTimeStampInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tinyGroupInfos", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tinyGroupInfos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TinyGroupInfos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TinyGroupInfos {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tinyGroupInfos: ", p), err)
	}
	return err
}

func (p *UserGroupTimeStampInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTimeStamp() {
		if err := oprot.WriteFieldBegin("maxTimeStamp", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxTimeStamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.MaxTimeStamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxTimeStamp (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxTimeStamp: ", p), err)
		}
	}
	return err
}

func (p *UserGroupTimeStampInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupID: ", p), err)
		}
	}
	return err
}

func (p *UserGroupTimeStampInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsHavMark() {
		if err := oprot.WriteFieldBegin("isHavMark", thrift.I16, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isHavMark: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.IsHavMark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isHavMark (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isHavMark: ", p), err)
		}
	}
	return err
}

func (p *UserGroupTimeStampInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shieldList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shieldList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ShieldList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ShieldList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shieldList: ", p), err)
	}
	return err
}

func (p *UserGroupTimeStampInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserGroupTimeStampInfo(%+v)", *p)
}

// Attributes:
//  - GroupID
//  - GroupName
//  - GroupIcon
//  - GroupType
//  - GroupBrief
//  - GroupBulletin
//  - GroupLevel
//  - GroupSearch
//  - GroupActive
//  - GroupMemberNum
//  - GroupAddedAttr
//  - CreateUser
//  - CreateTime
//  - RelatedGroupID
//  - RelatedEnterpriseID
//  - GroupBackgroundURL
//  - ServerInfo
//  - ExtendProperties
//  - SDKID
//  - GroupMessageContentMode
//  - UploadFlag
//  - ActiveExitFlag
//  - UserName
//  - SnapshotID
//  - AddGroupUserID
//  - GForbidUntil
type GroupInfo struct {
	GroupID                 *int64               `thrift:"groupID,1" json:"groupID,omitempty"`
	GroupName               *string              `thrift:"groupName,2" json:"groupName,omitempty"`
	GroupIcon               *string              `thrift:"groupIcon,3" json:"groupIcon,omitempty"`
	GroupType               *string              `thrift:"groupType,4" json:"groupType,omitempty"`
	GroupBrief              *string              `thrift:"groupBrief,5" json:"groupBrief,omitempty"`
	GroupBulletin           *string              `thrift:"groupBulletin,6" json:"groupBulletin,omitempty"`
	GroupLevel              *int8                `thrift:"groupLevel,7" json:"groupLevel,omitempty"`
	GroupSearch             *int8                `thrift:"groupSearch,8" json:"groupSearch,omitempty"`
	GroupActive             *int8                `thrift:"groupActive,9" json:"groupActive,omitempty"`
	GroupMemberNum          *int32               `thrift:"groupMemberNum,10" json:"groupMemberNum,omitempty"`
	GroupAddedAttr          *GroupValueAddedAttr `thrift:"groupAddedAttr,11" json:"groupAddedAttr,omitempty"`
	CreateUser              *int64               `thrift:"createUser,12" json:"createUser,omitempty"`
	CreateTime              *int64               `thrift:"createTime,13" json:"createTime,omitempty"`
	RelatedGroupID          *int64               `thrift:"relatedGroupID,14" json:"relatedGroupID,omitempty"`
	RelatedEnterpriseID     *int64               `thrift:"relatedEnterpriseID,15" json:"relatedEnterpriseID,omitempty"`
	GroupBackgroundURL      *string              `thrift:"groupBackgroundURL,16" json:"groupBackgroundURL,omitempty"`
	ServerInfo              *string              `thrift:"serverInfo,17" json:"serverInfo,omitempty"`
	ExtendProperties        *string              `thrift:"extendProperties,18" json:"extendProperties,omitempty"`
	SDKID                   *int64               `thrift:"SDKID,19" json:"SDKID,omitempty"`
	GroupMessageContentMode *int8                `thrift:"groupMessageContentMode,20" json:"groupMessageContentMode,omitempty"`
	UploadFlag              *int8                `thrift:"uploadFlag,21" json:"uploadFlag,omitempty"`
	ActiveExitFlag          *int8                `thrift:"activeExitFlag,22" json:"activeExitFlag,omitempty"`
	UserName                *string              `thrift:"userName,23" json:"userName,omitempty"`
	SnapshotID              *int64               `thrift:"snapshotID,24" json:"snapshotID,omitempty"`
	AddGroupUserID          *int64               `thrift:"addGroupUserID,25" json:"addGroupUserID,omitempty"`
	GForbidUntil            *int64               `thrift:"gForbidUntil,26" json:"gForbidUntil,omitempty"`
}

func NewGroupInfo() *GroupInfo {
	return &GroupInfo{}
}

var GroupInfo_GroupID_DEFAULT int64

func (p *GroupInfo) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return GroupInfo_GroupID_DEFAULT
	}
	return *p.GroupID
}

var GroupInfo_GroupName_DEFAULT string

func (p *GroupInfo) GetGroupName() string {
	if !p.IsSetGroupName() {
		return GroupInfo_GroupName_DEFAULT
	}
	return *p.GroupName
}

var GroupInfo_GroupIcon_DEFAULT string

func (p *GroupInfo) GetGroupIcon() string {
	if !p.IsSetGroupIcon() {
		return GroupInfo_GroupIcon_DEFAULT
	}
	return *p.GroupIcon
}

var GroupInfo_GroupType_DEFAULT string

func (p *GroupInfo) GetGroupType() string {
	if !p.IsSetGroupType() {
		return GroupInfo_GroupType_DEFAULT
	}
	return *p.GroupType
}

var GroupInfo_GroupBrief_DEFAULT string

func (p *GroupInfo) GetGroupBrief() string {
	if !p.IsSetGroupBrief() {
		return GroupInfo_GroupBrief_DEFAULT
	}
	return *p.GroupBrief
}

var GroupInfo_GroupBulletin_DEFAULT string

func (p *GroupInfo) GetGroupBulletin() string {
	if !p.IsSetGroupBulletin() {
		return GroupInfo_GroupBulletin_DEFAULT
	}
	return *p.GroupBulletin
}

var GroupInfo_GroupLevel_DEFAULT int8

func (p *GroupInfo) GetGroupLevel() int8 {
	if !p.IsSetGroupLevel() {
		return GroupInfo_GroupLevel_DEFAULT
	}
	return *p.GroupLevel
}

var GroupInfo_GroupSearch_DEFAULT int8

func (p *GroupInfo) GetGroupSearch() int8 {
	if !p.IsSetGroupSearch() {
		return GroupInfo_GroupSearch_DEFAULT
	}
	return *p.GroupSearch
}

var GroupInfo_GroupActive_DEFAULT int8

func (p *GroupInfo) GetGroupActive() int8 {
	if !p.IsSetGroupActive() {
		return GroupInfo_GroupActive_DEFAULT
	}
	return *p.GroupActive
}

var GroupInfo_GroupMemberNum_DEFAULT int32

func (p *GroupInfo) GetGroupMemberNum() int32 {
	if !p.IsSetGroupMemberNum() {
		return GroupInfo_GroupMemberNum_DEFAULT
	}
	return *p.GroupMemberNum
}

var GroupInfo_GroupAddedAttr_DEFAULT *GroupValueAddedAttr

func (p *GroupInfo) GetGroupAddedAttr() *GroupValueAddedAttr {
	if !p.IsSetGroupAddedAttr() {
		return GroupInfo_GroupAddedAttr_DEFAULT
	}
	return p.GroupAddedAttr
}

var GroupInfo_CreateUser_DEFAULT int64

func (p *GroupInfo) GetCreateUser() int64 {
	if !p.IsSetCreateUser() {
		return GroupInfo_CreateUser_DEFAULT
	}
	return *p.CreateUser
}

var GroupInfo_CreateTime_DEFAULT int64

func (p *GroupInfo) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return GroupInfo_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var GroupInfo_RelatedGroupID_DEFAULT int64

func (p *GroupInfo) GetRelatedGroupID() int64 {
	if !p.IsSetRelatedGroupID() {
		return GroupInfo_RelatedGroupID_DEFAULT
	}
	return *p.RelatedGroupID
}

var GroupInfo_RelatedEnterpriseID_DEFAULT int64

func (p *GroupInfo) GetRelatedEnterpriseID() int64 {
	if !p.IsSetRelatedEnterpriseID() {
		return GroupInfo_RelatedEnterpriseID_DEFAULT
	}
	return *p.RelatedEnterpriseID
}

var GroupInfo_GroupBackgroundURL_DEFAULT string

func (p *GroupInfo) GetGroupBackgroundURL() string {
	if !p.IsSetGroupBackgroundURL() {
		return GroupInfo_GroupBackgroundURL_DEFAULT
	}
	return *p.GroupBackgroundURL
}

var GroupInfo_ServerInfo_DEFAULT string

func (p *GroupInfo) GetServerInfo() string {
	if !p.IsSetServerInfo() {
		return GroupInfo_ServerInfo_DEFAULT
	}
	return *p.ServerInfo
}

var GroupInfo_ExtendProperties_DEFAULT string

func (p *GroupInfo) GetExtendProperties() string {
	if !p.IsSetExtendProperties() {
		return GroupInfo_ExtendProperties_DEFAULT
	}
	return *p.ExtendProperties
}

var GroupInfo_SDKID_DEFAULT int64

func (p *GroupInfo) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return GroupInfo_SDKID_DEFAULT
	}
	return *p.SDKID
}

var GroupInfo_GroupMessageContentMode_DEFAULT int8

func (p *GroupInfo) GetGroupMessageContentMode() int8 {
	if !p.IsSetGroupMessageContentMode() {
		return GroupInfo_GroupMessageContentMode_DEFAULT
	}
	return *p.GroupMessageContentMode
}

var GroupInfo_UploadFlag_DEFAULT int8

func (p *GroupInfo) GetUploadFlag() int8 {
	if !p.IsSetUploadFlag() {
		return GroupInfo_UploadFlag_DEFAULT
	}
	return *p.UploadFlag
}

var GroupInfo_ActiveExitFlag_DEFAULT int8

func (p *GroupInfo) GetActiveExitFlag() int8 {
	if !p.IsSetActiveExitFlag() {
		return GroupInfo_ActiveExitFlag_DEFAULT
	}
	return *p.ActiveExitFlag
}

var GroupInfo_UserName_DEFAULT string

func (p *GroupInfo) GetUserName() string {
	if !p.IsSetUserName() {
		return GroupInfo_UserName_DEFAULT
	}
	return *p.UserName
}

var GroupInfo_SnapshotID_DEFAULT int64

func (p *GroupInfo) GetSnapshotID() int64 {
	if !p.IsSetSnapshotID() {
		return GroupInfo_SnapshotID_DEFAULT
	}
	return *p.SnapshotID
}

var GroupInfo_AddGroupUserID_DEFAULT int64

func (p *GroupInfo) GetAddGroupUserID() int64 {
	if !p.IsSetAddGroupUserID() {
		return GroupInfo_AddGroupUserID_DEFAULT
	}
	return *p.AddGroupUserID
}

var GroupInfo_GForbidUntil_DEFAULT int64

func (p *GroupInfo) GetGForbidUntil() int64 {
	if !p.IsSetGForbidUntil() {
		return GroupInfo_GForbidUntil_DEFAULT
	}
	return *p.GForbidUntil
}
func (p *GroupInfo) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *GroupInfo) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *GroupInfo) IsSetGroupIcon() bool {
	return p.GroupIcon != nil
}

func (p *GroupInfo) IsSetGroupType() bool {
	return p.GroupType != nil
}

func (p *GroupInfo) IsSetGroupBrief() bool {
	return p.GroupBrief != nil
}

func (p *GroupInfo) IsSetGroupBulletin() bool {
	return p.GroupBulletin != nil
}

func (p *GroupInfo) IsSetGroupLevel() bool {
	return p.GroupLevel != nil
}

func (p *GroupInfo) IsSetGroupSearch() bool {
	return p.GroupSearch != nil
}

func (p *GroupInfo) IsSetGroupActive() bool {
	return p.GroupActive != nil
}

func (p *GroupInfo) IsSetGroupMemberNum() bool {
	return p.GroupMemberNum != nil
}

func (p *GroupInfo) IsSetGroupAddedAttr() bool {
	return p.GroupAddedAttr != nil
}

func (p *GroupInfo) IsSetCreateUser() bool {
	return p.CreateUser != nil
}

func (p *GroupInfo) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *GroupInfo) IsSetRelatedGroupID() bool {
	return p.RelatedGroupID != nil
}

func (p *GroupInfo) IsSetRelatedEnterpriseID() bool {
	return p.RelatedEnterpriseID != nil
}

func (p *GroupInfo) IsSetGroupBackgroundURL() bool {
	return p.GroupBackgroundURL != nil
}

func (p *GroupInfo) IsSetServerInfo() bool {
	return p.ServerInfo != nil
}

func (p *GroupInfo) IsSetExtendProperties() bool {
	return p.ExtendProperties != nil
}

func (p *GroupInfo) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *GroupInfo) IsSetGroupMessageContentMode() bool {
	return p.GroupMessageContentMode != nil
}

func (p *GroupInfo) IsSetUploadFlag() bool {
	return p.UploadFlag != nil
}

func (p *GroupInfo) IsSetActiveExitFlag() bool {
	return p.ActiveExitFlag != nil
}

func (p *GroupInfo) IsSetUserName() bool {
	return p.UserName != nil
}

func (p *GroupInfo) IsSetSnapshotID() bool {
	return p.SnapshotID != nil
}

func (p *GroupInfo) IsSetAddGroupUserID() bool {
	return p.AddGroupUserID != nil
}

func (p *GroupInfo) IsSetGForbidUntil() bool {
	return p.GForbidUntil != nil
}

func (p *GroupInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *GroupInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *GroupInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupIcon = &v
	}
	return nil
}

func (p *GroupInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GroupType = &v
	}
	return nil
}

func (p *GroupInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.GroupBrief = &v
	}
	return nil
}

func (p *GroupInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.GroupBulletin = &v
	}
	return nil
}

func (p *GroupInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.GroupLevel = &temp
	}
	return nil
}

func (p *GroupInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.GroupSearch = &temp
	}
	return nil
}

func (p *GroupInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.GroupActive = &temp
	}
	return nil
}

func (p *GroupInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.GroupMemberNum = &v
	}
	return nil
}

func (p *GroupInfo) readField11(iprot thrift.TProtocol) error {
	p.GroupAddedAttr = &GroupValueAddedAttr{}
	if err := p.GroupAddedAttr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupAddedAttr), err)
	}
	return nil
}

func (p *GroupInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.CreateUser = &v
	}
	return nil
}

func (p *GroupInfo) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *GroupInfo) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.RelatedGroupID = &v
	}
	return nil
}

func (p *GroupInfo) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.RelatedEnterpriseID = &v
	}
	return nil
}

func (p *GroupInfo) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.GroupBackgroundURL = &v
	}
	return nil
}

func (p *GroupInfo) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.ServerInfo = &v
	}
	return nil
}

func (p *GroupInfo) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.ExtendProperties = &v
	}
	return nil
}

func (p *GroupInfo) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *GroupInfo) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := int8(v)
		p.GroupMessageContentMode = &temp
	}
	return nil
}

func (p *GroupInfo) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		temp := int8(v)
		p.UploadFlag = &temp
	}
	return nil
}

func (p *GroupInfo) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := int8(v)
		p.ActiveExitFlag = &temp
	}
	return nil
}

func (p *GroupInfo) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.UserName = &v
	}
	return nil
}

func (p *GroupInfo) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.SnapshotID = &v
	}
	return nil
}

func (p *GroupInfo) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.AddGroupUserID = &v
	}
	return nil
}

func (p *GroupInfo) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.GForbidUntil = &v
	}
	return nil
}

func (p *GroupInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupID: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupName: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupIcon() {
		if err := oprot.WriteFieldBegin("groupIcon", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupIcon: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupIcon)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupIcon (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupIcon: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupType() {
		if err := oprot.WriteFieldBegin("groupType", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groupType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupType (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groupType: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupBrief() {
		if err := oprot.WriteFieldBegin("groupBrief", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groupBrief: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupBrief)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupBrief (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groupBrief: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupBulletin() {
		if err := oprot.WriteFieldBegin("groupBulletin", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:groupBulletin: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupBulletin)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupBulletin (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:groupBulletin: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupLevel() {
		if err := oprot.WriteFieldBegin("groupLevel", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:groupLevel: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.GroupLevel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupLevel (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:groupLevel: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupSearch() {
		if err := oprot.WriteFieldBegin("groupSearch", thrift.BYTE, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:groupSearch: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.GroupSearch)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupSearch (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:groupSearch: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupActive() {
		if err := oprot.WriteFieldBegin("groupActive", thrift.BYTE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:groupActive: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.GroupActive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupActive (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:groupActive: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupMemberNum() {
		if err := oprot.WriteFieldBegin("groupMemberNum", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:groupMemberNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.GroupMemberNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupMemberNum (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:groupMemberNum: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupAddedAttr() {
		if err := oprot.WriteFieldBegin("groupAddedAttr", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:groupAddedAttr: ", p), err)
		}
		if err := p.GroupAddedAttr.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupAddedAttr), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:groupAddedAttr: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateUser() {
		if err := oprot.WriteFieldBegin("createUser", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:createUser: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateUser)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createUser (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:createUser: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:createTime: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedGroupID() {
		if err := oprot.WriteFieldBegin("relatedGroupID", thrift.I64, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:relatedGroupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RelatedGroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.relatedGroupID (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:relatedGroupID: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetRelatedEnterpriseID() {
		if err := oprot.WriteFieldBegin("relatedEnterpriseID", thrift.I64, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:relatedEnterpriseID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RelatedEnterpriseID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.relatedEnterpriseID (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:relatedEnterpriseID: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupBackgroundURL() {
		if err := oprot.WriteFieldBegin("groupBackgroundURL", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:groupBackgroundURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupBackgroundURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupBackgroundURL (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:groupBackgroundURL: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetServerInfo() {
		if err := oprot.WriteFieldBegin("serverInfo", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:serverInfo: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServerInfo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serverInfo (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:serverInfo: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtendProperties() {
		if err := oprot.WriteFieldBegin("extendProperties", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:extendProperties: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtendProperties)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extendProperties (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:extendProperties: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:SDKID: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupMessageContentMode() {
		if err := oprot.WriteFieldBegin("groupMessageContentMode", thrift.BYTE, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:groupMessageContentMode: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.GroupMessageContentMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupMessageContentMode (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:groupMessageContentMode: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadFlag() {
		if err := oprot.WriteFieldBegin("uploadFlag", thrift.BYTE, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:uploadFlag: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.UploadFlag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploadFlag (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:uploadFlag: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveExitFlag() {
		if err := oprot.WriteFieldBegin("activeExitFlag", thrift.BYTE, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:activeExitFlag: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ActiveExitFlag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.activeExitFlag (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:activeExitFlag: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserName() {
		if err := oprot.WriteFieldBegin("userName", thrift.STRING, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:userName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UserName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userName (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:userName: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotID() {
		if err := oprot.WriteFieldBegin("snapshotID", thrift.I64, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:snapshotID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SnapshotID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotID (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:snapshotID: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddGroupUserID() {
		if err := oprot.WriteFieldBegin("addGroupUserID", thrift.I64, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:addGroupUserID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AddGroupUserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.addGroupUserID (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:addGroupUserID: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetGForbidUntil() {
		if err := oprot.WriteFieldBegin("gForbidUntil", thrift.I64, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:gForbidUntil: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GForbidUntil)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gForbidUntil (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:gForbidUntil: ", p), err)
		}
	}
	return err
}

func (p *GroupInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupInfo(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ReqUserID
//  - GroupID
//  - VerifyInfo
//  - ReqType
//  - ReqTime
//  - Status
//  - InviteUsers
//  - GroupInfo
//  - UserBean
//  - SDKID
type GroupRequest struct {
	ReqID       *int64         `thrift:"reqID,1" json:"reqID,omitempty"`
	ReqUserID   int64          `thrift:"reqUserID,2" json:"reqUserID"`
	GroupID     int64          `thrift:"groupID,3" json:"groupID"`
	VerifyInfo  *string        `thrift:"verifyInfo,4" json:"verifyInfo,omitempty"`
	ReqType     int8           `thrift:"reqType,5" json:"reqType"`
	ReqTime     *int64         `thrift:"reqTime,6" json:"reqTime,omitempty"`
	Status      *int8          `thrift:"status,7" json:"status,omitempty"`
	InviteUsers []int64        `thrift:"inviteUsers,8" json:"inviteUsers,omitempty"`
	GroupInfo   *GroupInfo     `thrift:"groupInfo,9" json:"groupInfo,omitempty"`
	UserBean    *SmallUserBean `thrift:"userBean,10" json:"userBean,omitempty"`
	SDKID       *int64         `thrift:"SDKID,11" json:"SDKID,omitempty"`
}

func NewGroupRequest() *GroupRequest {
	return &GroupRequest{}
}

var GroupRequest_ReqID_DEFAULT int64

func (p *GroupRequest) GetReqID() int64 {
	if !p.IsSetReqID() {
		return GroupRequest_ReqID_DEFAULT
	}
	return *p.ReqID
}

func (p *GroupRequest) GetReqUserID() int64 {
	return p.ReqUserID
}

func (p *GroupRequest) GetGroupID() int64 {
	return p.GroupID
}

var GroupRequest_VerifyInfo_DEFAULT string

func (p *GroupRequest) GetVerifyInfo() string {
	if !p.IsSetVerifyInfo() {
		return GroupRequest_VerifyInfo_DEFAULT
	}
	return *p.VerifyInfo
}

func (p *GroupRequest) GetReqType() int8 {
	return p.ReqType
}

var GroupRequest_ReqTime_DEFAULT int64

func (p *GroupRequest) GetReqTime() int64 {
	if !p.IsSetReqTime() {
		return GroupRequest_ReqTime_DEFAULT
	}
	return *p.ReqTime
}

var GroupRequest_Status_DEFAULT int8

func (p *GroupRequest) GetStatus() int8 {
	if !p.IsSetStatus() {
		return GroupRequest_Status_DEFAULT
	}
	return *p.Status
}

var GroupRequest_InviteUsers_DEFAULT []int64

func (p *GroupRequest) GetInviteUsers() []int64 {
	return p.InviteUsers
}

var GroupRequest_GroupInfo_DEFAULT *GroupInfo

func (p *GroupRequest) GetGroupInfo() *GroupInfo {
	if !p.IsSetGroupInfo() {
		return GroupRequest_GroupInfo_DEFAULT
	}
	return p.GroupInfo
}

var GroupRequest_UserBean_DEFAULT *SmallUserBean

func (p *GroupRequest) GetUserBean() *SmallUserBean {
	if !p.IsSetUserBean() {
		return GroupRequest_UserBean_DEFAULT
	}
	return p.UserBean
}

var GroupRequest_SDKID_DEFAULT int64

func (p *GroupRequest) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return GroupRequest_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *GroupRequest) IsSetReqID() bool {
	return p.ReqID != nil
}

func (p *GroupRequest) IsSetVerifyInfo() bool {
	return p.VerifyInfo != nil
}

func (p *GroupRequest) IsSetReqTime() bool {
	return p.ReqTime != nil
}

func (p *GroupRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GroupRequest) IsSetInviteUsers() bool {
	return p.InviteUsers != nil
}

func (p *GroupRequest) IsSetGroupInfo() bool {
	return p.GroupInfo != nil
}

func (p *GroupRequest) IsSetUserBean() bool {
	return p.UserBean != nil
}

func (p *GroupRequest) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *GroupRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqID = &v
	}
	return nil
}

func (p *GroupRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReqUserID = v
	}
	return nil
}

func (p *GroupRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupID = v
	}
	return nil
}

func (p *GroupRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.VerifyInfo = &v
	}
	return nil
}

func (p *GroupRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.ReqType = temp
	}
	return nil
}

func (p *GroupRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ReqTime = &v
	}
	return nil
}

func (p *GroupRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *GroupRequest) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.InviteUsers = tSlice
	for i := 0; i < size; i++ {
		var _elem25 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem25 = v
		}
		p.InviteUsers = append(p.InviteUsers, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupRequest) readField9(iprot thrift.TProtocol) error {
	p.GroupInfo = &GroupInfo{}
	if err := p.GroupInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupInfo), err)
	}
	return nil
}

func (p *GroupRequest) readField10(iprot thrift.TProtocol) error {
	p.UserBean = &SmallUserBean{}
	if err := p.UserBean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserBean), err)
	}
	return nil
}

func (p *GroupRequest) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *GroupRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqID() {
		if err := oprot.WriteFieldBegin("reqID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReqID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqID: ", p), err)
		}
	}
	return err
}

func (p *GroupRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqUserID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reqUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReqUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqUserID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reqUserID: ", p), err)
	}
	return err
}

func (p *GroupRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupID: ", p), err)
	}
	return err
}

func (p *GroupRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVerifyInfo() {
		if err := oprot.WriteFieldBegin("verifyInfo", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:verifyInfo: ", p), err)
		}
		if err := oprot.WriteString(string(*p.VerifyInfo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.verifyInfo (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:verifyInfo: ", p), err)
		}
	}
	return err
}

func (p *GroupRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqType", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:reqType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.ReqType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:reqType: ", p), err)
	}
	return err
}

func (p *GroupRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqTime() {
		if err := oprot.WriteFieldBegin("reqTime", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:reqTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReqTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqTime (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:reqTime: ", p), err)
		}
	}
	return err
}

func (p *GroupRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err)
		}
	}
	return err
}

func (p *GroupRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteUsers() {
		if err := oprot.WriteFieldBegin("inviteUsers", thrift.LIST, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:inviteUsers: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.InviteUsers)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InviteUsers {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:inviteUsers: ", p), err)
		}
	}
	return err
}

func (p *GroupRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupInfo() {
		if err := oprot.WriteFieldBegin("groupInfo", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:groupInfo: ", p), err)
		}
		if err := p.GroupInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:groupInfo: ", p), err)
		}
	}
	return err
}

func (p *GroupRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserBean() {
		if err := oprot.WriteFieldBegin("userBean", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:userBean: ", p), err)
		}
		if err := p.UserBean.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserBean), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:userBean: ", p), err)
		}
	}
	return err
}

func (p *GroupRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:SDKID: ", p), err)
		}
	}
	return err
}

func (p *GroupRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupRequest(%+v)", *p)
}

// Attributes:
//  - VerifyType
//  - IsAllow
//  - SDKID
type GroupSet struct {
	VerifyType *int8  `thrift:"verifyType,1" json:"verifyType,omitempty"`
	IsAllow    *int8  `thrift:"isAllow,2" json:"isAllow,omitempty"`
	SDKID      *int64 `thrift:"SDKID,3" json:"SDKID,omitempty"`
}

func NewGroupSet() *GroupSet {
	return &GroupSet{}
}

var GroupSet_VerifyType_DEFAULT int8

func (p *GroupSet) GetVerifyType() int8 {
	if !p.IsSetVerifyType() {
		return GroupSet_VerifyType_DEFAULT
	}
	return *p.VerifyType
}

var GroupSet_IsAllow_DEFAULT int8

func (p *GroupSet) GetIsAllow() int8 {
	if !p.IsSetIsAllow() {
		return GroupSet_IsAllow_DEFAULT
	}
	return *p.IsAllow
}

var GroupSet_SDKID_DEFAULT int64

func (p *GroupSet) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return GroupSet_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *GroupSet) IsSetVerifyType() bool {
	return p.VerifyType != nil
}

func (p *GroupSet) IsSetIsAllow() bool {
	return p.IsAllow != nil
}

func (p *GroupSet) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *GroupSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupSet) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.VerifyType = &temp
	}
	return nil
}

func (p *GroupSet) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.IsAllow = &temp
	}
	return nil
}

func (p *GroupSet) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *GroupSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupSet"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupSet) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVerifyType() {
		if err := oprot.WriteFieldBegin("verifyType", thrift.BYTE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verifyType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.VerifyType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.verifyType (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verifyType: ", p), err)
		}
	}
	return err
}

func (p *GroupSet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAllow() {
		if err := oprot.WriteFieldBegin("isAllow", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isAllow: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.IsAllow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isAllow (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isAllow: ", p), err)
		}
	}
	return err
}

func (p *GroupSet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SDKID: ", p), err)
		}
	}
	return err
}

func (p *GroupSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupSet(%+v)", *p)
}

// Attributes:
//  - RespID
//  - ReqUserID
//  - GroupID
//  - RespUserID
//  - RespResult_
//  - RefuseReason
//  - RespTime
//  - RespType
//  - GroupInfo
//  - UserBean
//  - SDKID
type GroupResponse struct {
	RespID       *int64         `thrift:"respID,1" json:"respID,omitempty"`
	ReqUserID    int64          `thrift:"reqUserID,2" json:"reqUserID"`
	GroupID      *int64         `thrift:"groupID,3" json:"groupID,omitempty"`
	RespUserID   *int64         `thrift:"respUserID,4" json:"respUserID,omitempty"`
	RespResult_  int8           `thrift:"respResult,5" json:"respResult"`
	RefuseReason *string        `thrift:"refuseReason,6" json:"refuseReason,omitempty"`
	RespTime     *int64         `thrift:"respTime,7" json:"respTime,omitempty"`
	RespType     int8           `thrift:"respType,8" json:"respType"`
	GroupInfo    *GroupInfo     `thrift:"groupInfo,9" json:"groupInfo,omitempty"`
	UserBean     *SmallUserBean `thrift:"userBean,10" json:"userBean,omitempty"`
	SDKID        *int64         `thrift:"SDKID,11" json:"SDKID,omitempty"`
}

func NewGroupResponse() *GroupResponse {
	return &GroupResponse{}
}

var GroupResponse_RespID_DEFAULT int64

func (p *GroupResponse) GetRespID() int64 {
	if !p.IsSetRespID() {
		return GroupResponse_RespID_DEFAULT
	}
	return *p.RespID
}

func (p *GroupResponse) GetReqUserID() int64 {
	return p.ReqUserID
}

var GroupResponse_GroupID_DEFAULT int64

func (p *GroupResponse) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return GroupResponse_GroupID_DEFAULT
	}
	return *p.GroupID
}

var GroupResponse_RespUserID_DEFAULT int64

func (p *GroupResponse) GetRespUserID() int64 {
	if !p.IsSetRespUserID() {
		return GroupResponse_RespUserID_DEFAULT
	}
	return *p.RespUserID
}

func (p *GroupResponse) GetRespResult_() int8 {
	return p.RespResult_
}

var GroupResponse_RefuseReason_DEFAULT string

func (p *GroupResponse) GetRefuseReason() string {
	if !p.IsSetRefuseReason() {
		return GroupResponse_RefuseReason_DEFAULT
	}
	return *p.RefuseReason
}

var GroupResponse_RespTime_DEFAULT int64

func (p *GroupResponse) GetRespTime() int64 {
	if !p.IsSetRespTime() {
		return GroupResponse_RespTime_DEFAULT
	}
	return *p.RespTime
}

func (p *GroupResponse) GetRespType() int8 {
	return p.RespType
}

var GroupResponse_GroupInfo_DEFAULT *GroupInfo

func (p *GroupResponse) GetGroupInfo() *GroupInfo {
	if !p.IsSetGroupInfo() {
		return GroupResponse_GroupInfo_DEFAULT
	}
	return p.GroupInfo
}

var GroupResponse_UserBean_DEFAULT *SmallUserBean

func (p *GroupResponse) GetUserBean() *SmallUserBean {
	if !p.IsSetUserBean() {
		return GroupResponse_UserBean_DEFAULT
	}
	return p.UserBean
}

var GroupResponse_SDKID_DEFAULT int64

func (p *GroupResponse) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return GroupResponse_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *GroupResponse) IsSetRespID() bool {
	return p.RespID != nil
}

func (p *GroupResponse) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *GroupResponse) IsSetRespUserID() bool {
	return p.RespUserID != nil
}

func (p *GroupResponse) IsSetRefuseReason() bool {
	return p.RefuseReason != nil
}

func (p *GroupResponse) IsSetRespTime() bool {
	return p.RespTime != nil
}

func (p *GroupResponse) IsSetGroupInfo() bool {
	return p.GroupInfo != nil
}

func (p *GroupResponse) IsSetUserBean() bool {
	return p.UserBean != nil
}

func (p *GroupResponse) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *GroupResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RespID = &v
	}
	return nil
}

func (p *GroupResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReqUserID = v
	}
	return nil
}

func (p *GroupResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *GroupResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RespUserID = &v
	}
	return nil
}

func (p *GroupResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.RespResult_ = temp
	}
	return nil
}

func (p *GroupResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RefuseReason = &v
	}
	return nil
}

func (p *GroupResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.RespTime = &v
	}
	return nil
}

func (p *GroupResponse) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.RespType = temp
	}
	return nil
}

func (p *GroupResponse) readField9(iprot thrift.TProtocol) error {
	p.GroupInfo = &GroupInfo{}
	if err := p.GroupInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupInfo), err)
	}
	return nil
}

func (p *GroupResponse) readField10(iprot thrift.TProtocol) error {
	p.UserBean = &SmallUserBean{}
	if err := p.UserBean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserBean), err)
	}
	return nil
}

func (p *GroupResponse) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *GroupResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRespID() {
		if err := oprot.WriteFieldBegin("respID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:respID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RespID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.respID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:respID: ", p), err)
		}
	}
	return err
}

func (p *GroupResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqUserID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reqUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReqUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqUserID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reqUserID: ", p), err)
	}
	return err
}

func (p *GroupResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupID: ", p), err)
		}
	}
	return err
}

func (p *GroupResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRespUserID() {
		if err := oprot.WriteFieldBegin("respUserID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:respUserID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RespUserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.respUserID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:respUserID: ", p), err)
		}
	}
	return err
}

func (p *GroupResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("respResult", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:respResult: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.RespResult_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.respResult (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:respResult: ", p), err)
	}
	return err
}

func (p *GroupResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRefuseReason() {
		if err := oprot.WriteFieldBegin("refuseReason", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:refuseReason: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RefuseReason)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.refuseReason (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:refuseReason: ", p), err)
		}
	}
	return err
}

func (p *GroupResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRespTime() {
		if err := oprot.WriteFieldBegin("respTime", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:respTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RespTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.respTime (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:respTime: ", p), err)
		}
	}
	return err
}

func (p *GroupResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("respType", thrift.BYTE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:respType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.RespType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.respType (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:respType: ", p), err)
	}
	return err
}

func (p *GroupResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupInfo() {
		if err := oprot.WriteFieldBegin("groupInfo", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:groupInfo: ", p), err)
		}
		if err := p.GroupInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:groupInfo: ", p), err)
		}
	}
	return err
}

func (p *GroupResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserBean() {
		if err := oprot.WriteFieldBegin("userBean", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:userBean: ", p), err)
		}
		if err := p.UserBean.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserBean), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:userBean: ", p), err)
		}
	}
	return err
}

func (p *GroupResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:SDKID: ", p), err)
		}
	}
	return err
}

func (p *GroupResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupResponse(%+v)", *p)
}

// Attributes:
//  - UserID
//  - UserName
//  - UserType
//  - Avatar
//  - SDKID
//  - VSign
//  - Remark
//  - UserTypeNum
//  - UserSex
//  - Extend
//  - GroupMemberName
//  - UForbidUntil
type TinyGroupMemberInfo struct {
	UserID          *int64  `thrift:"userID,1" json:"userID,omitempty"`
	UserName        *string `thrift:"userName,2" json:"userName,omitempty"`
	UserType        *int8   `thrift:"userType,3" json:"userType,omitempty"`
	Avatar          *string `thrift:"avatar,4" json:"avatar,omitempty"`
	SDKID           *int64  `thrift:"SDKID,5" json:"SDKID,omitempty"`
	VSign           *int8   `thrift:"vSign,6" json:"vSign,omitempty"`
	Remark          *string `thrift:"remark,7" json:"remark,omitempty"`
	UserTypeNum     *int16  `thrift:"userTypeNum,8" json:"userTypeNum,omitempty"`
	UserSex         *int8   `thrift:"userSex,9" json:"userSex,omitempty"`
	Extend          *string `thrift:"extend,10" json:"extend,omitempty"`
	GroupMemberName *string `thrift:"groupMemberName,11" json:"groupMemberName,omitempty"`
	UForbidUntil    *int64  `thrift:"uForbidUntil,12" json:"uForbidUntil,omitempty"`
}

func NewTinyGroupMemberInfo() *TinyGroupMemberInfo {
	return &TinyGroupMemberInfo{}
}

var TinyGroupMemberInfo_UserID_DEFAULT int64

func (p *TinyGroupMemberInfo) GetUserID() int64 {
	if !p.IsSetUserID() {
		return TinyGroupMemberInfo_UserID_DEFAULT
	}
	return *p.UserID
}

var TinyGroupMemberInfo_UserName_DEFAULT string

func (p *TinyGroupMemberInfo) GetUserName() string {
	if !p.IsSetUserName() {
		return TinyGroupMemberInfo_UserName_DEFAULT
	}
	return *p.UserName
}

var TinyGroupMemberInfo_UserType_DEFAULT int8

func (p *TinyGroupMemberInfo) GetUserType() int8 {
	if !p.IsSetUserType() {
		return TinyGroupMemberInfo_UserType_DEFAULT
	}
	return *p.UserType
}

var TinyGroupMemberInfo_Avatar_DEFAULT string

func (p *TinyGroupMemberInfo) GetAvatar() string {
	if !p.IsSetAvatar() {
		return TinyGroupMemberInfo_Avatar_DEFAULT
	}
	return *p.Avatar
}

var TinyGroupMemberInfo_SDKID_DEFAULT int64

func (p *TinyGroupMemberInfo) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return TinyGroupMemberInfo_SDKID_DEFAULT
	}
	return *p.SDKID
}

var TinyGroupMemberInfo_VSign_DEFAULT int8

func (p *TinyGroupMemberInfo) GetVSign() int8 {
	if !p.IsSetVSign() {
		return TinyGroupMemberInfo_VSign_DEFAULT
	}
	return *p.VSign
}

var TinyGroupMemberInfo_Remark_DEFAULT string

func (p *TinyGroupMemberInfo) GetRemark() string {
	if !p.IsSetRemark() {
		return TinyGroupMemberInfo_Remark_DEFAULT
	}
	return *p.Remark
}

var TinyGroupMemberInfo_UserTypeNum_DEFAULT int16

func (p *TinyGroupMemberInfo) GetUserTypeNum() int16 {
	if !p.IsSetUserTypeNum() {
		return TinyGroupMemberInfo_UserTypeNum_DEFAULT
	}
	return *p.UserTypeNum
}

var TinyGroupMemberInfo_UserSex_DEFAULT int8

func (p *TinyGroupMemberInfo) GetUserSex() int8 {
	if !p.IsSetUserSex() {
		return TinyGroupMemberInfo_UserSex_DEFAULT
	}
	return *p.UserSex
}

var TinyGroupMemberInfo_Extend_DEFAULT string

func (p *TinyGroupMemberInfo) GetExtend() string {
	if !p.IsSetExtend() {
		return TinyGroupMemberInfo_Extend_DEFAULT
	}
	return *p.Extend
}

var TinyGroupMemberInfo_GroupMemberName_DEFAULT string

func (p *TinyGroupMemberInfo) GetGroupMemberName() string {
	if !p.IsSetGroupMemberName() {
		return TinyGroupMemberInfo_GroupMemberName_DEFAULT
	}
	return *p.GroupMemberName
}

var TinyGroupMemberInfo_UForbidUntil_DEFAULT int64

func (p *TinyGroupMemberInfo) GetUForbidUntil() int64 {
	if !p.IsSetUForbidUntil() {
		return TinyGroupMemberInfo_UForbidUntil_DEFAULT
	}
	return *p.UForbidUntil
}
func (p *TinyGroupMemberInfo) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *TinyGroupMemberInfo) IsSetUserName() bool {
	return p.UserName != nil
}

func (p *TinyGroupMemberInfo) IsSetUserType() bool {
	return p.UserType != nil
}

func (p *TinyGroupMemberInfo) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *TinyGroupMemberInfo) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *TinyGroupMemberInfo) IsSetVSign() bool {
	return p.VSign != nil
}

func (p *TinyGroupMemberInfo) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *TinyGroupMemberInfo) IsSetUserTypeNum() bool {
	return p.UserTypeNum != nil
}

func (p *TinyGroupMemberInfo) IsSetUserSex() bool {
	return p.UserSex != nil
}

func (p *TinyGroupMemberInfo) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *TinyGroupMemberInfo) IsSetGroupMemberName() bool {
	return p.GroupMemberName != nil
}

func (p *TinyGroupMemberInfo) IsSetUForbidUntil() bool {
	return p.UForbidUntil != nil
}

func (p *TinyGroupMemberInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserName = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.UserType = &temp
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.VSign = &temp
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Remark = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UserTypeNum = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.UserSex = &temp
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.GroupMemberName = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.UForbidUntil = &v
	}
	return nil
}

func (p *TinyGroupMemberInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TinyGroupMemberInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TinyGroupMemberInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserName() {
		if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UserName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserType() {
		if err := oprot.WriteFieldBegin("userType", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.UserType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userType: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:avatar: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Avatar)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.avatar (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:avatar: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SDKID: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetVSign() {
		if err := oprot.WriteFieldBegin("vSign", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:vSign: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.VSign)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vSign (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:vSign: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err := oprot.WriteFieldBegin("remark", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remark: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Remark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remark (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remark: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserTypeNum() {
		if err := oprot.WriteFieldBegin("userTypeNum", thrift.I16, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:userTypeNum: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.UserTypeNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userTypeNum (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:userTypeNum: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserSex() {
		if err := oprot.WriteFieldBegin("userSex", thrift.BYTE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:userSex: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.UserSex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userSex (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:userSex: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extend: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupMemberName() {
		if err := oprot.WriteFieldBegin("groupMemberName", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:groupMemberName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupMemberName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupMemberName (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:groupMemberName: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUForbidUntil() {
		if err := oprot.WriteFieldBegin("uForbidUntil", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:uForbidUntil: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UForbidUntil)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uForbidUntil (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:uForbidUntil: ", p), err)
		}
	}
	return err
}

func (p *TinyGroupMemberInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TinyGroupMemberInfo(%+v)", *p)
}

// Attributes:
//  - GroupId
//  - TargetId
//  - Operate
type GroupForbid struct {
	GroupId  int64  `thrift:"groupId,1" json:"groupId"`
	TargetId *int64 `thrift:"targetId,2" json:"targetId,omitempty"`
	Operate  int8   `thrift:"operate,3" json:"operate"`
}

func NewGroupForbid() *GroupForbid {
	return &GroupForbid{}
}

func (p *GroupForbid) GetGroupId() int64 {
	return p.GroupId
}

var GroupForbid_TargetId_DEFAULT int64

func (p *GroupForbid) GetTargetId() int64 {
	if !p.IsSetTargetId() {
		return GroupForbid_TargetId_DEFAULT
	}
	return *p.TargetId
}

func (p *GroupForbid) GetOperate() int8 {
	return p.Operate
}
func (p *GroupForbid) IsSetTargetId() bool {
	return p.TargetId != nil
}

func (p *GroupForbid) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupForbid) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupForbid) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TargetId = &v
	}
	return nil
}

func (p *GroupForbid) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Operate = temp
	}
	return nil
}

func (p *GroupForbid) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupForbid"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupForbid) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupId: ", p), err)
	}
	return err
}

func (p *GroupForbid) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetId() {
		if err := oprot.WriteFieldBegin("targetId", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targetId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TargetId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.targetId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targetId: ", p), err)
		}
	}
	return err
}

func (p *GroupForbid) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operate", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:operate: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Operate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operate (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:operate: ", p), err)
	}
	return err
}

func (p *GroupForbid) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupForbid(%+v)", *p)
}

// Attributes:
//  - GroupID
//  - UserID
//  - UserName
//  - UserSex
//  - Tel
//  - Email
//  - Remark
//  - UserType
//  - Page
//  - ShieldSet
//  - Avatar
//  - SDKID
//  - VSign
type GroupMemberInfo struct {
	GroupID   *int64                 `thrift:"groupID,1" json:"groupID,omitempty"`
	UserID    *int64                 `thrift:"userID,2" json:"userID,omitempty"`
	UserName  *string                `thrift:"userName,3" json:"userName,omitempty"`
	UserSex   *int8                  `thrift:"userSex,4" json:"userSex,omitempty"`
	Tel       *string                `thrift:"tel,5" json:"tel,omitempty"`
	Email     *string                `thrift:"email,6" json:"email,omitempty"`
	Remark    *string                `thrift:"remark,7" json:"remark,omitempty"`
	UserType  *int8                  `thrift:"userType,8" json:"userType,omitempty"`
	Page      *int16                 `thrift:"page,9" json:"page,omitempty"`
	ShieldSet *ShieldGroupMessageSet `thrift:"shieldSet,10" json:"shieldSet,omitempty"`
	Avatar    *string                `thrift:"avatar,11" json:"avatar,omitempty"`
	SDKID     *int64                 `thrift:"SDKID,12" json:"SDKID,omitempty"`
	VSign     *int8                  `thrift:"vSign,13" json:"vSign,omitempty"`
}

func NewGroupMemberInfo() *GroupMemberInfo {
	return &GroupMemberInfo{}
}

var GroupMemberInfo_GroupID_DEFAULT int64

func (p *GroupMemberInfo) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return GroupMemberInfo_GroupID_DEFAULT
	}
	return *p.GroupID
}

var GroupMemberInfo_UserID_DEFAULT int64

func (p *GroupMemberInfo) GetUserID() int64 {
	if !p.IsSetUserID() {
		return GroupMemberInfo_UserID_DEFAULT
	}
	return *p.UserID
}

var GroupMemberInfo_UserName_DEFAULT string

func (p *GroupMemberInfo) GetUserName() string {
	if !p.IsSetUserName() {
		return GroupMemberInfo_UserName_DEFAULT
	}
	return *p.UserName
}

var GroupMemberInfo_UserSex_DEFAULT int8

func (p *GroupMemberInfo) GetUserSex() int8 {
	if !p.IsSetUserSex() {
		return GroupMemberInfo_UserSex_DEFAULT
	}
	return *p.UserSex
}

var GroupMemberInfo_Tel_DEFAULT string

func (p *GroupMemberInfo) GetTel() string {
	if !p.IsSetTel() {
		return GroupMemberInfo_Tel_DEFAULT
	}
	return *p.Tel
}

var GroupMemberInfo_Email_DEFAULT string

func (p *GroupMemberInfo) GetEmail() string {
	if !p.IsSetEmail() {
		return GroupMemberInfo_Email_DEFAULT
	}
	return *p.Email
}

var GroupMemberInfo_Remark_DEFAULT string

func (p *GroupMemberInfo) GetRemark() string {
	if !p.IsSetRemark() {
		return GroupMemberInfo_Remark_DEFAULT
	}
	return *p.Remark
}

var GroupMemberInfo_UserType_DEFAULT int8

func (p *GroupMemberInfo) GetUserType() int8 {
	if !p.IsSetUserType() {
		return GroupMemberInfo_UserType_DEFAULT
	}
	return *p.UserType
}

var GroupMemberInfo_Page_DEFAULT int16

func (p *GroupMemberInfo) GetPage() int16 {
	if !p.IsSetPage() {
		return GroupMemberInfo_Page_DEFAULT
	}
	return *p.Page
}

var GroupMemberInfo_ShieldSet_DEFAULT *ShieldGroupMessageSet

func (p *GroupMemberInfo) GetShieldSet() *ShieldGroupMessageSet {
	if !p.IsSetShieldSet() {
		return GroupMemberInfo_ShieldSet_DEFAULT
	}
	return p.ShieldSet
}

var GroupMemberInfo_Avatar_DEFAULT string

func (p *GroupMemberInfo) GetAvatar() string {
	if !p.IsSetAvatar() {
		return GroupMemberInfo_Avatar_DEFAULT
	}
	return *p.Avatar
}

var GroupMemberInfo_SDKID_DEFAULT int64

func (p *GroupMemberInfo) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return GroupMemberInfo_SDKID_DEFAULT
	}
	return *p.SDKID
}

var GroupMemberInfo_VSign_DEFAULT int8

func (p *GroupMemberInfo) GetVSign() int8 {
	if !p.IsSetVSign() {
		return GroupMemberInfo_VSign_DEFAULT
	}
	return *p.VSign
}
func (p *GroupMemberInfo) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *GroupMemberInfo) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *GroupMemberInfo) IsSetUserName() bool {
	return p.UserName != nil
}

func (p *GroupMemberInfo) IsSetUserSex() bool {
	return p.UserSex != nil
}

func (p *GroupMemberInfo) IsSetTel() bool {
	return p.Tel != nil
}

func (p *GroupMemberInfo) IsSetEmail() bool {
	return p.Email != nil
}

func (p *GroupMemberInfo) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *GroupMemberInfo) IsSetUserType() bool {
	return p.UserType != nil
}

func (p *GroupMemberInfo) IsSetPage() bool {
	return p.Page != nil
}

func (p *GroupMemberInfo) IsSetShieldSet() bool {
	return p.ShieldSet != nil
}

func (p *GroupMemberInfo) IsSetAvatar() bool {
	return p.Avatar != nil
}

func (p *GroupMemberInfo) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *GroupMemberInfo) IsSetVSign() bool {
	return p.VSign != nil
}

func (p *GroupMemberInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupMemberInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserName = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.UserSex = &temp
	}
	return nil
}

func (p *GroupMemberInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Tel = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Remark = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.UserType = &temp
	}
	return nil
}

func (p *GroupMemberInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Page = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField10(iprot thrift.TProtocol) error {
	p.ShieldSet = &ShieldGroupMessageSet{}
	if err := p.ShieldSet.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShieldSet), err)
	}
	return nil
}

func (p *GroupMemberInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Avatar = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *GroupMemberInfo) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := int8(v)
		p.VSign = &temp
	}
	return nil
}

func (p *GroupMemberInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupMemberInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupMemberInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupID: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserName() {
		if err := oprot.WriteFieldBegin("userName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UserName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userName: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserSex() {
		if err := oprot.WriteFieldBegin("userSex", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userSex: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.UserSex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userSex (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userSex: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTel() {
		if err := oprot.WriteFieldBegin("tel", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tel: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Tel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tel (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tel: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.email (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:email: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err := oprot.WriteFieldBegin("remark", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remark: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Remark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remark (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remark: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserType() {
		if err := oprot.WriteFieldBegin("userType", thrift.BYTE, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:userType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.UserType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userType (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:userType: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err := oprot.WriteFieldBegin("page", thrift.I16, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:page: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Page)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.page (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:page: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetShieldSet() {
		if err := oprot.WriteFieldBegin("shieldSet", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:shieldSet: ", p), err)
		}
		if err := p.ShieldSet.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShieldSet), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:shieldSet: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatar() {
		if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:avatar: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Avatar)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.avatar (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:avatar: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:SDKID: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetVSign() {
		if err := oprot.WriteFieldBegin("vSign", thrift.BYTE, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:vSign: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.VSign)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vSign (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:vSign: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupMemberInfo(%+v)", *p)
}

// Attributes:
//  - MsgType
//  - MsgID
//  - CreateUserID
//  - FromTeamID
//  - TargetUserIDs
//  - Title
//  - Body
//  - Format
//  - OriginalMsgID
//  - Status
//  - CreateTime
//  - OperType
//  - LocalID
//  - Maccode
//  - HavVaild
//  - SDKID
type PushMsgBean struct {
	MsgType       *int8   `thrift:"msgType,1" json:"msgType,omitempty"`
	MsgID         *int64  `thrift:"msgID,2" json:"msgID,omitempty"`
	CreateUserID  *int64  `thrift:"createUserID,3" json:"createUserID,omitempty"`
	FromTeamID    *int64  `thrift:"fromTeamID,4" json:"fromTeamID,omitempty"`
	TargetUserIDs []int64 `thrift:"targetUserIDs,5" json:"targetUserIDs,omitempty"`
	Title         *string `thrift:"title,6" json:"title,omitempty"`
	Body          *string `thrift:"body,7" json:"body,omitempty"`
	Format        *string `thrift:"format,8" json:"format,omitempty"`
	OriginalMsgID *int64  `thrift:"originalMsgID,9" json:"originalMsgID,omitempty"`
	Status        *int8   `thrift:"status,10" json:"status,omitempty"`
	CreateTime    *int64  `thrift:"createTime,11" json:"createTime,omitempty"`
	OperType      *int8   `thrift:"operType,12" json:"operType,omitempty"`
	LocalID       *int64  `thrift:"localID,13" json:"localID,omitempty"`
	Maccode       string  `thrift:"maccode,14" json:"maccode"`
	HavVaild      *int8   `thrift:"havVaild,15" json:"havVaild,omitempty"`
	SDKID         *int64  `thrift:"SDKID,16" json:"SDKID,omitempty"`
}

func NewPushMsgBean() *PushMsgBean {
	return &PushMsgBean{}
}

var PushMsgBean_MsgType_DEFAULT int8

func (p *PushMsgBean) GetMsgType() int8 {
	if !p.IsSetMsgType() {
		return PushMsgBean_MsgType_DEFAULT
	}
	return *p.MsgType
}

var PushMsgBean_MsgID_DEFAULT int64

func (p *PushMsgBean) GetMsgID() int64 {
	if !p.IsSetMsgID() {
		return PushMsgBean_MsgID_DEFAULT
	}
	return *p.MsgID
}

var PushMsgBean_CreateUserID_DEFAULT int64

func (p *PushMsgBean) GetCreateUserID() int64 {
	if !p.IsSetCreateUserID() {
		return PushMsgBean_CreateUserID_DEFAULT
	}
	return *p.CreateUserID
}

var PushMsgBean_FromTeamID_DEFAULT int64

func (p *PushMsgBean) GetFromTeamID() int64 {
	if !p.IsSetFromTeamID() {
		return PushMsgBean_FromTeamID_DEFAULT
	}
	return *p.FromTeamID
}

var PushMsgBean_TargetUserIDs_DEFAULT []int64

func (p *PushMsgBean) GetTargetUserIDs() []int64 {
	return p.TargetUserIDs
}

var PushMsgBean_Title_DEFAULT string

func (p *PushMsgBean) GetTitle() string {
	if !p.IsSetTitle() {
		return PushMsgBean_Title_DEFAULT
	}
	return *p.Title
}

var PushMsgBean_Body_DEFAULT string

func (p *PushMsgBean) GetBody() string {
	if !p.IsSetBody() {
		return PushMsgBean_Body_DEFAULT
	}
	return *p.Body
}

var PushMsgBean_Format_DEFAULT string

func (p *PushMsgBean) GetFormat() string {
	if !p.IsSetFormat() {
		return PushMsgBean_Format_DEFAULT
	}
	return *p.Format
}

var PushMsgBean_OriginalMsgID_DEFAULT int64

func (p *PushMsgBean) GetOriginalMsgID() int64 {
	if !p.IsSetOriginalMsgID() {
		return PushMsgBean_OriginalMsgID_DEFAULT
	}
	return *p.OriginalMsgID
}

var PushMsgBean_Status_DEFAULT int8

func (p *PushMsgBean) GetStatus() int8 {
	if !p.IsSetStatus() {
		return PushMsgBean_Status_DEFAULT
	}
	return *p.Status
}

var PushMsgBean_CreateTime_DEFAULT int64

func (p *PushMsgBean) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return PushMsgBean_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var PushMsgBean_OperType_DEFAULT int8

func (p *PushMsgBean) GetOperType() int8 {
	if !p.IsSetOperType() {
		return PushMsgBean_OperType_DEFAULT
	}
	return *p.OperType
}

var PushMsgBean_LocalID_DEFAULT int64

func (p *PushMsgBean) GetLocalID() int64 {
	if !p.IsSetLocalID() {
		return PushMsgBean_LocalID_DEFAULT
	}
	return *p.LocalID
}

func (p *PushMsgBean) GetMaccode() string {
	return p.Maccode
}

var PushMsgBean_HavVaild_DEFAULT int8

func (p *PushMsgBean) GetHavVaild() int8 {
	if !p.IsSetHavVaild() {
		return PushMsgBean_HavVaild_DEFAULT
	}
	return *p.HavVaild
}

var PushMsgBean_SDKID_DEFAULT int64

func (p *PushMsgBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return PushMsgBean_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *PushMsgBean) IsSetMsgType() bool {
	return p.MsgType != nil
}

func (p *PushMsgBean) IsSetMsgID() bool {
	return p.MsgID != nil
}

func (p *PushMsgBean) IsSetCreateUserID() bool {
	return p.CreateUserID != nil
}

func (p *PushMsgBean) IsSetFromTeamID() bool {
	return p.FromTeamID != nil
}

func (p *PushMsgBean) IsSetTargetUserIDs() bool {
	return p.TargetUserIDs != nil
}

func (p *PushMsgBean) IsSetTitle() bool {
	return p.Title != nil
}

func (p *PushMsgBean) IsSetBody() bool {
	return p.Body != nil
}

func (p *PushMsgBean) IsSetFormat() bool {
	return p.Format != nil
}

func (p *PushMsgBean) IsSetOriginalMsgID() bool {
	return p.OriginalMsgID != nil
}

func (p *PushMsgBean) IsSetStatus() bool {
	return p.Status != nil
}

func (p *PushMsgBean) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *PushMsgBean) IsSetOperType() bool {
	return p.OperType != nil
}

func (p *PushMsgBean) IsSetLocalID() bool {
	return p.LocalID != nil
}

func (p *PushMsgBean) IsSetHavVaild() bool {
	return p.HavVaild != nil
}

func (p *PushMsgBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *PushMsgBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PushMsgBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.MsgType = &temp
	}
	return nil
}

func (p *PushMsgBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MsgID = &v
	}
	return nil
}

func (p *PushMsgBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CreateUserID = &v
	}
	return nil
}

func (p *PushMsgBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FromTeamID = &v
	}
	return nil
}

func (p *PushMsgBean) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.TargetUserIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem26 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem26 = v
		}
		p.TargetUserIDs = append(p.TargetUserIDs, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PushMsgBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *PushMsgBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Body = &v
	}
	return nil
}

func (p *PushMsgBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Format = &v
	}
	return nil
}

func (p *PushMsgBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.OriginalMsgID = &v
	}
	return nil
}

func (p *PushMsgBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *PushMsgBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *PushMsgBean) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.OperType = &temp
	}
	return nil
}

func (p *PushMsgBean) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.LocalID = &v
	}
	return nil
}

func (p *PushMsgBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Maccode = v
	}
	return nil
}

func (p *PushMsgBean) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p.HavVaild = &temp
	}
	return nil
}

func (p *PushMsgBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *PushMsgBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushMsgBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PushMsgBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgType() {
		if err := oprot.WriteFieldBegin("msgType", thrift.BYTE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msgType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.MsgType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.msgType (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msgType: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgID() {
		if err := oprot.WriteFieldBegin("msgID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.MsgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.msgID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msgID: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateUserID() {
		if err := oprot.WriteFieldBegin("createUserID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createUserID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateUserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createUserID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createUserID: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTeamID() {
		if err := oprot.WriteFieldBegin("fromTeamID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fromTeamID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FromTeamID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fromTeamID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fromTeamID: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetUserIDs() {
		if err := oprot.WriteFieldBegin("targetUserIDs", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:targetUserIDs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.TargetUserIDs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TargetUserIDs {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:targetUserIDs: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:title: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBody() {
		if err := oprot.WriteFieldBegin("body", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:body: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Body)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.body (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:body: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err := oprot.WriteFieldBegin("format", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:format: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Format)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.format (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:format: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginalMsgID() {
		if err := oprot.WriteFieldBegin("originalMsgID", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:originalMsgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OriginalMsgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originalMsgID (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:originalMsgID: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:createTime: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperType() {
		if err := oprot.WriteFieldBegin("operType", thrift.BYTE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:operType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.OperType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.operType (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:operType: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocalID() {
		if err := oprot.WriteFieldBegin("localID", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:localID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LocalID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.localID (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:localID: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maccode", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:maccode: ", p), err)
	}
	if err := oprot.WriteString(string(p.Maccode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maccode (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:maccode: ", p), err)
	}
	return err
}

func (p *PushMsgBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetHavVaild() {
		if err := oprot.WriteFieldBegin("havVaild", thrift.BYTE, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:havVaild: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.HavVaild)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.havVaild (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:havVaild: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:SDKID: ", p), err)
		}
	}
	return err
}

func (p *PushMsgBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushMsgBean(%+v)", *p)
}

// Attributes:
//  - EnterpriseID
//  - FullName
//  - ShortName
//  - KeyWords
//  - Sector
//  - SectorDetail
//  - Type
//  - ProvinceID
//  - CityID
//  - AreaID
//  - Address
//  - Postcode
//  - Phone
//  - Fax
//  - Email
//  - Homepage
//  - Introduction
//  - LogUrl
//  - Status
//  - CreationDate
//  - UpdatedDate
type EnterpriseBean struct {
	EnterpriseID *int64  `thrift:"enterpriseID,1" json:"enterpriseID,omitempty"`
	FullName     *string `thrift:"fullName,2" json:"fullName,omitempty"`
	ShortName    *string `thrift:"shortName,3" json:"shortName,omitempty"`
	KeyWords     *string `thrift:"keyWords,4" json:"keyWords,omitempty"`
	Sector       *int64  `thrift:"sector,5" json:"sector,omitempty"`
	SectorDetail *int64  `thrift:"sectorDetail,6" json:"sectorDetail,omitempty"`
	Type         *int8   `thrift:"type,7" json:"type,omitempty"`
	ProvinceID   *int64  `thrift:"provinceID,8" json:"provinceID,omitempty"`
	CityID       *int64  `thrift:"cityID,9" json:"cityID,omitempty"`
	AreaID       *int64  `thrift:"areaID,10" json:"areaID,omitempty"`
	Address      *string `thrift:"address,11" json:"address,omitempty"`
	Postcode     *string `thrift:"postcode,12" json:"postcode,omitempty"`
	Phone        *string `thrift:"phone,13" json:"phone,omitempty"`
	Fax          *string `thrift:"fax,14" json:"fax,omitempty"`
	Email        *string `thrift:"email,15" json:"email,omitempty"`
	Homepage     *string `thrift:"homepage,16" json:"homepage,omitempty"`
	Introduction *string `thrift:"introduction,17" json:"introduction,omitempty"`
	LogUrl       *string `thrift:"logUrl,18" json:"logUrl,omitempty"`
	Status       *int8   `thrift:"status,19" json:"status,omitempty"`
	CreationDate *int64  `thrift:"creationDate,20" json:"creationDate,omitempty"`
	UpdatedDate  *int64  `thrift:"updatedDate,21" json:"updatedDate,omitempty"`
}

func NewEnterpriseBean() *EnterpriseBean {
	return &EnterpriseBean{}
}

var EnterpriseBean_EnterpriseID_DEFAULT int64

func (p *EnterpriseBean) GetEnterpriseID() int64 {
	if !p.IsSetEnterpriseID() {
		return EnterpriseBean_EnterpriseID_DEFAULT
	}
	return *p.EnterpriseID
}

var EnterpriseBean_FullName_DEFAULT string

func (p *EnterpriseBean) GetFullName() string {
	if !p.IsSetFullName() {
		return EnterpriseBean_FullName_DEFAULT
	}
	return *p.FullName
}

var EnterpriseBean_ShortName_DEFAULT string

func (p *EnterpriseBean) GetShortName() string {
	if !p.IsSetShortName() {
		return EnterpriseBean_ShortName_DEFAULT
	}
	return *p.ShortName
}

var EnterpriseBean_KeyWords_DEFAULT string

func (p *EnterpriseBean) GetKeyWords() string {
	if !p.IsSetKeyWords() {
		return EnterpriseBean_KeyWords_DEFAULT
	}
	return *p.KeyWords
}

var EnterpriseBean_Sector_DEFAULT int64

func (p *EnterpriseBean) GetSector() int64 {
	if !p.IsSetSector() {
		return EnterpriseBean_Sector_DEFAULT
	}
	return *p.Sector
}

var EnterpriseBean_SectorDetail_DEFAULT int64

func (p *EnterpriseBean) GetSectorDetail() int64 {
	if !p.IsSetSectorDetail() {
		return EnterpriseBean_SectorDetail_DEFAULT
	}
	return *p.SectorDetail
}

var EnterpriseBean_Type_DEFAULT int8

func (p *EnterpriseBean) GetType() int8 {
	if !p.IsSetType() {
		return EnterpriseBean_Type_DEFAULT
	}
	return *p.Type
}

var EnterpriseBean_ProvinceID_DEFAULT int64

func (p *EnterpriseBean) GetProvinceID() int64 {
	if !p.IsSetProvinceID() {
		return EnterpriseBean_ProvinceID_DEFAULT
	}
	return *p.ProvinceID
}

var EnterpriseBean_CityID_DEFAULT int64

func (p *EnterpriseBean) GetCityID() int64 {
	if !p.IsSetCityID() {
		return EnterpriseBean_CityID_DEFAULT
	}
	return *p.CityID
}

var EnterpriseBean_AreaID_DEFAULT int64

func (p *EnterpriseBean) GetAreaID() int64 {
	if !p.IsSetAreaID() {
		return EnterpriseBean_AreaID_DEFAULT
	}
	return *p.AreaID
}

var EnterpriseBean_Address_DEFAULT string

func (p *EnterpriseBean) GetAddress() string {
	if !p.IsSetAddress() {
		return EnterpriseBean_Address_DEFAULT
	}
	return *p.Address
}

var EnterpriseBean_Postcode_DEFAULT string

func (p *EnterpriseBean) GetPostcode() string {
	if !p.IsSetPostcode() {
		return EnterpriseBean_Postcode_DEFAULT
	}
	return *p.Postcode
}

var EnterpriseBean_Phone_DEFAULT string

func (p *EnterpriseBean) GetPhone() string {
	if !p.IsSetPhone() {
		return EnterpriseBean_Phone_DEFAULT
	}
	return *p.Phone
}

var EnterpriseBean_Fax_DEFAULT string

func (p *EnterpriseBean) GetFax() string {
	if !p.IsSetFax() {
		return EnterpriseBean_Fax_DEFAULT
	}
	return *p.Fax
}

var EnterpriseBean_Email_DEFAULT string

func (p *EnterpriseBean) GetEmail() string {
	if !p.IsSetEmail() {
		return EnterpriseBean_Email_DEFAULT
	}
	return *p.Email
}

var EnterpriseBean_Homepage_DEFAULT string

func (p *EnterpriseBean) GetHomepage() string {
	if !p.IsSetHomepage() {
		return EnterpriseBean_Homepage_DEFAULT
	}
	return *p.Homepage
}

var EnterpriseBean_Introduction_DEFAULT string

func (p *EnterpriseBean) GetIntroduction() string {
	if !p.IsSetIntroduction() {
		return EnterpriseBean_Introduction_DEFAULT
	}
	return *p.Introduction
}

var EnterpriseBean_LogUrl_DEFAULT string

func (p *EnterpriseBean) GetLogUrl() string {
	if !p.IsSetLogUrl() {
		return EnterpriseBean_LogUrl_DEFAULT
	}
	return *p.LogUrl
}

var EnterpriseBean_Status_DEFAULT int8

func (p *EnterpriseBean) GetStatus() int8 {
	if !p.IsSetStatus() {
		return EnterpriseBean_Status_DEFAULT
	}
	return *p.Status
}

var EnterpriseBean_CreationDate_DEFAULT int64

func (p *EnterpriseBean) GetCreationDate() int64 {
	if !p.IsSetCreationDate() {
		return EnterpriseBean_CreationDate_DEFAULT
	}
	return *p.CreationDate
}

var EnterpriseBean_UpdatedDate_DEFAULT int64

func (p *EnterpriseBean) GetUpdatedDate() int64 {
	if !p.IsSetUpdatedDate() {
		return EnterpriseBean_UpdatedDate_DEFAULT
	}
	return *p.UpdatedDate
}
func (p *EnterpriseBean) IsSetEnterpriseID() bool {
	return p.EnterpriseID != nil
}

func (p *EnterpriseBean) IsSetFullName() bool {
	return p.FullName != nil
}

func (p *EnterpriseBean) IsSetShortName() bool {
	return p.ShortName != nil
}

func (p *EnterpriseBean) IsSetKeyWords() bool {
	return p.KeyWords != nil
}

func (p *EnterpriseBean) IsSetSector() bool {
	return p.Sector != nil
}

func (p *EnterpriseBean) IsSetSectorDetail() bool {
	return p.SectorDetail != nil
}

func (p *EnterpriseBean) IsSetType() bool {
	return p.Type != nil
}

func (p *EnterpriseBean) IsSetProvinceID() bool {
	return p.ProvinceID != nil
}

func (p *EnterpriseBean) IsSetCityID() bool {
	return p.CityID != nil
}

func (p *EnterpriseBean) IsSetAreaID() bool {
	return p.AreaID != nil
}

func (p *EnterpriseBean) IsSetAddress() bool {
	return p.Address != nil
}

func (p *EnterpriseBean) IsSetPostcode() bool {
	return p.Postcode != nil
}

func (p *EnterpriseBean) IsSetPhone() bool {
	return p.Phone != nil
}

func (p *EnterpriseBean) IsSetFax() bool {
	return p.Fax != nil
}

func (p *EnterpriseBean) IsSetEmail() bool {
	return p.Email != nil
}

func (p *EnterpriseBean) IsSetHomepage() bool {
	return p.Homepage != nil
}

func (p *EnterpriseBean) IsSetIntroduction() bool {
	return p.Introduction != nil
}

func (p *EnterpriseBean) IsSetLogUrl() bool {
	return p.LogUrl != nil
}

func (p *EnterpriseBean) IsSetStatus() bool {
	return p.Status != nil
}

func (p *EnterpriseBean) IsSetCreationDate() bool {
	return p.CreationDate != nil
}

func (p *EnterpriseBean) IsSetUpdatedDate() bool {
	return p.UpdatedDate != nil
}

func (p *EnterpriseBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EnterpriseBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.EnterpriseID = &v
	}
	return nil
}

func (p *EnterpriseBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FullName = &v
	}
	return nil
}

func (p *EnterpriseBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ShortName = &v
	}
	return nil
}

func (p *EnterpriseBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.KeyWords = &v
	}
	return nil
}

func (p *EnterpriseBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Sector = &v
	}
	return nil
}

func (p *EnterpriseBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SectorDetail = &v
	}
	return nil
}

func (p *EnterpriseBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.Type = &temp
	}
	return nil
}

func (p *EnterpriseBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ProvinceID = &v
	}
	return nil
}

func (p *EnterpriseBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.CityID = &v
	}
	return nil
}

func (p *EnterpriseBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.AreaID = &v
	}
	return nil
}

func (p *EnterpriseBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *EnterpriseBean) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Postcode = &v
	}
	return nil
}

func (p *EnterpriseBean) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Phone = &v
	}
	return nil
}

func (p *EnterpriseBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Fax = &v
	}
	return nil
}

func (p *EnterpriseBean) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *EnterpriseBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Homepage = &v
	}
	return nil
}

func (p *EnterpriseBean) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.Introduction = &v
	}
	return nil
}

func (p *EnterpriseBean) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.LogUrl = &v
	}
	return nil
}

func (p *EnterpriseBean) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *EnterpriseBean) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.CreationDate = &v
	}
	return nil
}

func (p *EnterpriseBean) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.UpdatedDate = &v
	}
	return nil
}

func (p *EnterpriseBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EnterpriseBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EnterpriseBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnterpriseID() {
		if err := oprot.WriteFieldBegin("enterpriseID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:enterpriseID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EnterpriseID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enterpriseID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:enterpriseID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFullName() {
		if err := oprot.WriteFieldBegin("fullName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fullName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FullName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fullName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fullName: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetShortName() {
		if err := oprot.WriteFieldBegin("shortName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:shortName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShortName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shortName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:shortName: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyWords() {
		if err := oprot.WriteFieldBegin("keyWords", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyWords: ", p), err)
		}
		if err := oprot.WriteString(string(*p.KeyWords)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.keyWords (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyWords: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSector() {
		if err := oprot.WriteFieldBegin("sector", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sector: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Sector)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sector (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sector: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSectorDetail() {
		if err := oprot.WriteFieldBegin("sectorDetail", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sectorDetail: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SectorDetail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sectorDetail (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sectorDetail: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:type: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:type: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetProvinceID() {
		if err := oprot.WriteFieldBegin("provinceID", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:provinceID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ProvinceID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.provinceID (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:provinceID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCityID() {
		if err := oprot.WriteFieldBegin("cityID", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:cityID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CityID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cityID (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:cityID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAreaID() {
		if err := oprot.WriteFieldBegin("areaID", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:areaID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AreaID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.areaID (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:areaID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:address: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:address: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPostcode() {
		if err := oprot.WriteFieldBegin("postcode", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:postcode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Postcode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.postcode (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:postcode: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhone() {
		if err := oprot.WriteFieldBegin("phone", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:phone: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Phone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.phone (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:phone: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetFax() {
		if err := oprot.WriteFieldBegin("fax", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:fax: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Fax)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fax (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:fax: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.email (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:email: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetHomepage() {
		if err := oprot.WriteFieldBegin("homepage", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:homepage: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Homepage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.homepage (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:homepage: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetIntroduction() {
		if err := oprot.WriteFieldBegin("introduction", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:introduction: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Introduction)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.introduction (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:introduction: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogUrl() {
		if err := oprot.WriteFieldBegin("logUrl", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:logUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LogUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.logUrl (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:logUrl: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:status: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreationDate() {
		if err := oprot.WriteFieldBegin("creationDate", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:creationDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreationDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creationDate (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:creationDate: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedDate() {
		if err := oprot.WriteFieldBegin("updatedDate", thrift.I64, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:updatedDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UpdatedDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updatedDate (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:updatedDate: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnterpriseBean(%+v)", *p)
}

// Attributes:
//  - OrgID
//  - EnterpriseID
//  - OrgName
//  - OrgCode
//  - Leaf
//  - ParentOrgID
//  - Remark
//  - OrderNum
//  - BranchID
//  - DepartID
//  - DepartLevel
//  - SubOrgNum
//  - SubUserNum
//  - IsHidden
//  - ProvinceID
//  - ProvinceName
//  - CityID
//  - CityName
//  - AreaID
//  - AreaName
//  - Extend
//  - ResCode
//  - ExlRow
//  - CreationDate
//  - UpdatedDate
//  - ExternalOrg
//  - ChangeVersion
//  - OrgStatus
//  - OrgGroupId
type OrganizationBean struct {
	OrgID         *int64  `thrift:"OrgID,1" json:"OrgID,omitempty"`
	EnterpriseID  *int64  `thrift:"enterpriseID,2" json:"enterpriseID,omitempty"`
	OrgName       *string `thrift:"orgName,3" json:"orgName,omitempty"`
	OrgCode       *string `thrift:"orgCode,4" json:"orgCode,omitempty"`
	Leaf          *int8   `thrift:"leaf,5" json:"leaf,omitempty"`
	ParentOrgID   *int64  `thrift:"parentOrgID,6" json:"parentOrgID,omitempty"`
	Remark        *string `thrift:"remark,7" json:"remark,omitempty"`
	OrderNum      *int64  `thrift:"orderNum,8" json:"orderNum,omitempty"`
	BranchID      *int64  `thrift:"branchID,9" json:"branchID,omitempty"`
	DepartID      *string `thrift:"departID,10" json:"departID,omitempty"`
	DepartLevel   *int8   `thrift:"departLevel,11" json:"departLevel,omitempty"`
	SubOrgNum     *int64  `thrift:"subOrgNum,12" json:"subOrgNum,omitempty"`
	SubUserNum    *int64  `thrift:"subUserNum,13" json:"subUserNum,omitempty"`
	IsHidden      *int8   `thrift:"isHidden,14" json:"isHidden,omitempty"`
	ProvinceID    *int64  `thrift:"provinceID,15" json:"provinceID,omitempty"`
	ProvinceName  *string `thrift:"provinceName,16" json:"provinceName,omitempty"`
	CityID        *int64  `thrift:"cityID,17" json:"cityID,omitempty"`
	CityName      *string `thrift:"cityName,18" json:"cityName,omitempty"`
	AreaID        *int64  `thrift:"areaID,19" json:"areaID,omitempty"`
	AreaName      *string `thrift:"areaName,20" json:"areaName,omitempty"`
	Extend        *string `thrift:"extend,21" json:"extend,omitempty"`
	ResCode       *int32  `thrift:"resCode,22" json:"resCode,omitempty"`
	ExlRow        *int32  `thrift:"exlRow,23" json:"exlRow,omitempty"`
	CreationDate  *int64  `thrift:"creationDate,24" json:"creationDate,omitempty"`
	UpdatedDate   *int64  `thrift:"updatedDate,25" json:"updatedDate,omitempty"`
	ExternalOrg   *string `thrift:"externalOrg,26" json:"externalOrg,omitempty"`
	ChangeVersion *int64  `thrift:"changeVersion,27" json:"changeVersion,omitempty"`
	OrgStatus     *string `thrift:"orgStatus,28" json:"orgStatus,omitempty"`
	OrgGroupId    *int64  `thrift:"orgGroupId,29" json:"orgGroupId,omitempty"`
}

func NewOrganizationBean() *OrganizationBean {
	return &OrganizationBean{}
}

var OrganizationBean_OrgID_DEFAULT int64

func (p *OrganizationBean) GetOrgID() int64 {
	if !p.IsSetOrgID() {
		return OrganizationBean_OrgID_DEFAULT
	}
	return *p.OrgID
}

var OrganizationBean_EnterpriseID_DEFAULT int64

func (p *OrganizationBean) GetEnterpriseID() int64 {
	if !p.IsSetEnterpriseID() {
		return OrganizationBean_EnterpriseID_DEFAULT
	}
	return *p.EnterpriseID
}

var OrganizationBean_OrgName_DEFAULT string

func (p *OrganizationBean) GetOrgName() string {
	if !p.IsSetOrgName() {
		return OrganizationBean_OrgName_DEFAULT
	}
	return *p.OrgName
}

var OrganizationBean_OrgCode_DEFAULT string

func (p *OrganizationBean) GetOrgCode() string {
	if !p.IsSetOrgCode() {
		return OrganizationBean_OrgCode_DEFAULT
	}
	return *p.OrgCode
}

var OrganizationBean_Leaf_DEFAULT int8

func (p *OrganizationBean) GetLeaf() int8 {
	if !p.IsSetLeaf() {
		return OrganizationBean_Leaf_DEFAULT
	}
	return *p.Leaf
}

var OrganizationBean_ParentOrgID_DEFAULT int64

func (p *OrganizationBean) GetParentOrgID() int64 {
	if !p.IsSetParentOrgID() {
		return OrganizationBean_ParentOrgID_DEFAULT
	}
	return *p.ParentOrgID
}

var OrganizationBean_Remark_DEFAULT string

func (p *OrganizationBean) GetRemark() string {
	if !p.IsSetRemark() {
		return OrganizationBean_Remark_DEFAULT
	}
	return *p.Remark
}

var OrganizationBean_OrderNum_DEFAULT int64

func (p *OrganizationBean) GetOrderNum() int64 {
	if !p.IsSetOrderNum() {
		return OrganizationBean_OrderNum_DEFAULT
	}
	return *p.OrderNum
}

var OrganizationBean_BranchID_DEFAULT int64

func (p *OrganizationBean) GetBranchID() int64 {
	if !p.IsSetBranchID() {
		return OrganizationBean_BranchID_DEFAULT
	}
	return *p.BranchID
}

var OrganizationBean_DepartID_DEFAULT string

func (p *OrganizationBean) GetDepartID() string {
	if !p.IsSetDepartID() {
		return OrganizationBean_DepartID_DEFAULT
	}
	return *p.DepartID
}

var OrganizationBean_DepartLevel_DEFAULT int8

func (p *OrganizationBean) GetDepartLevel() int8 {
	if !p.IsSetDepartLevel() {
		return OrganizationBean_DepartLevel_DEFAULT
	}
	return *p.DepartLevel
}

var OrganizationBean_SubOrgNum_DEFAULT int64

func (p *OrganizationBean) GetSubOrgNum() int64 {
	if !p.IsSetSubOrgNum() {
		return OrganizationBean_SubOrgNum_DEFAULT
	}
	return *p.SubOrgNum
}

var OrganizationBean_SubUserNum_DEFAULT int64

func (p *OrganizationBean) GetSubUserNum() int64 {
	if !p.IsSetSubUserNum() {
		return OrganizationBean_SubUserNum_DEFAULT
	}
	return *p.SubUserNum
}

var OrganizationBean_IsHidden_DEFAULT int8

func (p *OrganizationBean) GetIsHidden() int8 {
	if !p.IsSetIsHidden() {
		return OrganizationBean_IsHidden_DEFAULT
	}
	return *p.IsHidden
}

var OrganizationBean_ProvinceID_DEFAULT int64

func (p *OrganizationBean) GetProvinceID() int64 {
	if !p.IsSetProvinceID() {
		return OrganizationBean_ProvinceID_DEFAULT
	}
	return *p.ProvinceID
}

var OrganizationBean_ProvinceName_DEFAULT string

func (p *OrganizationBean) GetProvinceName() string {
	if !p.IsSetProvinceName() {
		return OrganizationBean_ProvinceName_DEFAULT
	}
	return *p.ProvinceName
}

var OrganizationBean_CityID_DEFAULT int64

func (p *OrganizationBean) GetCityID() int64 {
	if !p.IsSetCityID() {
		return OrganizationBean_CityID_DEFAULT
	}
	return *p.CityID
}

var OrganizationBean_CityName_DEFAULT string

func (p *OrganizationBean) GetCityName() string {
	if !p.IsSetCityName() {
		return OrganizationBean_CityName_DEFAULT
	}
	return *p.CityName
}

var OrganizationBean_AreaID_DEFAULT int64

func (p *OrganizationBean) GetAreaID() int64 {
	if !p.IsSetAreaID() {
		return OrganizationBean_AreaID_DEFAULT
	}
	return *p.AreaID
}

var OrganizationBean_AreaName_DEFAULT string

func (p *OrganizationBean) GetAreaName() string {
	if !p.IsSetAreaName() {
		return OrganizationBean_AreaName_DEFAULT
	}
	return *p.AreaName
}

var OrganizationBean_Extend_DEFAULT string

func (p *OrganizationBean) GetExtend() string {
	if !p.IsSetExtend() {
		return OrganizationBean_Extend_DEFAULT
	}
	return *p.Extend
}

var OrganizationBean_ResCode_DEFAULT int32

func (p *OrganizationBean) GetResCode() int32 {
	if !p.IsSetResCode() {
		return OrganizationBean_ResCode_DEFAULT
	}
	return *p.ResCode
}

var OrganizationBean_ExlRow_DEFAULT int32

func (p *OrganizationBean) GetExlRow() int32 {
	if !p.IsSetExlRow() {
		return OrganizationBean_ExlRow_DEFAULT
	}
	return *p.ExlRow
}

var OrganizationBean_CreationDate_DEFAULT int64

func (p *OrganizationBean) GetCreationDate() int64 {
	if !p.IsSetCreationDate() {
		return OrganizationBean_CreationDate_DEFAULT
	}
	return *p.CreationDate
}

var OrganizationBean_UpdatedDate_DEFAULT int64

func (p *OrganizationBean) GetUpdatedDate() int64 {
	if !p.IsSetUpdatedDate() {
		return OrganizationBean_UpdatedDate_DEFAULT
	}
	return *p.UpdatedDate
}

var OrganizationBean_ExternalOrg_DEFAULT string

func (p *OrganizationBean) GetExternalOrg() string {
	if !p.IsSetExternalOrg() {
		return OrganizationBean_ExternalOrg_DEFAULT
	}
	return *p.ExternalOrg
}

var OrganizationBean_ChangeVersion_DEFAULT int64

func (p *OrganizationBean) GetChangeVersion() int64 {
	if !p.IsSetChangeVersion() {
		return OrganizationBean_ChangeVersion_DEFAULT
	}
	return *p.ChangeVersion
}

var OrganizationBean_OrgStatus_DEFAULT string

func (p *OrganizationBean) GetOrgStatus() string {
	if !p.IsSetOrgStatus() {
		return OrganizationBean_OrgStatus_DEFAULT
	}
	return *p.OrgStatus
}

var OrganizationBean_OrgGroupId_DEFAULT int64

func (p *OrganizationBean) GetOrgGroupId() int64 {
	if !p.IsSetOrgGroupId() {
		return OrganizationBean_OrgGroupId_DEFAULT
	}
	return *p.OrgGroupId
}
func (p *OrganizationBean) IsSetOrgID() bool {
	return p.OrgID != nil
}

func (p *OrganizationBean) IsSetEnterpriseID() bool {
	return p.EnterpriseID != nil
}

func (p *OrganizationBean) IsSetOrgName() bool {
	return p.OrgName != nil
}

func (p *OrganizationBean) IsSetOrgCode() bool {
	return p.OrgCode != nil
}

func (p *OrganizationBean) IsSetLeaf() bool {
	return p.Leaf != nil
}

func (p *OrganizationBean) IsSetParentOrgID() bool {
	return p.ParentOrgID != nil
}

func (p *OrganizationBean) IsSetRemark() bool {
	return p.Remark != nil
}

func (p *OrganizationBean) IsSetOrderNum() bool {
	return p.OrderNum != nil
}

func (p *OrganizationBean) IsSetBranchID() bool {
	return p.BranchID != nil
}

func (p *OrganizationBean) IsSetDepartID() bool {
	return p.DepartID != nil
}

func (p *OrganizationBean) IsSetDepartLevel() bool {
	return p.DepartLevel != nil
}

func (p *OrganizationBean) IsSetSubOrgNum() bool {
	return p.SubOrgNum != nil
}

func (p *OrganizationBean) IsSetSubUserNum() bool {
	return p.SubUserNum != nil
}

func (p *OrganizationBean) IsSetIsHidden() bool {
	return p.IsHidden != nil
}

func (p *OrganizationBean) IsSetProvinceID() bool {
	return p.ProvinceID != nil
}

func (p *OrganizationBean) IsSetProvinceName() bool {
	return p.ProvinceName != nil
}

func (p *OrganizationBean) IsSetCityID() bool {
	return p.CityID != nil
}

func (p *OrganizationBean) IsSetCityName() bool {
	return p.CityName != nil
}

func (p *OrganizationBean) IsSetAreaID() bool {
	return p.AreaID != nil
}

func (p *OrganizationBean) IsSetAreaName() bool {
	return p.AreaName != nil
}

func (p *OrganizationBean) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *OrganizationBean) IsSetResCode() bool {
	return p.ResCode != nil
}

func (p *OrganizationBean) IsSetExlRow() bool {
	return p.ExlRow != nil
}

func (p *OrganizationBean) IsSetCreationDate() bool {
	return p.CreationDate != nil
}

func (p *OrganizationBean) IsSetUpdatedDate() bool {
	return p.UpdatedDate != nil
}

func (p *OrganizationBean) IsSetExternalOrg() bool {
	return p.ExternalOrg != nil
}

func (p *OrganizationBean) IsSetChangeVersion() bool {
	return p.ChangeVersion != nil
}

func (p *OrganizationBean) IsSetOrgStatus() bool {
	return p.OrgStatus != nil
}

func (p *OrganizationBean) IsSetOrgGroupId() bool {
	return p.OrgGroupId != nil
}

func (p *OrganizationBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OrganizationBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrgID = &v
	}
	return nil
}

func (p *OrganizationBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EnterpriseID = &v
	}
	return nil
}

func (p *OrganizationBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrgName = &v
	}
	return nil
}

func (p *OrganizationBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OrgCode = &v
	}
	return nil
}

func (p *OrganizationBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Leaf = &temp
	}
	return nil
}

func (p *OrganizationBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ParentOrgID = &v
	}
	return nil
}

func (p *OrganizationBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Remark = &v
	}
	return nil
}

func (p *OrganizationBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OrderNum = &v
	}
	return nil
}

func (p *OrganizationBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.BranchID = &v
	}
	return nil
}

func (p *OrganizationBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DepartID = &v
	}
	return nil
}

func (p *OrganizationBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.DepartLevel = &temp
	}
	return nil
}

func (p *OrganizationBean) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.SubOrgNum = &v
	}
	return nil
}

func (p *OrganizationBean) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.SubUserNum = &v
	}
	return nil
}

func (p *OrganizationBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := int8(v)
		p.IsHidden = &temp
	}
	return nil
}

func (p *OrganizationBean) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ProvinceID = &v
	}
	return nil
}

func (p *OrganizationBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.ProvinceName = &v
	}
	return nil
}

func (p *OrganizationBean) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.CityID = &v
	}
	return nil
}

func (p *OrganizationBean) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.CityName = &v
	}
	return nil
}

func (p *OrganizationBean) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.AreaID = &v
	}
	return nil
}

func (p *OrganizationBean) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.AreaName = &v
	}
	return nil
}

func (p *OrganizationBean) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *OrganizationBean) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.ResCode = &v
	}
	return nil
}

func (p *OrganizationBean) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.ExlRow = &v
	}
	return nil
}

func (p *OrganizationBean) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.CreationDate = &v
	}
	return nil
}

func (p *OrganizationBean) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.UpdatedDate = &v
	}
	return nil
}

func (p *OrganizationBean) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.ExternalOrg = &v
	}
	return nil
}

func (p *OrganizationBean) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.ChangeVersion = &v
	}
	return nil
}

func (p *OrganizationBean) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.OrgStatus = &v
	}
	return nil
}

func (p *OrganizationBean) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.OrgGroupId = &v
	}
	return nil
}

func (p *OrganizationBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OrganizationBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OrganizationBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgID() {
		if err := oprot.WriteFieldBegin("OrgID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:OrgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OrgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.OrgID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:OrgID: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnterpriseID() {
		if err := oprot.WriteFieldBegin("enterpriseID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enterpriseID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EnterpriseID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enterpriseID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enterpriseID: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgName() {
		if err := oprot.WriteFieldBegin("orgName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orgName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orgName: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgCode() {
		if err := oprot.WriteFieldBegin("orgCode", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:orgCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgCode (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:orgCode: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLeaf() {
		if err := oprot.WriteFieldBegin("leaf", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:leaf: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Leaf)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.leaf (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:leaf: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentOrgID() {
		if err := oprot.WriteFieldBegin("parentOrgID", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:parentOrgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ParentOrgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.parentOrgID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:parentOrgID: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemark() {
		if err := oprot.WriteFieldBegin("remark", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:remark: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Remark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remark (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:remark: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderNum() {
		if err := oprot.WriteFieldBegin("orderNum", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:orderNum: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OrderNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orderNum (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:orderNum: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBranchID() {
		if err := oprot.WriteFieldBegin("branchID", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:branchID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.BranchID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.branchID (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:branchID: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDepartID() {
		if err := oprot.WriteFieldBegin("departID", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:departID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DepartID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.departID (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:departID: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDepartLevel() {
		if err := oprot.WriteFieldBegin("departLevel", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:departLevel: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.DepartLevel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.departLevel (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:departLevel: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubOrgNum() {
		if err := oprot.WriteFieldBegin("subOrgNum", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:subOrgNum: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SubOrgNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subOrgNum (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:subOrgNum: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubUserNum() {
		if err := oprot.WriteFieldBegin("subUserNum", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:subUserNum: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SubUserNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subUserNum (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:subUserNum: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsHidden() {
		if err := oprot.WriteFieldBegin("isHidden", thrift.BYTE, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:isHidden: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.IsHidden)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isHidden (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:isHidden: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetProvinceID() {
		if err := oprot.WriteFieldBegin("provinceID", thrift.I64, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:provinceID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ProvinceID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.provinceID (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:provinceID: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetProvinceName() {
		if err := oprot.WriteFieldBegin("provinceName", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:provinceName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ProvinceName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.provinceName (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:provinceName: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetCityID() {
		if err := oprot.WriteFieldBegin("cityID", thrift.I64, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:cityID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CityID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cityID (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:cityID: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCityName() {
		if err := oprot.WriteFieldBegin("cityName", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:cityName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CityName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cityName (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:cityName: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetAreaID() {
		if err := oprot.WriteFieldBegin("areaID", thrift.I64, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:areaID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AreaID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.areaID (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:areaID: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetAreaName() {
		if err := oprot.WriteFieldBegin("areaName", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:areaName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AreaName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.areaName (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:areaName: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:extend: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetResCode() {
		if err := oprot.WriteFieldBegin("resCode", thrift.I32, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:resCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ResCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resCode (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:resCode: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetExlRow() {
		if err := oprot.WriteFieldBegin("exlRow", thrift.I32, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:exlRow: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ExlRow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.exlRow (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:exlRow: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreationDate() {
		if err := oprot.WriteFieldBegin("creationDate", thrift.I64, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:creationDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreationDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creationDate (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:creationDate: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedDate() {
		if err := oprot.WriteFieldBegin("updatedDate", thrift.I64, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:updatedDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UpdatedDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updatedDate (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:updatedDate: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalOrg() {
		if err := oprot.WriteFieldBegin("externalOrg", thrift.STRING, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:externalOrg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExternalOrg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.externalOrg (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:externalOrg: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetChangeVersion() {
		if err := oprot.WriteFieldBegin("changeVersion", thrift.I64, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:changeVersion: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ChangeVersion)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.changeVersion (27) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:changeVersion: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgStatus() {
		if err := oprot.WriteFieldBegin("orgStatus", thrift.STRING, 28); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:orgStatus: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgStatus (28) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 28:orgStatus: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgGroupId() {
		if err := oprot.WriteFieldBegin("orgGroupId", thrift.I64, 29); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:orgGroupId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OrgGroupId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgGroupId (29) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 29:orgGroupId: ", p), err)
		}
	}
	return err
}

func (p *OrganizationBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrganizationBean(%+v)", *p)
}

// Attributes:
//  - UserID
//  - EnterpriseID
//  - OrgID
//  - RoleID
//  - Enname
//  - Duty
//  - Enmail
//  - Enmobile
//  - Status
//  - OrderNum
//  - NewOrgID_
//  - OrgName
//  - Extend
//  - AccountName
//  - BizStatus
//  - UserHead
//  - Sex
//  - TagIds
type EnterpriseUserBean struct {
	UserID       *int64  `thrift:"userID,1" json:"userID,omitempty"`
	EnterpriseID *int64  `thrift:"enterpriseID,2" json:"enterpriseID,omitempty"`
	OrgID        *int64  `thrift:"orgID,3" json:"orgID,omitempty"`
	RoleID       *int64  `thrift:"roleID,4" json:"roleID,omitempty"`
	Enname       *string `thrift:"Enname,5" json:"Enname,omitempty"`
	Duty         *string `thrift:"duty,6" json:"duty,omitempty"`
	Enmail       *string `thrift:"Enmail,7" json:"Enmail,omitempty"`
	Enmobile     *string `thrift:"Enmobile,8" json:"Enmobile,omitempty"`
	Status       *int8   `thrift:"status,9" json:"status,omitempty"`
	OrderNum     *int64  `thrift:"orderNum,10" json:"orderNum,omitempty"`
	NewOrgID_    *int64  `thrift:"newOrgID,11" json:"newOrgID,omitempty"`
	OrgName      *string `thrift:"orgName,12" json:"orgName,omitempty"`
	Extend       *string `thrift:"extend,13" json:"extend,omitempty"`
	AccountName  *string `thrift:"accountName,14" json:"accountName,omitempty"`
	BizStatus    *int8   `thrift:"bizStatus,15" json:"bizStatus,omitempty"`
	UserHead     *string `thrift:"userHead,16" json:"userHead,omitempty"`
	Sex          *int8   `thrift:"sex,17" json:"sex,omitempty"`
	TagIds       *string `thrift:"tagIds,18" json:"tagIds,omitempty"`
}

func NewEnterpriseUserBean() *EnterpriseUserBean {
	return &EnterpriseUserBean{}
}

var EnterpriseUserBean_UserID_DEFAULT int64

func (p *EnterpriseUserBean) GetUserID() int64 {
	if !p.IsSetUserID() {
		return EnterpriseUserBean_UserID_DEFAULT
	}
	return *p.UserID
}

var EnterpriseUserBean_EnterpriseID_DEFAULT int64

func (p *EnterpriseUserBean) GetEnterpriseID() int64 {
	if !p.IsSetEnterpriseID() {
		return EnterpriseUserBean_EnterpriseID_DEFAULT
	}
	return *p.EnterpriseID
}

var EnterpriseUserBean_OrgID_DEFAULT int64

func (p *EnterpriseUserBean) GetOrgID() int64 {
	if !p.IsSetOrgID() {
		return EnterpriseUserBean_OrgID_DEFAULT
	}
	return *p.OrgID
}

var EnterpriseUserBean_RoleID_DEFAULT int64

func (p *EnterpriseUserBean) GetRoleID() int64 {
	if !p.IsSetRoleID() {
		return EnterpriseUserBean_RoleID_DEFAULT
	}
	return *p.RoleID
}

var EnterpriseUserBean_Enname_DEFAULT string

func (p *EnterpriseUserBean) GetEnname() string {
	if !p.IsSetEnname() {
		return EnterpriseUserBean_Enname_DEFAULT
	}
	return *p.Enname
}

var EnterpriseUserBean_Duty_DEFAULT string

func (p *EnterpriseUserBean) GetDuty() string {
	if !p.IsSetDuty() {
		return EnterpriseUserBean_Duty_DEFAULT
	}
	return *p.Duty
}

var EnterpriseUserBean_Enmail_DEFAULT string

func (p *EnterpriseUserBean) GetEnmail() string {
	if !p.IsSetEnmail() {
		return EnterpriseUserBean_Enmail_DEFAULT
	}
	return *p.Enmail
}

var EnterpriseUserBean_Enmobile_DEFAULT string

func (p *EnterpriseUserBean) GetEnmobile() string {
	if !p.IsSetEnmobile() {
		return EnterpriseUserBean_Enmobile_DEFAULT
	}
	return *p.Enmobile
}

var EnterpriseUserBean_Status_DEFAULT int8

func (p *EnterpriseUserBean) GetStatus() int8 {
	if !p.IsSetStatus() {
		return EnterpriseUserBean_Status_DEFAULT
	}
	return *p.Status
}

var EnterpriseUserBean_OrderNum_DEFAULT int64

func (p *EnterpriseUserBean) GetOrderNum() int64 {
	if !p.IsSetOrderNum() {
		return EnterpriseUserBean_OrderNum_DEFAULT
	}
	return *p.OrderNum
}

var EnterpriseUserBean_NewOrgID__DEFAULT int64

func (p *EnterpriseUserBean) GetNewOrgID_() int64 {
	if !p.IsSetNewOrgID_() {
		return EnterpriseUserBean_NewOrgID__DEFAULT
	}
	return *p.NewOrgID_
}

var EnterpriseUserBean_OrgName_DEFAULT string

func (p *EnterpriseUserBean) GetOrgName() string {
	if !p.IsSetOrgName() {
		return EnterpriseUserBean_OrgName_DEFAULT
	}
	return *p.OrgName
}

var EnterpriseUserBean_Extend_DEFAULT string

func (p *EnterpriseUserBean) GetExtend() string {
	if !p.IsSetExtend() {
		return EnterpriseUserBean_Extend_DEFAULT
	}
	return *p.Extend
}

var EnterpriseUserBean_AccountName_DEFAULT string

func (p *EnterpriseUserBean) GetAccountName() string {
	if !p.IsSetAccountName() {
		return EnterpriseUserBean_AccountName_DEFAULT
	}
	return *p.AccountName
}

var EnterpriseUserBean_BizStatus_DEFAULT int8

func (p *EnterpriseUserBean) GetBizStatus() int8 {
	if !p.IsSetBizStatus() {
		return EnterpriseUserBean_BizStatus_DEFAULT
	}
	return *p.BizStatus
}

var EnterpriseUserBean_UserHead_DEFAULT string

func (p *EnterpriseUserBean) GetUserHead() string {
	if !p.IsSetUserHead() {
		return EnterpriseUserBean_UserHead_DEFAULT
	}
	return *p.UserHead
}

var EnterpriseUserBean_Sex_DEFAULT int8

func (p *EnterpriseUserBean) GetSex() int8 {
	if !p.IsSetSex() {
		return EnterpriseUserBean_Sex_DEFAULT
	}
	return *p.Sex
}

var EnterpriseUserBean_TagIds_DEFAULT string

func (p *EnterpriseUserBean) GetTagIds() string {
	if !p.IsSetTagIds() {
		return EnterpriseUserBean_TagIds_DEFAULT
	}
	return *p.TagIds
}
func (p *EnterpriseUserBean) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *EnterpriseUserBean) IsSetEnterpriseID() bool {
	return p.EnterpriseID != nil
}

func (p *EnterpriseUserBean) IsSetOrgID() bool {
	return p.OrgID != nil
}

func (p *EnterpriseUserBean) IsSetRoleID() bool {
	return p.RoleID != nil
}

func (p *EnterpriseUserBean) IsSetEnname() bool {
	return p.Enname != nil
}

func (p *EnterpriseUserBean) IsSetDuty() bool {
	return p.Duty != nil
}

func (p *EnterpriseUserBean) IsSetEnmail() bool {
	return p.Enmail != nil
}

func (p *EnterpriseUserBean) IsSetEnmobile() bool {
	return p.Enmobile != nil
}

func (p *EnterpriseUserBean) IsSetStatus() bool {
	return p.Status != nil
}

func (p *EnterpriseUserBean) IsSetOrderNum() bool {
	return p.OrderNum != nil
}

func (p *EnterpriseUserBean) IsSetNewOrgID_() bool {
	return p.NewOrgID_ != nil
}

func (p *EnterpriseUserBean) IsSetOrgName() bool {
	return p.OrgName != nil
}

func (p *EnterpriseUserBean) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *EnterpriseUserBean) IsSetAccountName() bool {
	return p.AccountName != nil
}

func (p *EnterpriseUserBean) IsSetBizStatus() bool {
	return p.BizStatus != nil
}

func (p *EnterpriseUserBean) IsSetUserHead() bool {
	return p.UserHead != nil
}

func (p *EnterpriseUserBean) IsSetSex() bool {
	return p.Sex != nil
}

func (p *EnterpriseUserBean) IsSetTagIds() bool {
	return p.TagIds != nil
}

func (p *EnterpriseUserBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EnterpriseUserBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EnterpriseID = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrgID = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RoleID = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Enname = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Duty = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Enmail = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Enmobile = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *EnterpriseUserBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.OrderNum = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.NewOrgID_ = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.OrgName = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.AccountName = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p.BizStatus = &temp
	}
	return nil
}

func (p *EnterpriseUserBean) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.UserHead = &v
	}
	return nil
}

func (p *EnterpriseUserBean) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := int8(v)
		p.Sex = &temp
	}
	return nil
}

func (p *EnterpriseUserBean) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.TagIds = &v
	}
	return nil
}

func (p *EnterpriseUserBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EnterpriseUserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EnterpriseUserBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnterpriseID() {
		if err := oprot.WriteFieldBegin("enterpriseID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enterpriseID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EnterpriseID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enterpriseID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enterpriseID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgID() {
		if err := oprot.WriteFieldBegin("orgID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OrgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orgID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoleID() {
		if err := oprot.WriteFieldBegin("roleID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:roleID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RoleID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roleID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:roleID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnname() {
		if err := oprot.WriteFieldBegin("Enname", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Enname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Enname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Enname (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Enname: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuty() {
		if err := oprot.WriteFieldBegin("duty", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:duty: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Duty)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duty (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:duty: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnmail() {
		if err := oprot.WriteFieldBegin("Enmail", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Enmail: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Enmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Enmail (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Enmail: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnmobile() {
		if err := oprot.WriteFieldBegin("Enmobile", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Enmobile: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Enmobile)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Enmobile (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Enmobile: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderNum() {
		if err := oprot.WriteFieldBegin("orderNum", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:orderNum: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OrderNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orderNum (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:orderNum: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewOrgID_() {
		if err := oprot.WriteFieldBegin("newOrgID", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:newOrgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NewOrgID_)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.newOrgID (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:newOrgID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgName() {
		if err := oprot.WriteFieldBegin("orgName", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:orgName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgName (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:orgName: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:extend: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccountName() {
		if err := oprot.WriteFieldBegin("accountName", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:accountName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AccountName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.accountName (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:accountName: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizStatus() {
		if err := oprot.WriteFieldBegin("bizStatus", thrift.BYTE, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:bizStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.BizStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bizStatus (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:bizStatus: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserHead() {
		if err := oprot.WriteFieldBegin("userHead", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:userHead: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UserHead)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userHead (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:userHead: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSex() {
		if err := oprot.WriteFieldBegin("sex", thrift.BYTE, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:sex: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Sex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sex (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:sex: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagIds() {
		if err := oprot.WriteFieldBegin("tagIds", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:tagIds: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TagIds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tagIds (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:tagIds: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnterpriseUserBean(%+v)", *p)
}

// Attributes:
//  - UserID
//  - TeamID
//  - MaxReadID
//  - MaxUnreadID
type PushMsgCursor struct {
	UserID      int64  `thrift:"userID,1" json:"userID"`
	TeamID      *int64 `thrift:"teamID,2" json:"teamID,omitempty"`
	MaxReadID   int64  `thrift:"maxReadID,3" json:"maxReadID"`
	MaxUnreadID int64  `thrift:"maxUnreadID,4" json:"maxUnreadID"`
}

func NewPushMsgCursor() *PushMsgCursor {
	return &PushMsgCursor{}
}

func (p *PushMsgCursor) GetUserID() int64 {
	return p.UserID
}

var PushMsgCursor_TeamID_DEFAULT int64

func (p *PushMsgCursor) GetTeamID() int64 {
	if !p.IsSetTeamID() {
		return PushMsgCursor_TeamID_DEFAULT
	}
	return *p.TeamID
}

func (p *PushMsgCursor) GetMaxReadID() int64 {
	return p.MaxReadID
}

func (p *PushMsgCursor) GetMaxUnreadID() int64 {
	return p.MaxUnreadID
}
func (p *PushMsgCursor) IsSetTeamID() bool {
	return p.TeamID != nil
}

func (p *PushMsgCursor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PushMsgCursor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *PushMsgCursor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TeamID = &v
	}
	return nil
}

func (p *PushMsgCursor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxReadID = v
	}
	return nil
}

func (p *PushMsgCursor) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxUnreadID = v
	}
	return nil
}

func (p *PushMsgCursor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushMsgCursor"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PushMsgCursor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *PushMsgCursor) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTeamID() {
		if err := oprot.WriteFieldBegin("teamID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:teamID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TeamID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.teamID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:teamID: ", p), err)
		}
	}
	return err
}

func (p *PushMsgCursor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxReadID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxReadID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxReadID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxReadID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxReadID: ", p), err)
	}
	return err
}

func (p *PushMsgCursor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxUnreadID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUnreadID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxUnreadID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxUnreadID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUnreadID: ", p), err)
	}
	return err
}

func (p *PushMsgCursor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushMsgCursor(%+v)", *p)
}

// Attributes:
//  - UserID
//  - TeamID
//  - MsgType
//  - EndMsgID
//  - PageSize
//  - GetType
//  - SDKID
type GetPushMsgsBean struct {
	UserID   int64  `thrift:"userID,1" json:"userID"`
	TeamID   *int64 `thrift:"teamID,2" json:"teamID,omitempty"`
	MsgType  *int8  `thrift:"msgType,3" json:"msgType,omitempty"`
	EndMsgID int64  `thrift:"endMsgID,4" json:"endMsgID"`
	PageSize int16  `thrift:"pageSize,5" json:"pageSize"`
	GetType  int8   `thrift:"getType,6" json:"getType"`
	SDKID    *int64 `thrift:"SDKID,7" json:"SDKID,omitempty"`
}

func NewGetPushMsgsBean() *GetPushMsgsBean {
	return &GetPushMsgsBean{}
}

func (p *GetPushMsgsBean) GetUserID() int64 {
	return p.UserID
}

var GetPushMsgsBean_TeamID_DEFAULT int64

func (p *GetPushMsgsBean) GetTeamID() int64 {
	if !p.IsSetTeamID() {
		return GetPushMsgsBean_TeamID_DEFAULT
	}
	return *p.TeamID
}

var GetPushMsgsBean_MsgType_DEFAULT int8

func (p *GetPushMsgsBean) GetMsgType() int8 {
	if !p.IsSetMsgType() {
		return GetPushMsgsBean_MsgType_DEFAULT
	}
	return *p.MsgType
}

func (p *GetPushMsgsBean) GetEndMsgID() int64 {
	return p.EndMsgID
}

func (p *GetPushMsgsBean) GetPageSize() int16 {
	return p.PageSize
}

func (p *GetPushMsgsBean) GetGetType() int8 {
	return p.GetType
}

var GetPushMsgsBean_SDKID_DEFAULT int64

func (p *GetPushMsgsBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return GetPushMsgsBean_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *GetPushMsgsBean) IsSetTeamID() bool {
	return p.TeamID != nil
}

func (p *GetPushMsgsBean) IsSetMsgType() bool {
	return p.MsgType != nil
}

func (p *GetPushMsgsBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *GetPushMsgsBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetPushMsgsBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *GetPushMsgsBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TeamID = &v
	}
	return nil
}

func (p *GetPushMsgsBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.MsgType = &temp
	}
	return nil
}

func (p *GetPushMsgsBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndMsgID = v
	}
	return nil
}

func (p *GetPushMsgsBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *GetPushMsgsBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.GetType = temp
	}
	return nil
}

func (p *GetPushMsgsBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *GetPushMsgsBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetPushMsgsBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetPushMsgsBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *GetPushMsgsBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTeamID() {
		if err := oprot.WriteFieldBegin("teamID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:teamID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TeamID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.teamID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:teamID: ", p), err)
		}
	}
	return err
}

func (p *GetPushMsgsBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgType() {
		if err := oprot.WriteFieldBegin("msgType", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msgType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.MsgType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.msgType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msgType: ", p), err)
		}
	}
	return err
}

func (p *GetPushMsgsBean) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endMsgID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endMsgID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EndMsgID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endMsgID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endMsgID: ", p), err)
	}
	return err
}

func (p *GetPushMsgsBean) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *GetPushMsgsBean) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getType", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:getType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.GetType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.getType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:getType: ", p), err)
	}
	return err
}

func (p *GetPushMsgsBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SDKID: ", p), err)
		}
	}
	return err
}

func (p *GetPushMsgsBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPushMsgsBean(%+v)", *p)
}

// Attributes:
//  - MsgIDOfLate
//  - MsgList
type PushMsgList struct {
	MsgIDOfLate int64          `thrift:"msgIDOfLate,1" json:"msgIDOfLate"`
	MsgList     []*PushMsgBean `thrift:"msgList,2" json:"msgList"`
}

func NewPushMsgList() *PushMsgList {
	return &PushMsgList{}
}

func (p *PushMsgList) GetMsgIDOfLate() int64 {
	return p.MsgIDOfLate
}

func (p *PushMsgList) GetMsgList() []*PushMsgBean {
	return p.MsgList
}
func (p *PushMsgList) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PushMsgList) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MsgIDOfLate = v
	}
	return nil
}

func (p *PushMsgList) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PushMsgBean, 0, size)
	p.MsgList = tSlice
	for i := 0; i < size; i++ {
		_elem27 := &PushMsgBean{}
		if err := _elem27.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
		}
		p.MsgList = append(p.MsgList, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PushMsgList) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PushMsgList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PushMsgList) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgIDOfLate", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msgIDOfLate: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MsgIDOfLate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msgIDOfLate (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msgIDOfLate: ", p), err)
	}
	return err
}

func (p *PushMsgList) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msgList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MsgList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MsgList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msgList: ", p), err)
	}
	return err
}

func (p *PushMsgList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PushMsgList(%+v)", *p)
}

// Attributes:
//  - UserID
//  - MsgID
//  - TeamID
//  - IsReplenish
//  - VoteItemIDs
//  - VoteItem
//  - SDKID
type VoteBean struct {
	UserID      int64   `thrift:"userID,1" json:"userID"`
	MsgID       int64   `thrift:"msgID,2" json:"msgID"`
	TeamID      *int64  `thrift:"teamID,3" json:"teamID,omitempty"`
	IsReplenish *int8   `thrift:"isReplenish,4" json:"isReplenish,omitempty"`
	VoteItemIDs []int8  `thrift:"voteItemIDs,5" json:"voteItemIDs,omitempty"`
	VoteItem    *string `thrift:"voteItem,6" json:"voteItem,omitempty"`
	SDKID       *int64  `thrift:"SDKID,7" json:"SDKID,omitempty"`
}

func NewVoteBean() *VoteBean {
	return &VoteBean{}
}

func (p *VoteBean) GetUserID() int64 {
	return p.UserID
}

func (p *VoteBean) GetMsgID() int64 {
	return p.MsgID
}

var VoteBean_TeamID_DEFAULT int64

func (p *VoteBean) GetTeamID() int64 {
	if !p.IsSetTeamID() {
		return VoteBean_TeamID_DEFAULT
	}
	return *p.TeamID
}

var VoteBean_IsReplenish_DEFAULT int8

func (p *VoteBean) GetIsReplenish() int8 {
	if !p.IsSetIsReplenish() {
		return VoteBean_IsReplenish_DEFAULT
	}
	return *p.IsReplenish
}

var VoteBean_VoteItemIDs_DEFAULT []int8

func (p *VoteBean) GetVoteItemIDs() []int8 {
	return p.VoteItemIDs
}

var VoteBean_VoteItem_DEFAULT string

func (p *VoteBean) GetVoteItem() string {
	if !p.IsSetVoteItem() {
		return VoteBean_VoteItem_DEFAULT
	}
	return *p.VoteItem
}

var VoteBean_SDKID_DEFAULT int64

func (p *VoteBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return VoteBean_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *VoteBean) IsSetTeamID() bool {
	return p.TeamID != nil
}

func (p *VoteBean) IsSetIsReplenish() bool {
	return p.IsReplenish != nil
}

func (p *VoteBean) IsSetVoteItemIDs() bool {
	return p.VoteItemIDs != nil
}

func (p *VoteBean) IsSetVoteItem() bool {
	return p.VoteItem != nil
}

func (p *VoteBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *VoteBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VoteBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *VoteBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MsgID = v
	}
	return nil
}

func (p *VoteBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TeamID = &v
	}
	return nil
}

func (p *VoteBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.IsReplenish = &temp
	}
	return nil
}

func (p *VoteBean) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int8, 0, size)
	p.VoteItemIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem28 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_elem28 = temp
		}
		p.VoteItemIDs = append(p.VoteItemIDs, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VoteBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.VoteItem = &v
	}
	return nil
}

func (p *VoteBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *VoteBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VoteBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VoteBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *VoteBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msgID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MsgID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msgID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msgID: ", p), err)
	}
	return err
}

func (p *VoteBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTeamID() {
		if err := oprot.WriteFieldBegin("teamID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:teamID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TeamID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.teamID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:teamID: ", p), err)
		}
	}
	return err
}

func (p *VoteBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsReplenish() {
		if err := oprot.WriteFieldBegin("isReplenish", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isReplenish: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.IsReplenish)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isReplenish (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isReplenish: ", p), err)
		}
	}
	return err
}

func (p *VoteBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVoteItemIDs() {
		if err := oprot.WriteFieldBegin("voteItemIDs", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:voteItemIDs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.BYTE, len(p.VoteItemIDs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.VoteItemIDs {
			if err := oprot.WriteByte(int8(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:voteItemIDs: ", p), err)
		}
	}
	return err
}

func (p *VoteBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetVoteItem() {
		if err := oprot.WriteFieldBegin("voteItem", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:voteItem: ", p), err)
		}
		if err := oprot.WriteString(string(*p.VoteItem)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.voteItem (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:voteItem: ", p), err)
		}
	}
	return err
}

func (p *VoteBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SDKID: ", p), err)
		}
	}
	return err
}

func (p *VoteBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VoteBean(%+v)", *p)
}

// Attributes:
//  - UserID
//  - MsgID
//  - TeamID
//  - ReplyContent
//  - ReplyTime
//  - SDKID
type TaskBean struct {
	UserID       int64   `thrift:"userID,1" json:"userID"`
	MsgID        *int64  `thrift:"msgID,2" json:"msgID,omitempty"`
	TeamID       *int64  `thrift:"teamID,3" json:"teamID,omitempty"`
	ReplyContent *string `thrift:"replyContent,4" json:"replyContent,omitempty"`
	ReplyTime    *int64  `thrift:"replyTime,5" json:"replyTime,omitempty"`
	SDKID        *int64  `thrift:"SDKID,6" json:"SDKID,omitempty"`
}

func NewTaskBean() *TaskBean {
	return &TaskBean{}
}

func (p *TaskBean) GetUserID() int64 {
	return p.UserID
}

var TaskBean_MsgID_DEFAULT int64

func (p *TaskBean) GetMsgID() int64 {
	if !p.IsSetMsgID() {
		return TaskBean_MsgID_DEFAULT
	}
	return *p.MsgID
}

var TaskBean_TeamID_DEFAULT int64

func (p *TaskBean) GetTeamID() int64 {
	if !p.IsSetTeamID() {
		return TaskBean_TeamID_DEFAULT
	}
	return *p.TeamID
}

var TaskBean_ReplyContent_DEFAULT string

func (p *TaskBean) GetReplyContent() string {
	if !p.IsSetReplyContent() {
		return TaskBean_ReplyContent_DEFAULT
	}
	return *p.ReplyContent
}

var TaskBean_ReplyTime_DEFAULT int64

func (p *TaskBean) GetReplyTime() int64 {
	if !p.IsSetReplyTime() {
		return TaskBean_ReplyTime_DEFAULT
	}
	return *p.ReplyTime
}

var TaskBean_SDKID_DEFAULT int64

func (p *TaskBean) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return TaskBean_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *TaskBean) IsSetMsgID() bool {
	return p.MsgID != nil
}

func (p *TaskBean) IsSetTeamID() bool {
	return p.TeamID != nil
}

func (p *TaskBean) IsSetReplyContent() bool {
	return p.ReplyContent != nil
}

func (p *TaskBean) IsSetReplyTime() bool {
	return p.ReplyTime != nil
}

func (p *TaskBean) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *TaskBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TaskBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *TaskBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MsgID = &v
	}
	return nil
}

func (p *TaskBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TeamID = &v
	}
	return nil
}

func (p *TaskBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReplyContent = &v
	}
	return nil
}

func (p *TaskBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ReplyTime = &v
	}
	return nil
}

func (p *TaskBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *TaskBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TaskBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *TaskBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgID() {
		if err := oprot.WriteFieldBegin("msgID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.MsgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.msgID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msgID: ", p), err)
		}
	}
	return err
}

func (p *TaskBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTeamID() {
		if err := oprot.WriteFieldBegin("teamID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:teamID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TeamID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.teamID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:teamID: ", p), err)
		}
	}
	return err
}

func (p *TaskBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplyContent() {
		if err := oprot.WriteFieldBegin("replyContent", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:replyContent: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReplyContent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replyContent (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:replyContent: ", p), err)
		}
	}
	return err
}

func (p *TaskBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplyTime() {
		if err := oprot.WriteFieldBegin("replyTime", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:replyTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReplyTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replyTime (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:replyTime: ", p), err)
		}
	}
	return err
}

func (p *TaskBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SDKID: ", p), err)
		}
	}
	return err
}

func (p *TaskBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskBean(%+v)", *p)
}

// Attributes:
//  - SessionID
//  - Sn
//  - Type
//  - Pwd
//  - IP
//  - Port
type ConnectBind struct {
	SessionID int64  `thrift:"sessionID,1" json:"sessionID"`
	Sn        string `thrift:"sn,2" json:"sn"`
	Type      int8   `thrift:"type,3" json:"type"`
	Pwd       string `thrift:"pwd,4" json:"pwd"`
	IP        string `thrift:"ip,5" json:"ip"`
	Port      int32  `thrift:"port,6" json:"port"`
}

func NewConnectBind() *ConnectBind {
	return &ConnectBind{}
}

func (p *ConnectBind) GetSessionID() int64 {
	return p.SessionID
}

func (p *ConnectBind) GetSn() string {
	return p.Sn
}

func (p *ConnectBind) GetType() int8 {
	return p.Type
}

func (p *ConnectBind) GetPwd() string {
	return p.Pwd
}

func (p *ConnectBind) GetIP() string {
	return p.IP
}

func (p *ConnectBind) GetPort() int32 {
	return p.Port
}
func (p *ConnectBind) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConnectBind) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionID = v
	}
	return nil
}

func (p *ConnectBind) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Sn = v
	}
	return nil
}

func (p *ConnectBind) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Type = temp
	}
	return nil
}

func (p *ConnectBind) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Pwd = v
	}
	return nil
}

func (p *ConnectBind) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *ConnectBind) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *ConnectBind) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConnectBind"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConnectBind) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionID: ", p), err)
	}
	return err
}

func (p *ConnectBind) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sn", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sn: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sn (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sn: ", p), err)
	}
	return err
}

func (p *ConnectBind) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *ConnectBind) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pwd: ", p), err)
	}
	if err := oprot.WriteString(string(p.Pwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pwd (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pwd: ", p), err)
	}
	return err
}

func (p *ConnectBind) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ip: ", p), err)
	}
	return err
}

func (p *ConnectBind) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:port: ", p), err)
	}
	return err
}

func (p *ConnectBind) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConnectBind(%+v)", *p)
}

// 应用信息
//
// Attributes:
//  - AppSign
//  - AppName
//  - AppIcon
//  - AppID
//  - AppHomeUrl
//  - EntID
//  - EntName
//  - ConfigItems
//  - AppSecret
//  - AppToken
//  - AppMenus
//  - OpenIDEncoded
//  - SubAccount
//  - AppSubType
//  - Recommend
//  - DefaultInstall
//  - Extend
//  - DeviceTypes
//  - MessageHistoryUrl
//  - MenuOpen
//  - ReplyMenuOpen
//  - AppType
//  - Status
//  - SubOrAppType
//  - AppFunctintroduce
//  - AppDescription
//  - OwnerId
//  - ForceGrant
//  - GrantIntroduce
//  - CSID
type SmallEntAppInfo struct {
	AppSign           string            `thrift:"appSign,1" json:"appSign"`
	AppName           string            `thrift:"appName,2" json:"appName"`
	AppIcon           string            `thrift:"appIcon,3" json:"appIcon"`
	AppID             int64             `thrift:"appID,4" json:"appID"`
	AppHomeUrl        *string           `thrift:"appHomeUrl,5" json:"appHomeUrl,omitempty"`
	EntID             *int64            `thrift:"entID,6" json:"entID,omitempty"`
	EntName           *string           `thrift:"entName,7" json:"entName,omitempty"`
	ConfigItems       map[string]string `thrift:"configItems,8" json:"configItems,omitempty"`
	AppSecret         *string           `thrift:"appSecret,9" json:"appSecret,omitempty"`
	AppToken          *string           `thrift:"appToken,10" json:"appToken,omitempty"`
	AppMenus          *string           `thrift:"appMenus,11" json:"appMenus,omitempty"`
	OpenIDEncoded     *int8             `thrift:"openIDEncoded,12" json:"openIDEncoded,omitempty"`
	SubAccount        *string           `thrift:"subAccount,13" json:"subAccount,omitempty"`
	AppSubType        *int8             `thrift:"appSubType,14" json:"appSubType,omitempty"`
	Recommend         *int8             `thrift:"recommend,15" json:"recommend,omitempty"`
	DefaultInstall    *int8             `thrift:"defaultInstall,16" json:"defaultInstall,omitempty"`
	Extend            *string           `thrift:"extend,17" json:"extend,omitempty"`
	DeviceTypes       *string           `thrift:"deviceTypes,18" json:"deviceTypes,omitempty"`
	MessageHistoryUrl *string           `thrift:"messageHistoryUrl,19" json:"messageHistoryUrl,omitempty"`
	MenuOpen          *string           `thrift:"menuOpen,20" json:"menuOpen,omitempty"`
	ReplyMenuOpen     *string           `thrift:"replyMenuOpen,21" json:"replyMenuOpen,omitempty"`
	AppType           *int8             `thrift:"appType,22" json:"appType,omitempty"`
	Status            *int8             `thrift:"status,23" json:"status,omitempty"`
	SubOrAppType      *int8             `thrift:"subOrAppType,24" json:"subOrAppType,omitempty"`
	AppFunctintroduce *string           `thrift:"appFunctintroduce,25" json:"appFunctintroduce,omitempty"`
	AppDescription    *string           `thrift:"appDescription,26" json:"appDescription,omitempty"`
	OwnerId           *int64            `thrift:"ownerId,27" json:"ownerId,omitempty"`
	ForceGrant        int8              `thrift:"forceGrant,28" json:"forceGrant"`
	GrantIntroduce    string            `thrift:"grantIntroduce,29" json:"grantIntroduce"`
	CSID              int64             `thrift:"CSID,30" json:"CSID"`
}

func NewSmallEntAppInfo() *SmallEntAppInfo {
	return &SmallEntAppInfo{}
}

func (p *SmallEntAppInfo) GetAppSign() string {
	return p.AppSign
}

func (p *SmallEntAppInfo) GetAppName() string {
	return p.AppName
}

func (p *SmallEntAppInfo) GetAppIcon() string {
	return p.AppIcon
}

func (p *SmallEntAppInfo) GetAppID() int64 {
	return p.AppID
}

var SmallEntAppInfo_AppHomeUrl_DEFAULT string

func (p *SmallEntAppInfo) GetAppHomeUrl() string {
	if !p.IsSetAppHomeUrl() {
		return SmallEntAppInfo_AppHomeUrl_DEFAULT
	}
	return *p.AppHomeUrl
}

var SmallEntAppInfo_EntID_DEFAULT int64

func (p *SmallEntAppInfo) GetEntID() int64 {
	if !p.IsSetEntID() {
		return SmallEntAppInfo_EntID_DEFAULT
	}
	return *p.EntID
}

var SmallEntAppInfo_EntName_DEFAULT string

func (p *SmallEntAppInfo) GetEntName() string {
	if !p.IsSetEntName() {
		return SmallEntAppInfo_EntName_DEFAULT
	}
	return *p.EntName
}

var SmallEntAppInfo_ConfigItems_DEFAULT map[string]string

func (p *SmallEntAppInfo) GetConfigItems() map[string]string {
	return p.ConfigItems
}

var SmallEntAppInfo_AppSecret_DEFAULT string

func (p *SmallEntAppInfo) GetAppSecret() string {
	if !p.IsSetAppSecret() {
		return SmallEntAppInfo_AppSecret_DEFAULT
	}
	return *p.AppSecret
}

var SmallEntAppInfo_AppToken_DEFAULT string

func (p *SmallEntAppInfo) GetAppToken() string {
	if !p.IsSetAppToken() {
		return SmallEntAppInfo_AppToken_DEFAULT
	}
	return *p.AppToken
}

var SmallEntAppInfo_AppMenus_DEFAULT string

func (p *SmallEntAppInfo) GetAppMenus() string {
	if !p.IsSetAppMenus() {
		return SmallEntAppInfo_AppMenus_DEFAULT
	}
	return *p.AppMenus
}

var SmallEntAppInfo_OpenIDEncoded_DEFAULT int8

func (p *SmallEntAppInfo) GetOpenIDEncoded() int8 {
	if !p.IsSetOpenIDEncoded() {
		return SmallEntAppInfo_OpenIDEncoded_DEFAULT
	}
	return *p.OpenIDEncoded
}

var SmallEntAppInfo_SubAccount_DEFAULT string

func (p *SmallEntAppInfo) GetSubAccount() string {
	if !p.IsSetSubAccount() {
		return SmallEntAppInfo_SubAccount_DEFAULT
	}
	return *p.SubAccount
}

var SmallEntAppInfo_AppSubType_DEFAULT int8

func (p *SmallEntAppInfo) GetAppSubType() int8 {
	if !p.IsSetAppSubType() {
		return SmallEntAppInfo_AppSubType_DEFAULT
	}
	return *p.AppSubType
}

var SmallEntAppInfo_Recommend_DEFAULT int8

func (p *SmallEntAppInfo) GetRecommend() int8 {
	if !p.IsSetRecommend() {
		return SmallEntAppInfo_Recommend_DEFAULT
	}
	return *p.Recommend
}

var SmallEntAppInfo_DefaultInstall_DEFAULT int8

func (p *SmallEntAppInfo) GetDefaultInstall() int8 {
	if !p.IsSetDefaultInstall() {
		return SmallEntAppInfo_DefaultInstall_DEFAULT
	}
	return *p.DefaultInstall
}

var SmallEntAppInfo_Extend_DEFAULT string

func (p *SmallEntAppInfo) GetExtend() string {
	if !p.IsSetExtend() {
		return SmallEntAppInfo_Extend_DEFAULT
	}
	return *p.Extend
}

var SmallEntAppInfo_DeviceTypes_DEFAULT string

func (p *SmallEntAppInfo) GetDeviceTypes() string {
	if !p.IsSetDeviceTypes() {
		return SmallEntAppInfo_DeviceTypes_DEFAULT
	}
	return *p.DeviceTypes
}

var SmallEntAppInfo_MessageHistoryUrl_DEFAULT string

func (p *SmallEntAppInfo) GetMessageHistoryUrl() string {
	if !p.IsSetMessageHistoryUrl() {
		return SmallEntAppInfo_MessageHistoryUrl_DEFAULT
	}
	return *p.MessageHistoryUrl
}

var SmallEntAppInfo_MenuOpen_DEFAULT string

func (p *SmallEntAppInfo) GetMenuOpen() string {
	if !p.IsSetMenuOpen() {
		return SmallEntAppInfo_MenuOpen_DEFAULT
	}
	return *p.MenuOpen
}

var SmallEntAppInfo_ReplyMenuOpen_DEFAULT string

func (p *SmallEntAppInfo) GetReplyMenuOpen() string {
	if !p.IsSetReplyMenuOpen() {
		return SmallEntAppInfo_ReplyMenuOpen_DEFAULT
	}
	return *p.ReplyMenuOpen
}

var SmallEntAppInfo_AppType_DEFAULT int8

func (p *SmallEntAppInfo) GetAppType() int8 {
	if !p.IsSetAppType() {
		return SmallEntAppInfo_AppType_DEFAULT
	}
	return *p.AppType
}

var SmallEntAppInfo_Status_DEFAULT int8

func (p *SmallEntAppInfo) GetStatus() int8 {
	if !p.IsSetStatus() {
		return SmallEntAppInfo_Status_DEFAULT
	}
	return *p.Status
}

var SmallEntAppInfo_SubOrAppType_DEFAULT int8

func (p *SmallEntAppInfo) GetSubOrAppType() int8 {
	if !p.IsSetSubOrAppType() {
		return SmallEntAppInfo_SubOrAppType_DEFAULT
	}
	return *p.SubOrAppType
}

var SmallEntAppInfo_AppFunctintroduce_DEFAULT string

func (p *SmallEntAppInfo) GetAppFunctintroduce() string {
	if !p.IsSetAppFunctintroduce() {
		return SmallEntAppInfo_AppFunctintroduce_DEFAULT
	}
	return *p.AppFunctintroduce
}

var SmallEntAppInfo_AppDescription_DEFAULT string

func (p *SmallEntAppInfo) GetAppDescription() string {
	if !p.IsSetAppDescription() {
		return SmallEntAppInfo_AppDescription_DEFAULT
	}
	return *p.AppDescription
}

var SmallEntAppInfo_OwnerId_DEFAULT int64

func (p *SmallEntAppInfo) GetOwnerId() int64 {
	if !p.IsSetOwnerId() {
		return SmallEntAppInfo_OwnerId_DEFAULT
	}
	return *p.OwnerId
}

func (p *SmallEntAppInfo) GetForceGrant() int8 {
	return p.ForceGrant
}

func (p *SmallEntAppInfo) GetGrantIntroduce() string {
	return p.GrantIntroduce
}

func (p *SmallEntAppInfo) GetCSID() int64 {
	return p.CSID
}
func (p *SmallEntAppInfo) IsSetAppHomeUrl() bool {
	return p.AppHomeUrl != nil
}

func (p *SmallEntAppInfo) IsSetEntID() bool {
	return p.EntID != nil
}

func (p *SmallEntAppInfo) IsSetEntName() bool {
	return p.EntName != nil
}

func (p *SmallEntAppInfo) IsSetConfigItems() bool {
	return p.ConfigItems != nil
}

func (p *SmallEntAppInfo) IsSetAppSecret() bool {
	return p.AppSecret != nil
}

func (p *SmallEntAppInfo) IsSetAppToken() bool {
	return p.AppToken != nil
}

func (p *SmallEntAppInfo) IsSetAppMenus() bool {
	return p.AppMenus != nil
}

func (p *SmallEntAppInfo) IsSetOpenIDEncoded() bool {
	return p.OpenIDEncoded != nil
}

func (p *SmallEntAppInfo) IsSetSubAccount() bool {
	return p.SubAccount != nil
}

func (p *SmallEntAppInfo) IsSetAppSubType() bool {
	return p.AppSubType != nil
}

func (p *SmallEntAppInfo) IsSetRecommend() bool {
	return p.Recommend != nil
}

func (p *SmallEntAppInfo) IsSetDefaultInstall() bool {
	return p.DefaultInstall != nil
}

func (p *SmallEntAppInfo) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *SmallEntAppInfo) IsSetDeviceTypes() bool {
	return p.DeviceTypes != nil
}

func (p *SmallEntAppInfo) IsSetMessageHistoryUrl() bool {
	return p.MessageHistoryUrl != nil
}

func (p *SmallEntAppInfo) IsSetMenuOpen() bool {
	return p.MenuOpen != nil
}

func (p *SmallEntAppInfo) IsSetReplyMenuOpen() bool {
	return p.ReplyMenuOpen != nil
}

func (p *SmallEntAppInfo) IsSetAppType() bool {
	return p.AppType != nil
}

func (p *SmallEntAppInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *SmallEntAppInfo) IsSetSubOrAppType() bool {
	return p.SubOrAppType != nil
}

func (p *SmallEntAppInfo) IsSetAppFunctintroduce() bool {
	return p.AppFunctintroduce != nil
}

func (p *SmallEntAppInfo) IsSetAppDescription() bool {
	return p.AppDescription != nil
}

func (p *SmallEntAppInfo) IsSetOwnerId() bool {
	return p.OwnerId != nil
}

func (p *SmallEntAppInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallEntAppInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppSign = v
	}
	return nil
}

func (p *SmallEntAppInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *SmallEntAppInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppIcon = v
	}
	return nil
}

func (p *SmallEntAppInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *SmallEntAppInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.AppHomeUrl = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.EntID = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.EntName = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ConfigItems = tMap
	for i := 0; i < size; i++ {
		var _key29 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key29 = v
		}
		var _val30 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val30 = v
		}
		p.ConfigItems[_key29] = _val30
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SmallEntAppInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.AppSecret = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.AppToken = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.AppMenus = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.OpenIDEncoded = &temp
	}
	return nil
}

func (p *SmallEntAppInfo) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.SubAccount = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := int8(v)
		p.AppSubType = &temp
	}
	return nil
}

func (p *SmallEntAppInfo) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p.Recommend = &temp
	}
	return nil
}

func (p *SmallEntAppInfo) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		temp := int8(v)
		p.DefaultInstall = &temp
	}
	return nil
}

func (p *SmallEntAppInfo) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.DeviceTypes = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.MessageHistoryUrl = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.MenuOpen = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.ReplyMenuOpen = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := int8(v)
		p.AppType = &temp
	}
	return nil
}

func (p *SmallEntAppInfo) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *SmallEntAppInfo) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		temp := int8(v)
		p.SubOrAppType = &temp
	}
	return nil
}

func (p *SmallEntAppInfo) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.AppFunctintroduce = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.AppDescription = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.OwnerId = &v
	}
	return nil
}

func (p *SmallEntAppInfo) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		temp := int8(v)
		p.ForceGrant = temp
	}
	return nil
}

func (p *SmallEntAppInfo) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.GrantIntroduce = v
	}
	return nil
}

func (p *SmallEntAppInfo) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.CSID = v
	}
	return nil
}

func (p *SmallEntAppInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallEntAppInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallEntAppInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appSign", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appSign: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppSign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appSign (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appSign: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appName: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appIcon", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appIcon: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppIcon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appIcon (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appIcon: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appID: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppHomeUrl() {
		if err := oprot.WriteFieldBegin("appHomeUrl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:appHomeUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppHomeUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appHomeUrl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:appHomeUrl: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntID() {
		if err := oprot.WriteFieldBegin("entID", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:entID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EntID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:entID: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntName() {
		if err := oprot.WriteFieldBegin("entName", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:entName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entName (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:entName: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigItems() {
		if err := oprot.WriteFieldBegin("configItems", thrift.MAP, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:configItems: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ConfigItems)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ConfigItems {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:configItems: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppSecret() {
		if err := oprot.WriteFieldBegin("appSecret", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:appSecret: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppSecret)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appSecret (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:appSecret: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppToken() {
		if err := oprot.WriteFieldBegin("appToken", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:appToken: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppToken)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appToken (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:appToken: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppMenus() {
		if err := oprot.WriteFieldBegin("appMenus", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:appMenus: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppMenus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appMenus (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:appMenus: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetOpenIDEncoded() {
		if err := oprot.WriteFieldBegin("openIDEncoded", thrift.BYTE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:openIDEncoded: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.OpenIDEncoded)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.openIDEncoded (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:openIDEncoded: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubAccount() {
		if err := oprot.WriteFieldBegin("subAccount", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:subAccount: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SubAccount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subAccount (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:subAccount: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppSubType() {
		if err := oprot.WriteFieldBegin("appSubType", thrift.BYTE, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:appSubType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.AppSubType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appSubType (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:appSubType: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecommend() {
		if err := oprot.WriteFieldBegin("recommend", thrift.BYTE, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:recommend: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Recommend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recommend (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:recommend: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultInstall() {
		if err := oprot.WriteFieldBegin("defaultInstall", thrift.BYTE, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:defaultInstall: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.DefaultInstall)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultInstall (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:defaultInstall: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:extend: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeviceTypes() {
		if err := oprot.WriteFieldBegin("deviceTypes", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:deviceTypes: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DeviceTypes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deviceTypes (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:deviceTypes: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageHistoryUrl() {
		if err := oprot.WriteFieldBegin("messageHistoryUrl", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:messageHistoryUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MessageHistoryUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.messageHistoryUrl (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:messageHistoryUrl: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetMenuOpen() {
		if err := oprot.WriteFieldBegin("menuOpen", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:menuOpen: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MenuOpen)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.menuOpen (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:menuOpen: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetReplyMenuOpen() {
		if err := oprot.WriteFieldBegin("replyMenuOpen", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:replyMenuOpen: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReplyMenuOpen)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.replyMenuOpen (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:replyMenuOpen: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppType() {
		if err := oprot.WriteFieldBegin("appType", thrift.BYTE, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:appType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.AppType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appType (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:appType: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:status: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubOrAppType() {
		if err := oprot.WriteFieldBegin("subOrAppType", thrift.BYTE, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:subOrAppType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.SubOrAppType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subOrAppType (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:subOrAppType: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppFunctintroduce() {
		if err := oprot.WriteFieldBegin("appFunctintroduce", thrift.STRING, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:appFunctintroduce: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppFunctintroduce)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appFunctintroduce (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:appFunctintroduce: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppDescription() {
		if err := oprot.WriteFieldBegin("appDescription", thrift.STRING, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:appDescription: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppDescription)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appDescription (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:appDescription: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerId() {
		if err := oprot.WriteFieldBegin("ownerId", thrift.I64, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:ownerId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OwnerId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ownerId (27) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:ownerId: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfo) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("forceGrant", thrift.BYTE, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:forceGrant: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.ForceGrant)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.forceGrant (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:forceGrant: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfo) writeField29(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantIntroduce", thrift.STRING, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:grantIntroduce: ", p), err)
	}
	if err := oprot.WriteString(string(p.GrantIntroduce)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.grantIntroduce (29) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:grantIntroduce: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfo) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CSID", thrift.I64, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:CSID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CSID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CSID (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:CSID: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallEntAppInfo(%+v)", *p)
}

// 应用市场分页查询结果
//
// Attributes:
//  - Apps
//  - TotalCount
//  - TotalPage
type AppMarketPage struct {
	Apps       []*SmallEntAppInfo `thrift:"apps,1" json:"apps"`
	TotalCount int64              `thrift:"totalCount,2" json:"totalCount"`
	TotalPage  int64              `thrift:"totalPage,3" json:"totalPage"`
}

func NewAppMarketPage() *AppMarketPage {
	return &AppMarketPage{}
}

func (p *AppMarketPage) GetApps() []*SmallEntAppInfo {
	return p.Apps
}

func (p *AppMarketPage) GetTotalCount() int64 {
	return p.TotalCount
}

func (p *AppMarketPage) GetTotalPage() int64 {
	return p.TotalPage
}
func (p *AppMarketPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AppMarketPage) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SmallEntAppInfo, 0, size)
	p.Apps = tSlice
	for i := 0; i < size; i++ {
		_elem31 := &SmallEntAppInfo{}
		if err := _elem31.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
		}
		p.Apps = append(p.Apps, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AppMarketPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *AppMarketPage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *AppMarketPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AppMarketPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AppMarketPage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("apps", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:apps: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Apps)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Apps {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:apps: ", p), err)
	}
	return err
}

func (p *AppMarketPage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalCount", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalCount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalCount: ", p), err)
	}
	return err
}

func (p *AppMarketPage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPage: ", p), err)
	}
	return err
}

func (p *AppMarketPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppMarketPage(%+v)", *p)
}

// 应用市场分页查询条件
//
// Attributes:
//  - PageNum
//  - PageSize
//  - AppName
type AppMarketQuery struct {
	PageNum  int32  `thrift:"pageNum,1" json:"pageNum"`
	PageSize int32  `thrift:"pageSize,2" json:"pageSize"`
	AppName  string `thrift:"appName,3" json:"appName"`
}

func NewAppMarketQuery() *AppMarketQuery {
	return &AppMarketQuery{}
}

func (p *AppMarketQuery) GetPageNum() int32 {
	return p.PageNum
}

func (p *AppMarketQuery) GetPageSize() int32 {
	return p.PageSize
}

func (p *AppMarketQuery) GetAppName() string {
	return p.AppName
}
func (p *AppMarketQuery) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AppMarketQuery) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *AppMarketQuery) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *AppMarketQuery) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *AppMarketQuery) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AppMarketQuery"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AppMarketQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageNum (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNum: ", p), err)
	}
	return err
}

func (p *AppMarketQuery) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
	}
	return err
}

func (p *AppMarketQuery) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appName: ", p), err)
	}
	return err
}

func (p *AppMarketQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppMarketQuery(%+v)", *p)
}

// Attributes:
//  - DelayMsgID
//  - SendUserID
//  - ReceiverIDs
//  - SendTime
//  - Message
//  - MessageType
//  - Format
//  - MsgProperties
//  - ActiveType
//  - Status
//  - CreateTime
type DelayMessage struct {
	DelayMsgID    *int64  `thrift:"delayMsgID,1" json:"delayMsgID,omitempty"`
	SendUserID    *int64  `thrift:"sendUserID,2" json:"sendUserID,omitempty"`
	ReceiverIDs   string  `thrift:"receiverIDs,3" json:"receiverIDs"`
	SendTime      int64   `thrift:"sendTime,4" json:"sendTime"`
	Message       *string `thrift:"message,5" json:"message,omitempty"`
	MessageType   int8    `thrift:"messageType,6" json:"messageType"`
	Format        string  `thrift:"format,7" json:"format"`
	MsgProperties *string `thrift:"msgProperties,8" json:"msgProperties,omitempty"`
	ActiveType    *int8   `thrift:"activeType,9" json:"activeType,omitempty"`
	Status        *int8   `thrift:"status,10" json:"status,omitempty"`
	CreateTime    *int64  `thrift:"createTime,11" json:"createTime,omitempty"`
}

func NewDelayMessage() *DelayMessage {
	return &DelayMessage{}
}

var DelayMessage_DelayMsgID_DEFAULT int64

func (p *DelayMessage) GetDelayMsgID() int64 {
	if !p.IsSetDelayMsgID() {
		return DelayMessage_DelayMsgID_DEFAULT
	}
	return *p.DelayMsgID
}

var DelayMessage_SendUserID_DEFAULT int64

func (p *DelayMessage) GetSendUserID() int64 {
	if !p.IsSetSendUserID() {
		return DelayMessage_SendUserID_DEFAULT
	}
	return *p.SendUserID
}

func (p *DelayMessage) GetReceiverIDs() string {
	return p.ReceiverIDs
}

func (p *DelayMessage) GetSendTime() int64 {
	return p.SendTime
}

var DelayMessage_Message_DEFAULT string

func (p *DelayMessage) GetMessage() string {
	if !p.IsSetMessage() {
		return DelayMessage_Message_DEFAULT
	}
	return *p.Message
}

func (p *DelayMessage) GetMessageType() int8 {
	return p.MessageType
}

func (p *DelayMessage) GetFormat() string {
	return p.Format
}

var DelayMessage_MsgProperties_DEFAULT string

func (p *DelayMessage) GetMsgProperties() string {
	if !p.IsSetMsgProperties() {
		return DelayMessage_MsgProperties_DEFAULT
	}
	return *p.MsgProperties
}

var DelayMessage_ActiveType_DEFAULT int8

func (p *DelayMessage) GetActiveType() int8 {
	if !p.IsSetActiveType() {
		return DelayMessage_ActiveType_DEFAULT
	}
	return *p.ActiveType
}

var DelayMessage_Status_DEFAULT int8

func (p *DelayMessage) GetStatus() int8 {
	if !p.IsSetStatus() {
		return DelayMessage_Status_DEFAULT
	}
	return *p.Status
}

var DelayMessage_CreateTime_DEFAULT int64

func (p *DelayMessage) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return DelayMessage_CreateTime_DEFAULT
	}
	return *p.CreateTime
}
func (p *DelayMessage) IsSetDelayMsgID() bool {
	return p.DelayMsgID != nil
}

func (p *DelayMessage) IsSetSendUserID() bool {
	return p.SendUserID != nil
}

func (p *DelayMessage) IsSetMessage() bool {
	return p.Message != nil
}

func (p *DelayMessage) IsSetMsgProperties() bool {
	return p.MsgProperties != nil
}

func (p *DelayMessage) IsSetActiveType() bool {
	return p.ActiveType != nil
}

func (p *DelayMessage) IsSetStatus() bool {
	return p.Status != nil
}

func (p *DelayMessage) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *DelayMessage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DelayMessage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DelayMsgID = &v
	}
	return nil
}

func (p *DelayMessage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SendUserID = &v
	}
	return nil
}

func (p *DelayMessage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ReceiverIDs = v
	}
	return nil
}

func (p *DelayMessage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SendTime = v
	}
	return nil
}

func (p *DelayMessage) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *DelayMessage) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.MessageType = temp
	}
	return nil
}

func (p *DelayMessage) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Format = v
	}
	return nil
}

func (p *DelayMessage) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MsgProperties = &v
	}
	return nil
}

func (p *DelayMessage) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.ActiveType = &temp
	}
	return nil
}

func (p *DelayMessage) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *DelayMessage) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *DelayMessage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DelayMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DelayMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDelayMsgID() {
		if err := oprot.WriteFieldBegin("delayMsgID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:delayMsgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.DelayMsgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.delayMsgID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:delayMsgID: ", p), err)
		}
	}
	return err
}

func (p *DelayMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSendUserID() {
		if err := oprot.WriteFieldBegin("sendUserID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sendUserID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SendUserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sendUserID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sendUserID: ", p), err)
		}
	}
	return err
}

func (p *DelayMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverIDs", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:receiverIDs: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReceiverIDs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receiverIDs (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:receiverIDs: ", p), err)
	}
	return err
}

func (p *DelayMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sendTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SendTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sendTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sendTime: ", p), err)
	}
	return err
}

func (p *DelayMessage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:message: ", p), err)
		}
	}
	return err
}

func (p *DelayMessage) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageType", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:messageType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.MessageType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:messageType: ", p), err)
	}
	return err
}

func (p *DelayMessage) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("format", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:format: ", p), err)
	}
	if err := oprot.WriteString(string(p.Format)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.format (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:format: ", p), err)
	}
	return err
}

func (p *DelayMessage) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsgProperties() {
		if err := oprot.WriteFieldBegin("msgProperties", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:msgProperties: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MsgProperties)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.msgProperties (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:msgProperties: ", p), err)
		}
	}
	return err
}

func (p *DelayMessage) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveType() {
		if err := oprot.WriteFieldBegin("activeType", thrift.BYTE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:activeType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ActiveType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.activeType (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:activeType: ", p), err)
		}
	}
	return err
}

func (p *DelayMessage) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err)
		}
	}
	return err
}

func (p *DelayMessage) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:createTime: ", p), err)
		}
	}
	return err
}

func (p *DelayMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelayMessage(%+v)", *p)
}

// 共用返回信息
//
// Attributes:
//  - Code
//  - Message
//  - Result_
//  - Result2
type Result_ struct {
	Code    int32   `thrift:"code,1" json:"code"`
	Message *string `thrift:"message,2" json:"message,omitempty"`
	Result_ *int64  `thrift:"result,3" json:"result,omitempty"`
	Result2 *int64  `thrift:"result2,4" json:"result2,omitempty"`
}

func NewResult_() *Result_ {
	return &Result_{}
}

func (p *Result_) GetCode() int32 {
	return p.Code
}

var Result__Message_DEFAULT string

func (p *Result_) GetMessage() string {
	if !p.IsSetMessage() {
		return Result__Message_DEFAULT
	}
	return *p.Message
}

var Result__Result__DEFAULT int64

func (p *Result_) GetResult_() int64 {
	if !p.IsSetResult_() {
		return Result__Result__DEFAULT
	}
	return *p.Result_
}

var Result__Result2_DEFAULT int64

func (p *Result_) GetResult2() int64 {
	if !p.IsSetResult2() {
		return Result__Result2_DEFAULT
	}
	return *p.Result2
}
func (p *Result_) IsSetMessage() bool {
	return p.Message != nil
}

func (p *Result_) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *Result_) IsSetResult2() bool {
	return p.Result2 != nil
}

func (p *Result_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Result_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *Result_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *Result_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Result_ = &v
	}
	return nil
}

func (p *Result_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Result2 = &v
	}
	return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *Result_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err := oprot.WriteFieldBegin("result", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Result_)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.result (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err)
		}
	}
	return err
}

func (p *Result_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult2() {
		if err := oprot.WriteFieldBegin("result2", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:result2: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Result2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.result2 (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:result2: ", p), err)
		}
	}
	return err
}

func (p *Result_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result_(%+v)", *p)
}

// 分享设置选项
//
// Attributes:
//  - ShareType: 1:不允许他看我的分享，2：不看他的分享
//  - TargetUserID: 目标用户ID
//  - SDKID
type ShareOption struct {
	ShareType    int8   `thrift:"shareType,1" json:"shareType"`
	TargetUserID int64  `thrift:"targetUserID,2" json:"targetUserID"`
	SDKID        *int64 `thrift:"SDKID,3" json:"SDKID,omitempty"`
}

func NewShareOption() *ShareOption {
	return &ShareOption{}
}

func (p *ShareOption) GetShareType() int8 {
	return p.ShareType
}

func (p *ShareOption) GetTargetUserID() int64 {
	return p.TargetUserID
}

var ShareOption_SDKID_DEFAULT int64

func (p *ShareOption) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return ShareOption_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *ShareOption) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *ShareOption) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ShareOption) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.ShareType = temp
	}
	return nil
}

func (p *ShareOption) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TargetUserID = v
	}
	return nil
}

func (p *ShareOption) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *ShareOption) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShareOption"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ShareOption) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shareType", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shareType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.ShareType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shareType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shareType: ", p), err)
	}
	return err
}

func (p *ShareOption) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetUserID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targetUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TargetUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetUserID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targetUserID: ", p), err)
	}
	return err
}

func (p *ShareOption) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SDKID: ", p), err)
		}
	}
	return err
}

func (p *ShareOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShareOption(%+v)", *p)
}

// 个人资料开关
//
// Attributes:
//  - SwitchType: 开关类型：1：生日 2：电话 3：邮件 4：好友验证方式 5：V标(好友，群)提醒模式 6：@相关人提醒模式 7：全局通知消息内容模式
//  - Value: * switchType: 开关类型 1：生日 2：电话 3：邮件, value: 1：所有人可见 2：仅好友可见 3：仅自己可见，默认1
//    *  4：好友验证方式, value: 1：需要验证信息,2:不允许任何人添加,3:允许任何人添加，默认1
//    *	5：V标(好友，群)提醒模式, value: 1:表示始终有声音提醒，2：表示始终无声音提醒 3:不始终提醒，默认1
//    *	6：@相关人提醒模式, value: 1:表示始终有声音提醒，2：表示始终无声音提醒 3:不始终提醒，默认1
//    *  7：全局通知消息内容模式, value: 1:通知详情，2：通知源，隐藏内容 3:完全隐藏，默认2
//  - SDKID
type PersonalDataSwitch struct {
	SwitchType int8   `thrift:"switchType,1" json:"switchType"`
	Value      *int8  `thrift:"value,2" json:"value,omitempty"`
	SDKID      *int64 `thrift:"SDKID,3" json:"SDKID,omitempty"`
}

func NewPersonalDataSwitch() *PersonalDataSwitch {
	return &PersonalDataSwitch{}
}

func (p *PersonalDataSwitch) GetSwitchType() int8 {
	return p.SwitchType
}

var PersonalDataSwitch_Value_DEFAULT int8

func (p *PersonalDataSwitch) GetValue() int8 {
	if !p.IsSetValue() {
		return PersonalDataSwitch_Value_DEFAULT
	}
	return *p.Value
}

var PersonalDataSwitch_SDKID_DEFAULT int64

func (p *PersonalDataSwitch) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return PersonalDataSwitch_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *PersonalDataSwitch) IsSetValue() bool {
	return p.Value != nil
}

func (p *PersonalDataSwitch) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *PersonalDataSwitch) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PersonalDataSwitch) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.SwitchType = temp
	}
	return nil
}

func (p *PersonalDataSwitch) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Value = &temp
	}
	return nil
}

func (p *PersonalDataSwitch) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *PersonalDataSwitch) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PersonalDataSwitch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PersonalDataSwitch) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("switchType", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:switchType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.SwitchType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.switchType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:switchType: ", p), err)
	}
	return err
}

func (p *PersonalDataSwitch) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
		}
	}
	return err
}

func (p *PersonalDataSwitch) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SDKID: ", p), err)
		}
	}
	return err
}

func (p *PersonalDataSwitch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonalDataSwitch(%+v)", *p)
}

// 群文件
//
// Attributes:
//  - FileID: 文件ID（用的消息ID）
//  - GroupID: 群ID
//  - UserID: 上传者ID
//  - Page: 页码
//  - FileName: 文件名
//  - FileUrl: 文件URL
//  - FileSize: 文件大小
//  - IsEncrypt: 是否加密，1：加密
//  - UploadTime: 文件上传时间
//  - SecretKey: 密钥
//  - SDKID: SDKID
//  - FileTerm: 文件期限: 1:临时,2:永久
type GroupFile struct {
	FileID     *int64  `thrift:"fileID,1" json:"fileID,omitempty"`
	GroupID    int64   `thrift:"groupID,2" json:"groupID"`
	UserID     int64   `thrift:"userID,3" json:"userID"`
	Page       *int16  `thrift:"page,4" json:"page,omitempty"`
	FileName   *string `thrift:"fileName,5" json:"fileName,omitempty"`
	FileUrl    string  `thrift:"fileUrl,6" json:"fileUrl"`
	FileSize   *int64  `thrift:"fileSize,7" json:"fileSize,omitempty"`
	IsEncrypt  *int32  `thrift:"isEncrypt,8" json:"isEncrypt,omitempty"`
	UploadTime *int64  `thrift:"uploadTime,9" json:"uploadTime,omitempty"`
	SecretKey  *string `thrift:"secretKey,10" json:"secretKey,omitempty"`
	SDKID      *int64  `thrift:"SDKID,11" json:"SDKID,omitempty"`
	FileTerm   int8    `thrift:"fileTerm,12" json:"fileTerm"`
}

func NewGroupFile() *GroupFile {
	return &GroupFile{}
}

var GroupFile_FileID_DEFAULT int64

func (p *GroupFile) GetFileID() int64 {
	if !p.IsSetFileID() {
		return GroupFile_FileID_DEFAULT
	}
	return *p.FileID
}

func (p *GroupFile) GetGroupID() int64 {
	return p.GroupID
}

func (p *GroupFile) GetUserID() int64 {
	return p.UserID
}

var GroupFile_Page_DEFAULT int16

func (p *GroupFile) GetPage() int16 {
	if !p.IsSetPage() {
		return GroupFile_Page_DEFAULT
	}
	return *p.Page
}

var GroupFile_FileName_DEFAULT string

func (p *GroupFile) GetFileName() string {
	if !p.IsSetFileName() {
		return GroupFile_FileName_DEFAULT
	}
	return *p.FileName
}

func (p *GroupFile) GetFileUrl() string {
	return p.FileUrl
}

var GroupFile_FileSize_DEFAULT int64

func (p *GroupFile) GetFileSize() int64 {
	if !p.IsSetFileSize() {
		return GroupFile_FileSize_DEFAULT
	}
	return *p.FileSize
}

var GroupFile_IsEncrypt_DEFAULT int32

func (p *GroupFile) GetIsEncrypt() int32 {
	if !p.IsSetIsEncrypt() {
		return GroupFile_IsEncrypt_DEFAULT
	}
	return *p.IsEncrypt
}

var GroupFile_UploadTime_DEFAULT int64

func (p *GroupFile) GetUploadTime() int64 {
	if !p.IsSetUploadTime() {
		return GroupFile_UploadTime_DEFAULT
	}
	return *p.UploadTime
}

var GroupFile_SecretKey_DEFAULT string

func (p *GroupFile) GetSecretKey() string {
	if !p.IsSetSecretKey() {
		return GroupFile_SecretKey_DEFAULT
	}
	return *p.SecretKey
}

var GroupFile_SDKID_DEFAULT int64

func (p *GroupFile) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return GroupFile_SDKID_DEFAULT
	}
	return *p.SDKID
}

func (p *GroupFile) GetFileTerm() int8 {
	return p.FileTerm
}
func (p *GroupFile) IsSetFileID() bool {
	return p.FileID != nil
}

func (p *GroupFile) IsSetPage() bool {
	return p.Page != nil
}

func (p *GroupFile) IsSetFileName() bool {
	return p.FileName != nil
}

func (p *GroupFile) IsSetFileSize() bool {
	return p.FileSize != nil
}

func (p *GroupFile) IsSetIsEncrypt() bool {
	return p.IsEncrypt != nil
}

func (p *GroupFile) IsSetUploadTime() bool {
	return p.UploadTime != nil
}

func (p *GroupFile) IsSetSecretKey() bool {
	return p.SecretKey != nil
}

func (p *GroupFile) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *GroupFile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupFile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FileID = &v
	}
	return nil
}

func (p *GroupFile) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupID = v
	}
	return nil
}

func (p *GroupFile) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *GroupFile) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Page = &v
	}
	return nil
}

func (p *GroupFile) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FileName = &v
	}
	return nil
}

func (p *GroupFile) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.FileUrl = v
	}
	return nil
}

func (p *GroupFile) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.FileSize = &v
	}
	return nil
}

func (p *GroupFile) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IsEncrypt = &v
	}
	return nil
}

func (p *GroupFile) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.UploadTime = &v
	}
	return nil
}

func (p *GroupFile) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SecretKey = &v
	}
	return nil
}

func (p *GroupFile) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *GroupFile) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.FileTerm = temp
	}
	return nil
}

func (p *GroupFile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupFile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupFile) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileID() {
		if err := oprot.WriteFieldBegin("fileID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FileID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileID: ", p), err)
		}
	}
	return err
}

func (p *GroupFile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupID: ", p), err)
	}
	return err
}

func (p *GroupFile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userID: ", p), err)
	}
	return err
}

func (p *GroupFile) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPage() {
		if err := oprot.WriteFieldBegin("page", thrift.I16, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:page: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Page)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.page (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:page: ", p), err)
		}
	}
	return err
}

func (p *GroupFile) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileName() {
		if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fileName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FileName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileName (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fileName: ", p), err)
		}
	}
	return err
}

func (p *GroupFile) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileUrl", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fileUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileUrl (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fileUrl: ", p), err)
	}
	return err
}

func (p *GroupFile) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fileSize: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FileSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileSize (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fileSize: ", p), err)
		}
	}
	return err
}

func (p *GroupFile) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsEncrypt() {
		if err := oprot.WriteFieldBegin("isEncrypt", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isEncrypt: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.IsEncrypt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isEncrypt (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isEncrypt: ", p), err)
		}
	}
	return err
}

func (p *GroupFile) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadTime() {
		if err := oprot.WriteFieldBegin("uploadTime", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:uploadTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UploadTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploadTime (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:uploadTime: ", p), err)
		}
	}
	return err
}

func (p *GroupFile) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretKey() {
		if err := oprot.WriteFieldBegin("secretKey", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:secretKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SecretKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secretKey (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:secretKey: ", p), err)
		}
	}
	return err
}

func (p *GroupFile) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:SDKID: ", p), err)
		}
	}
	return err
}

func (p *GroupFile) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileTerm", thrift.BYTE, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fileTerm: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.FileTerm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileTerm (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fileTerm: ", p), err)
	}
	return err
}

func (p *GroupFile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupFile(%+v)", *p)
}

// 单聊文件
//
// Attributes:
//  - FileID: 文件ID（用的消息ID）
//  - SendUserID: 发送者ID
//  - ReceUserID: 接收者ID
//  - FileName: 文件名
//  - FileUrl: 文件URL
//  - FileSize: 文件大小
//  - IsEncrypt: 是否加密，1：加密
//  - UploadTime: 文件上传时间
//  - SecretKey: 密钥
//  - SDKID: SDKID
type SingleChatFile struct {
	FileID     int64   `thrift:"fileID,1" json:"fileID"`
	SendUserID int64   `thrift:"sendUserID,2" json:"sendUserID"`
	ReceUserID int64   `thrift:"receUserID,3" json:"receUserID"`
	FileName   *string `thrift:"fileName,4" json:"fileName,omitempty"`
	FileUrl    *string `thrift:"fileUrl,5" json:"fileUrl,omitempty"`
	FileSize   *int64  `thrift:"fileSize,6" json:"fileSize,omitempty"`
	IsEncrypt  *int32  `thrift:"isEncrypt,7" json:"isEncrypt,omitempty"`
	UploadTime *int64  `thrift:"uploadTime,8" json:"uploadTime,omitempty"`
	SecretKey  *string `thrift:"secretKey,9" json:"secretKey,omitempty"`
	SDKID      int64   `thrift:"SDKID,10" json:"SDKID"`
}

func NewSingleChatFile() *SingleChatFile {
	return &SingleChatFile{}
}

func (p *SingleChatFile) GetFileID() int64 {
	return p.FileID
}

func (p *SingleChatFile) GetSendUserID() int64 {
	return p.SendUserID
}

func (p *SingleChatFile) GetReceUserID() int64 {
	return p.ReceUserID
}

var SingleChatFile_FileName_DEFAULT string

func (p *SingleChatFile) GetFileName() string {
	if !p.IsSetFileName() {
		return SingleChatFile_FileName_DEFAULT
	}
	return *p.FileName
}

var SingleChatFile_FileUrl_DEFAULT string

func (p *SingleChatFile) GetFileUrl() string {
	if !p.IsSetFileUrl() {
		return SingleChatFile_FileUrl_DEFAULT
	}
	return *p.FileUrl
}

var SingleChatFile_FileSize_DEFAULT int64

func (p *SingleChatFile) GetFileSize() int64 {
	if !p.IsSetFileSize() {
		return SingleChatFile_FileSize_DEFAULT
	}
	return *p.FileSize
}

var SingleChatFile_IsEncrypt_DEFAULT int32

func (p *SingleChatFile) GetIsEncrypt() int32 {
	if !p.IsSetIsEncrypt() {
		return SingleChatFile_IsEncrypt_DEFAULT
	}
	return *p.IsEncrypt
}

var SingleChatFile_UploadTime_DEFAULT int64

func (p *SingleChatFile) GetUploadTime() int64 {
	if !p.IsSetUploadTime() {
		return SingleChatFile_UploadTime_DEFAULT
	}
	return *p.UploadTime
}

var SingleChatFile_SecretKey_DEFAULT string

func (p *SingleChatFile) GetSecretKey() string {
	if !p.IsSetSecretKey() {
		return SingleChatFile_SecretKey_DEFAULT
	}
	return *p.SecretKey
}

func (p *SingleChatFile) GetSDKID() int64 {
	return p.SDKID
}
func (p *SingleChatFile) IsSetFileName() bool {
	return p.FileName != nil
}

func (p *SingleChatFile) IsSetFileUrl() bool {
	return p.FileUrl != nil
}

func (p *SingleChatFile) IsSetFileSize() bool {
	return p.FileSize != nil
}

func (p *SingleChatFile) IsSetIsEncrypt() bool {
	return p.IsEncrypt != nil
}

func (p *SingleChatFile) IsSetUploadTime() bool {
	return p.UploadTime != nil
}

func (p *SingleChatFile) IsSetSecretKey() bool {
	return p.SecretKey != nil
}

func (p *SingleChatFile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SingleChatFile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FileID = v
	}
	return nil
}

func (p *SingleChatFile) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SendUserID = v
	}
	return nil
}

func (p *SingleChatFile) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ReceUserID = v
	}
	return nil
}

func (p *SingleChatFile) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FileName = &v
	}
	return nil
}

func (p *SingleChatFile) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FileUrl = &v
	}
	return nil
}

func (p *SingleChatFile) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.FileSize = &v
	}
	return nil
}

func (p *SingleChatFile) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IsEncrypt = &v
	}
	return nil
}

func (p *SingleChatFile) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UploadTime = &v
	}
	return nil
}

func (p *SingleChatFile) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.SecretKey = &v
	}
	return nil
}

func (p *SingleChatFile) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *SingleChatFile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SingleChatFile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SingleChatFile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FileID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileID: ", p), err)
	}
	return err
}

func (p *SingleChatFile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sendUserID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sendUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SendUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sendUserID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sendUserID: ", p), err)
	}
	return err
}

func (p *SingleChatFile) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receUserID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:receUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReceUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receUserID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:receUserID: ", p), err)
	}
	return err
}

func (p *SingleChatFile) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileName() {
		if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fileName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FileName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileName (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fileName: ", p), err)
		}
	}
	return err
}

func (p *SingleChatFile) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileUrl() {
		if err := oprot.WriteFieldBegin("fileUrl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fileUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FileUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileUrl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fileUrl: ", p), err)
		}
	}
	return err
}

func (p *SingleChatFile) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fileSize: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FileSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileSize (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fileSize: ", p), err)
		}
	}
	return err
}

func (p *SingleChatFile) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsEncrypt() {
		if err := oprot.WriteFieldBegin("isEncrypt", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:isEncrypt: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.IsEncrypt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isEncrypt (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:isEncrypt: ", p), err)
		}
	}
	return err
}

func (p *SingleChatFile) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadTime() {
		if err := oprot.WriteFieldBegin("uploadTime", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:uploadTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UploadTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploadTime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:uploadTime: ", p), err)
		}
	}
	return err
}

func (p *SingleChatFile) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretKey() {
		if err := oprot.WriteFieldBegin("secretKey", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:secretKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SecretKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secretKey (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:secretKey: ", p), err)
		}
	}
	return err
}

func (p *SingleChatFile) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:SDKID: ", p), err)
	}
	return err
}

func (p *SingleChatFile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SingleChatFile(%+v)", *p)
}

// 全局勿扰模式数据协议
//
// Attributes:
//  - StartTimer: 开始时间
//  - EndTimer: 截止时间
//  - Value: 开关是否打开0为关闭 1为打开
//  - SDKID
//  - ModeList: 服务端4.6版本,勿扰模式扩展,新版本有多个勿扰时间段 请自行保证数据的顺序
type NoDisturbMode struct {
	StartTimer *int32                    `thrift:"startTimer,1" json:"startTimer,omitempty"`
	EndTimer   *int32                    `thrift:"endTimer,2" json:"endTimer,omitempty"`
	Value      *int8                     `thrift:"value,3" json:"value,omitempty"`
	SDKID      *int64                    `thrift:"SDKID,4" json:"SDKID,omitempty"`
	ModeList   []*NoDisturbModeExtension `thrift:"modeList,5" json:"modeList,omitempty"`
}

func NewNoDisturbMode() *NoDisturbMode {
	return &NoDisturbMode{}
}

var NoDisturbMode_StartTimer_DEFAULT int32

func (p *NoDisturbMode) GetStartTimer() int32 {
	if !p.IsSetStartTimer() {
		return NoDisturbMode_StartTimer_DEFAULT
	}
	return *p.StartTimer
}

var NoDisturbMode_EndTimer_DEFAULT int32

func (p *NoDisturbMode) GetEndTimer() int32 {
	if !p.IsSetEndTimer() {
		return NoDisturbMode_EndTimer_DEFAULT
	}
	return *p.EndTimer
}

var NoDisturbMode_Value_DEFAULT int8

func (p *NoDisturbMode) GetValue() int8 {
	if !p.IsSetValue() {
		return NoDisturbMode_Value_DEFAULT
	}
	return *p.Value
}

var NoDisturbMode_SDKID_DEFAULT int64

func (p *NoDisturbMode) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return NoDisturbMode_SDKID_DEFAULT
	}
	return *p.SDKID
}

var NoDisturbMode_ModeList_DEFAULT []*NoDisturbModeExtension

func (p *NoDisturbMode) GetModeList() []*NoDisturbModeExtension {
	return p.ModeList
}
func (p *NoDisturbMode) IsSetStartTimer() bool {
	return p.StartTimer != nil
}

func (p *NoDisturbMode) IsSetEndTimer() bool {
	return p.EndTimer != nil
}

func (p *NoDisturbMode) IsSetValue() bool {
	return p.Value != nil
}

func (p *NoDisturbMode) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *NoDisturbMode) IsSetModeList() bool {
	return p.ModeList != nil
}

func (p *NoDisturbMode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoDisturbMode) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartTimer = &v
	}
	return nil
}

func (p *NoDisturbMode) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTimer = &v
	}
	return nil
}

func (p *NoDisturbMode) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Value = &temp
	}
	return nil
}

func (p *NoDisturbMode) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *NoDisturbMode) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NoDisturbModeExtension, 0, size)
	p.ModeList = tSlice
	for i := 0; i < size; i++ {
		_elem32 := &NoDisturbModeExtension{}
		if err := _elem32.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
		}
		p.ModeList = append(p.ModeList, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoDisturbMode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoDisturbMode"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoDisturbMode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTimer() {
		if err := oprot.WriteFieldBegin("startTimer", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startTimer: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StartTimer)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startTimer (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startTimer: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbMode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTimer() {
		if err := oprot.WriteFieldBegin("endTimer", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endTimer: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EndTimer)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endTimer (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endTimer: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbMode) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbMode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbMode) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetModeList() {
		if err := oprot.WriteFieldBegin("modeList", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:modeList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModeList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ModeList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:modeList: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbMode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoDisturbMode(%+v)", *p)
}

// 全局勿扰模式数据协议扩充
//
// Attributes:
//  - StartTimer: 开始时间
//  - EndTimer: 截止时间
//  - SwitchType: 开关是否打开0为关闭 1为打开
//  - Name: 对应时间段勿扰模式名称
type NoDisturbModeExtension struct {
	StartTimer *int32  `thrift:"startTimer,1" json:"startTimer,omitempty"`
	EndTimer   *int32  `thrift:"endTimer,2" json:"endTimer,omitempty"`
	SwitchType *int8   `thrift:"switchType,3" json:"switchType,omitempty"`
	Name       *string `thrift:"name,4" json:"name,omitempty"`
}

func NewNoDisturbModeExtension() *NoDisturbModeExtension {
	return &NoDisturbModeExtension{}
}

var NoDisturbModeExtension_StartTimer_DEFAULT int32

func (p *NoDisturbModeExtension) GetStartTimer() int32 {
	if !p.IsSetStartTimer() {
		return NoDisturbModeExtension_StartTimer_DEFAULT
	}
	return *p.StartTimer
}

var NoDisturbModeExtension_EndTimer_DEFAULT int32

func (p *NoDisturbModeExtension) GetEndTimer() int32 {
	if !p.IsSetEndTimer() {
		return NoDisturbModeExtension_EndTimer_DEFAULT
	}
	return *p.EndTimer
}

var NoDisturbModeExtension_SwitchType_DEFAULT int8

func (p *NoDisturbModeExtension) GetSwitchType() int8 {
	if !p.IsSetSwitchType() {
		return NoDisturbModeExtension_SwitchType_DEFAULT
	}
	return *p.SwitchType
}

var NoDisturbModeExtension_Name_DEFAULT string

func (p *NoDisturbModeExtension) GetName() string {
	if !p.IsSetName() {
		return NoDisturbModeExtension_Name_DEFAULT
	}
	return *p.Name
}
func (p *NoDisturbModeExtension) IsSetStartTimer() bool {
	return p.StartTimer != nil
}

func (p *NoDisturbModeExtension) IsSetEndTimer() bool {
	return p.EndTimer != nil
}

func (p *NoDisturbModeExtension) IsSetSwitchType() bool {
	return p.SwitchType != nil
}

func (p *NoDisturbModeExtension) IsSetName() bool {
	return p.Name != nil
}

func (p *NoDisturbModeExtension) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoDisturbModeExtension) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartTimer = &v
	}
	return nil
}

func (p *NoDisturbModeExtension) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTimer = &v
	}
	return nil
}

func (p *NoDisturbModeExtension) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.SwitchType = &temp
	}
	return nil
}

func (p *NoDisturbModeExtension) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *NoDisturbModeExtension) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoDisturbModeExtension"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoDisturbModeExtension) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTimer() {
		if err := oprot.WriteFieldBegin("startTimer", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startTimer: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StartTimer)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startTimer (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startTimer: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbModeExtension) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTimer() {
		if err := oprot.WriteFieldBegin("endTimer", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endTimer: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.EndTimer)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.endTimer (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endTimer: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbModeExtension) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSwitchType() {
		if err := oprot.WriteFieldBegin("switchType", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:switchType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.SwitchType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.switchType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:switchType: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbModeExtension) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err)
		}
	}
	return err
}

func (p *NoDisturbModeExtension) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoDisturbModeExtension(%+v)", *p)
}

// 设置针对某一个人的勿扰模式数据协议
//
// Attributes:
//  - TargetUserId: 目标用户ID
//  - TypeValue: 类型值
// 1:个人设置项, value: 1为接收提醒 2表示不提醒仅显示数字 3:为免打扰, 默认1
// 2:个人通知消息详情模式, value:1、通知详情 2、通知源，隐藏内容 3、完全隐藏 默认开启模式1
//  - ModeType: 类型 1:个人设置项 2:个人通知消息详情模式
//  - SDKID
type UserToTargetSwitch struct {
	TargetUserId *int64 `thrift:"targetUserId,1" json:"targetUserId,omitempty"`
	TypeValue    *int8  `thrift:"typeValue,2" json:"typeValue,omitempty"`
	ModeType     int8   `thrift:"modeType,3" json:"modeType"`
	SDKID        *int64 `thrift:"SDKID,4" json:"SDKID,omitempty"`
}

func NewUserToTargetSwitch() *UserToTargetSwitch {
	return &UserToTargetSwitch{}
}

var UserToTargetSwitch_TargetUserId_DEFAULT int64

func (p *UserToTargetSwitch) GetTargetUserId() int64 {
	if !p.IsSetTargetUserId() {
		return UserToTargetSwitch_TargetUserId_DEFAULT
	}
	return *p.TargetUserId
}

var UserToTargetSwitch_TypeValue_DEFAULT int8

func (p *UserToTargetSwitch) GetTypeValue() int8 {
	if !p.IsSetTypeValue() {
		return UserToTargetSwitch_TypeValue_DEFAULT
	}
	return *p.TypeValue
}

func (p *UserToTargetSwitch) GetModeType() int8 {
	return p.ModeType
}

var UserToTargetSwitch_SDKID_DEFAULT int64

func (p *UserToTargetSwitch) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return UserToTargetSwitch_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *UserToTargetSwitch) IsSetTargetUserId() bool {
	return p.TargetUserId != nil
}

func (p *UserToTargetSwitch) IsSetTypeValue() bool {
	return p.TypeValue != nil
}

func (p *UserToTargetSwitch) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *UserToTargetSwitch) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserToTargetSwitch) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TargetUserId = &v
	}
	return nil
}

func (p *UserToTargetSwitch) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.TypeValue = &temp
	}
	return nil
}

func (p *UserToTargetSwitch) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.ModeType = temp
	}
	return nil
}

func (p *UserToTargetSwitch) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *UserToTargetSwitch) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserToTargetSwitch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserToTargetSwitch) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetUserId() {
		if err := oprot.WriteFieldBegin("targetUserId", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:targetUserId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TargetUserId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.targetUserId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:targetUserId: ", p), err)
		}
	}
	return err
}

func (p *UserToTargetSwitch) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeValue() {
		if err := oprot.WriteFieldBegin("typeValue", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:typeValue: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.TypeValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.typeValue (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:typeValue: ", p), err)
		}
	}
	return err
}

func (p *UserToTargetSwitch) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("modeType", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:modeType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.ModeType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.modeType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:modeType: ", p), err)
	}
	return err
}

func (p *UserToTargetSwitch) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
		}
	}
	return err
}

func (p *UserToTargetSwitch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserToTargetSwitch(%+v)", *p)
}

// Attributes:
//  - DefType: 1表示推送通知提示音
//  - Value: defType=1的时候表示提示音的名字
//  - SDKID
type PersonDefinition struct {
	DefType int8    `thrift:"defType,1" json:"defType"`
	Value   *string `thrift:"value,2" json:"value,omitempty"`
	SDKID   *int64  `thrift:"SDKID,3" json:"SDKID,omitempty"`
}

func NewPersonDefinition() *PersonDefinition {
	return &PersonDefinition{}
}

func (p *PersonDefinition) GetDefType() int8 {
	return p.DefType
}

var PersonDefinition_Value_DEFAULT string

func (p *PersonDefinition) GetValue() string {
	if !p.IsSetValue() {
		return PersonDefinition_Value_DEFAULT
	}
	return *p.Value
}

var PersonDefinition_SDKID_DEFAULT int64

func (p *PersonDefinition) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return PersonDefinition_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *PersonDefinition) IsSetValue() bool {
	return p.Value != nil
}

func (p *PersonDefinition) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *PersonDefinition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PersonDefinition) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.DefType = temp
	}
	return nil
}

func (p *PersonDefinition) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = &v
	}
	return nil
}

func (p *PersonDefinition) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *PersonDefinition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PersonDefinition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PersonDefinition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("defType", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:defType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DefType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.defType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:defType: ", p), err)
	}
	return err
}

func (p *PersonDefinition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
		}
	}
	return err
}

func (p *PersonDefinition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SDKID: ", p), err)
		}
	}
	return err
}

func (p *PersonDefinition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonDefinition(%+v)", *p)
}

// Attributes:
//  - ReqVerifyboxID
//  - ReqUserID
//  - SDKID
type ReqVerifyParam struct {
	ReqVerifyboxID int64  `thrift:"reqVerifyboxID,1" json:"reqVerifyboxID"`
	ReqUserID      int64  `thrift:"reqUserID,2" json:"reqUserID"`
	SDKID          *int64 `thrift:"SDKID,3" json:"SDKID,omitempty"`
}

func NewReqVerifyParam() *ReqVerifyParam {
	return &ReqVerifyParam{}
}

func (p *ReqVerifyParam) GetReqVerifyboxID() int64 {
	return p.ReqVerifyboxID
}

func (p *ReqVerifyParam) GetReqUserID() int64 {
	return p.ReqUserID
}

var ReqVerifyParam_SDKID_DEFAULT int64

func (p *ReqVerifyParam) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return ReqVerifyParam_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *ReqVerifyParam) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *ReqVerifyParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReqVerifyParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqVerifyboxID = v
	}
	return nil
}

func (p *ReqVerifyParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReqUserID = v
	}
	return nil
}

func (p *ReqVerifyParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *ReqVerifyParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReqVerifyParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReqVerifyParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqVerifyboxID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqVerifyboxID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReqVerifyboxID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqVerifyboxID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqVerifyboxID: ", p), err)
	}
	return err
}

func (p *ReqVerifyParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reqUserID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reqUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReqUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqUserID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reqUserID: ", p), err)
	}
	return err
}

func (p *ReqVerifyParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SDKID: ", p), err)
		}
	}
	return err
}

func (p *ReqVerifyParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReqVerifyParam(%+v)", *p)
}

// 消息状态统计信息
//
// Attributes:
//  - MessageID
//  - StatusMap
//  - FeedbackMap
//  - SDKID
type MessageStatusStatsInfo struct {
	MessageID   int64          `thrift:"messageID,1" json:"messageID"`
	StatusMap   map[int8]int32 `thrift:"statusMap,2" json:"statusMap,omitempty"`
	FeedbackMap map[int8]int32 `thrift:"feedbackMap,3" json:"feedbackMap,omitempty"`
	SDKID       *int64         `thrift:"SDKID,4" json:"SDKID,omitempty"`
}

func NewMessageStatusStatsInfo() *MessageStatusStatsInfo {
	return &MessageStatusStatsInfo{}
}

func (p *MessageStatusStatsInfo) GetMessageID() int64 {
	return p.MessageID
}

var MessageStatusStatsInfo_StatusMap_DEFAULT map[int8]int32

func (p *MessageStatusStatsInfo) GetStatusMap() map[int8]int32 {
	return p.StatusMap
}

var MessageStatusStatsInfo_FeedbackMap_DEFAULT map[int8]int32

func (p *MessageStatusStatsInfo) GetFeedbackMap() map[int8]int32 {
	return p.FeedbackMap
}

var MessageStatusStatsInfo_SDKID_DEFAULT int64

func (p *MessageStatusStatsInfo) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return MessageStatusStatsInfo_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *MessageStatusStatsInfo) IsSetStatusMap() bool {
	return p.StatusMap != nil
}

func (p *MessageStatusStatsInfo) IsSetFeedbackMap() bool {
	return p.FeedbackMap != nil
}

func (p *MessageStatusStatsInfo) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *MessageStatusStatsInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MessageStatusStatsInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MessageID = v
	}
	return nil
}

func (p *MessageStatusStatsInfo) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int8]int32, size)
	p.StatusMap = tMap
	for i := 0; i < size; i++ {
		var _key33 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_key33 = temp
		}
		var _val34 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val34 = v
		}
		p.StatusMap[_key33] = _val34
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MessageStatusStatsInfo) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int8]int32, size)
	p.FeedbackMap = tMap
	for i := 0; i < size; i++ {
		var _key35 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_key35 = temp
		}
		var _val36 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val36 = v
		}
		p.FeedbackMap[_key35] = _val36
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MessageStatusStatsInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *MessageStatusStatsInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageStatusStatsInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MessageStatusStatsInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MessageID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageID: ", p), err)
	}
	return err
}

func (p *MessageStatusStatsInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusMap() {
		if err := oprot.WriteFieldBegin("statusMap", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:statusMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.BYTE, thrift.I32, len(p.StatusMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.StatusMap {
			if err := oprot.WriteByte(int8(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:statusMap: ", p), err)
		}
	}
	return err
}

func (p *MessageStatusStatsInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeedbackMap() {
		if err := oprot.WriteFieldBegin("feedbackMap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:feedbackMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.BYTE, thrift.I32, len(p.FeedbackMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.FeedbackMap {
			if err := oprot.WriteByte(int8(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:feedbackMap: ", p), err)
		}
	}
	return err
}

func (p *MessageStatusStatsInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
		}
	}
	return err
}

func (p *MessageStatusStatsInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageStatusStatsInfo(%+v)", *p)
}

// 消息状态详情
// 普通消息返回哪些人未送达、送达、已读的信息，指令消息返回指令统计（有无来区分）
//
// Attributes:
//  - MessageID
//  - StatusMap
//  - FeedbackMap
type MessageStatusDetailInfo struct {
	MessageID   int64            `thrift:"messageID,1" json:"messageID"`
	StatusMap   map[int8][]int64 `thrift:"statusMap,2" json:"statusMap,omitempty"`
	FeedbackMap map[int8]int32   `thrift:"feedbackMap,3" json:"feedbackMap,omitempty"`
}

func NewMessageStatusDetailInfo() *MessageStatusDetailInfo {
	return &MessageStatusDetailInfo{}
}

func (p *MessageStatusDetailInfo) GetMessageID() int64 {
	return p.MessageID
}

var MessageStatusDetailInfo_StatusMap_DEFAULT map[int8][]int64

func (p *MessageStatusDetailInfo) GetStatusMap() map[int8][]int64 {
	return p.StatusMap
}

var MessageStatusDetailInfo_FeedbackMap_DEFAULT map[int8]int32

func (p *MessageStatusDetailInfo) GetFeedbackMap() map[int8]int32 {
	return p.FeedbackMap
}
func (p *MessageStatusDetailInfo) IsSetStatusMap() bool {
	return p.StatusMap != nil
}

func (p *MessageStatusDetailInfo) IsSetFeedbackMap() bool {
	return p.FeedbackMap != nil
}

func (p *MessageStatusDetailInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MessageStatusDetailInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MessageID = v
	}
	return nil
}

func (p *MessageStatusDetailInfo) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int8][]int64, size)
	p.StatusMap = tMap
	for i := 0; i < size; i++ {
		var _key37 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_key37 = temp
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int64, 0, size)
		_val38 := tSlice
		for i := 0; i < size; i++ {
			var _elem39 int64
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem39 = v
			}
			_val38 = append(_val38, _elem39)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.StatusMap[_key37] = _val38
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MessageStatusDetailInfo) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int8]int32, size)
	p.FeedbackMap = tMap
	for i := 0; i < size; i++ {
		var _key40 int8
		if v, err := iprot.ReadByte(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := int8(v)
			_key40 = temp
		}
		var _val41 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val41 = v
		}
		p.FeedbackMap[_key40] = _val41
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MessageStatusDetailInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MessageStatusDetailInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MessageStatusDetailInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MessageID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageID: ", p), err)
	}
	return err
}

func (p *MessageStatusDetailInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusMap() {
		if err := oprot.WriteFieldBegin("statusMap", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:statusMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.BYTE, thrift.LIST, len(p.StatusMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.StatusMap {
			if err := oprot.WriteByte(int8(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := oprot.WriteI64(int64(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:statusMap: ", p), err)
		}
	}
	return err
}

func (p *MessageStatusDetailInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeedbackMap() {
		if err := oprot.WriteFieldBegin("feedbackMap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:feedbackMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.BYTE, thrift.I32, len(p.FeedbackMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.FeedbackMap {
			if err := oprot.WriteByte(int8(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:feedbackMap: ", p), err)
		}
	}
	return err
}

func (p *MessageStatusDetailInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MessageStatusDetailInfo(%+v)", *p)
}

// 组织公开配置
//
// Attributes:
//  - TeamID: 团队ID/企业ID
//  - OpenOrgID: 公开的组织ID
//  - TargetOrgIDs: 目标组织ID
//  - SDKID
type OrgOpenConfig struct {
	TeamID       int64   `thrift:"teamID,1" json:"teamID"`
	OpenOrgID    int64   `thrift:"openOrgID,2" json:"openOrgID"`
	TargetOrgIDs []int64 `thrift:"targetOrgIDs,3" json:"targetOrgIDs"`
	SDKID        *int64  `thrift:"SDKID,4" json:"SDKID,omitempty"`
}

func NewOrgOpenConfig() *OrgOpenConfig {
	return &OrgOpenConfig{}
}

func (p *OrgOpenConfig) GetTeamID() int64 {
	return p.TeamID
}

func (p *OrgOpenConfig) GetOpenOrgID() int64 {
	return p.OpenOrgID
}

func (p *OrgOpenConfig) GetTargetOrgIDs() []int64 {
	return p.TargetOrgIDs
}

var OrgOpenConfig_SDKID_DEFAULT int64

func (p *OrgOpenConfig) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return OrgOpenConfig_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *OrgOpenConfig) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *OrgOpenConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OrgOpenConfig) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TeamID = v
	}
	return nil
}

func (p *OrgOpenConfig) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OpenOrgID = v
	}
	return nil
}

func (p *OrgOpenConfig) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.TargetOrgIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem42 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem42 = v
		}
		p.TargetOrgIDs = append(p.TargetOrgIDs, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OrgOpenConfig) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *OrgOpenConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OrgOpenConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OrgOpenConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("teamID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:teamID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TeamID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.teamID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:teamID: ", p), err)
	}
	return err
}

func (p *OrgOpenConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("openOrgID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:openOrgID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OpenOrgID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.openOrgID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:openOrgID: ", p), err)
	}
	return err
}

func (p *OrgOpenConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetOrgIDs", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetOrgIDs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TargetOrgIDs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TargetOrgIDs {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetOrgIDs: ", p), err)
	}
	return err
}

func (p *OrgOpenConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
		}
	}
	return err
}

func (p *OrgOpenConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrgOpenConfig(%+v)", *p)
}

// 团队用户查询参数
//
// Attributes:
//  - Username
//  - EntID
//  - EntOrgID
//  - PageNo
//  - PageSize
//  - EntUserID
//  - BizStatus
//  - Status
type EnterpriseUserQueryParam struct {
	Username  *string `thrift:"username,1" json:"username,omitempty"`
	EntID     *int64  `thrift:"entID,2" json:"entID,omitempty"`
	EntOrgID  *int64  `thrift:"entOrgID,3" json:"entOrgID,omitempty"`
	PageNo    *int32  `thrift:"pageNo,4" json:"pageNo,omitempty"`
	PageSize  *int32  `thrift:"pageSize,5" json:"pageSize,omitempty"`
	EntUserID *int64  `thrift:"entUserID,6" json:"entUserID,omitempty"`
	BizStatus *int8   `thrift:"bizStatus,7" json:"bizStatus,omitempty"`
	Status    *int8   `thrift:"status,8" json:"status,omitempty"`
}

func NewEnterpriseUserQueryParam() *EnterpriseUserQueryParam {
	return &EnterpriseUserQueryParam{}
}

var EnterpriseUserQueryParam_Username_DEFAULT string

func (p *EnterpriseUserQueryParam) GetUsername() string {
	if !p.IsSetUsername() {
		return EnterpriseUserQueryParam_Username_DEFAULT
	}
	return *p.Username
}

var EnterpriseUserQueryParam_EntID_DEFAULT int64

func (p *EnterpriseUserQueryParam) GetEntID() int64 {
	if !p.IsSetEntID() {
		return EnterpriseUserQueryParam_EntID_DEFAULT
	}
	return *p.EntID
}

var EnterpriseUserQueryParam_EntOrgID_DEFAULT int64

func (p *EnterpriseUserQueryParam) GetEntOrgID() int64 {
	if !p.IsSetEntOrgID() {
		return EnterpriseUserQueryParam_EntOrgID_DEFAULT
	}
	return *p.EntOrgID
}

var EnterpriseUserQueryParam_PageNo_DEFAULT int32

func (p *EnterpriseUserQueryParam) GetPageNo() int32 {
	if !p.IsSetPageNo() {
		return EnterpriseUserQueryParam_PageNo_DEFAULT
	}
	return *p.PageNo
}

var EnterpriseUserQueryParam_PageSize_DEFAULT int32

func (p *EnterpriseUserQueryParam) GetPageSize() int32 {
	if !p.IsSetPageSize() {
		return EnterpriseUserQueryParam_PageSize_DEFAULT
	}
	return *p.PageSize
}

var EnterpriseUserQueryParam_EntUserID_DEFAULT int64

func (p *EnterpriseUserQueryParam) GetEntUserID() int64 {
	if !p.IsSetEntUserID() {
		return EnterpriseUserQueryParam_EntUserID_DEFAULT
	}
	return *p.EntUserID
}

var EnterpriseUserQueryParam_BizStatus_DEFAULT int8

func (p *EnterpriseUserQueryParam) GetBizStatus() int8 {
	if !p.IsSetBizStatus() {
		return EnterpriseUserQueryParam_BizStatus_DEFAULT
	}
	return *p.BizStatus
}

var EnterpriseUserQueryParam_Status_DEFAULT int8

func (p *EnterpriseUserQueryParam) GetStatus() int8 {
	if !p.IsSetStatus() {
		return EnterpriseUserQueryParam_Status_DEFAULT
	}
	return *p.Status
}
func (p *EnterpriseUserQueryParam) IsSetUsername() bool {
	return p.Username != nil
}

func (p *EnterpriseUserQueryParam) IsSetEntID() bool {
	return p.EntID != nil
}

func (p *EnterpriseUserQueryParam) IsSetEntOrgID() bool {
	return p.EntOrgID != nil
}

func (p *EnterpriseUserQueryParam) IsSetPageNo() bool {
	return p.PageNo != nil
}

func (p *EnterpriseUserQueryParam) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *EnterpriseUserQueryParam) IsSetEntUserID() bool {
	return p.EntUserID != nil
}

func (p *EnterpriseUserQueryParam) IsSetBizStatus() bool {
	return p.BizStatus != nil
}

func (p *EnterpriseUserQueryParam) IsSetStatus() bool {
	return p.Status != nil
}

func (p *EnterpriseUserQueryParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EnterpriseUserQueryParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *EnterpriseUserQueryParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EntID = &v
	}
	return nil
}

func (p *EnterpriseUserQueryParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EntOrgID = &v
	}
	return nil
}

func (p *EnterpriseUserQueryParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PageNo = &v
	}
	return nil
}

func (p *EnterpriseUserQueryParam) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *EnterpriseUserQueryParam) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.EntUserID = &v
	}
	return nil
}

func (p *EnterpriseUserQueryParam) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.BizStatus = &temp
	}
	return nil
}

func (p *EnterpriseUserQueryParam) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *EnterpriseUserQueryParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EnterpriseUserQueryParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EnterpriseUserQueryParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserQueryParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntID() {
		if err := oprot.WriteFieldBegin("entID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EntID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserQueryParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntOrgID() {
		if err := oprot.WriteFieldBegin("entOrgID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entOrgID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EntOrgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entOrgID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entOrgID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserQueryParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNo() {
		if err := oprot.WriteFieldBegin("pageNo", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageNo: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageNo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageNo (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageNo: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserQueryParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserQueryParam) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntUserID() {
		if err := oprot.WriteFieldBegin("entUserID", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:entUserID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EntUserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entUserID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:entUserID: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserQueryParam) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizStatus() {
		if err := oprot.WriteFieldBegin("bizStatus", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bizStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.BizStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bizStatus (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bizStatus: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserQueryParam) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
		}
	}
	return err
}

func (p *EnterpriseUserQueryParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnterpriseUserQueryParam(%+v)", *p)
}

// Attributes:
//  - EnterpriseUserList
//  - Total
//  - TotalPage
type EnUserStruct struct {
	EnterpriseUserList []*EnterpriseUserBean `thrift:"EnterpriseUserList,1" json:"EnterpriseUserList"`
	Total              int64                 `thrift:"total,2" json:"total"`
	TotalPage          int64                 `thrift:"totalPage,3" json:"totalPage"`
}

func NewEnUserStruct() *EnUserStruct {
	return &EnUserStruct{}
}

func (p *EnUserStruct) GetEnterpriseUserList() []*EnterpriseUserBean {
	return p.EnterpriseUserList
}

func (p *EnUserStruct) GetTotal() int64 {
	return p.Total
}

func (p *EnUserStruct) GetTotalPage() int64 {
	return p.TotalPage
}
func (p *EnUserStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EnUserStruct) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EnterpriseUserBean, 0, size)
	p.EnterpriseUserList = tSlice
	for i := 0; i < size; i++ {
		_elem43 := &EnterpriseUserBean{}
		if err := _elem43.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
		}
		p.EnterpriseUserList = append(p.EnterpriseUserList, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EnUserStruct) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *EnUserStruct) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *EnUserStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EnUserStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EnUserStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("EnterpriseUserList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:EnterpriseUserList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EnterpriseUserList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EnterpriseUserList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:EnterpriseUserList: ", p), err)
	}
	return err
}

func (p *EnUserStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total: ", p), err)
	}
	return err
}

func (p *EnUserStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPage: ", p), err)
	}
	return err
}

func (p *EnUserStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnUserStruct(%+v)", *p)
}

// 检索参数
//
// Attributes:
//  - Condition
//  - Type
//  - Area
//  - ExtendParam
type SearchParam struct {
	Condition   string            `thrift:"condition,1" json:"condition"`
	Type        *int8             `thrift:"type,2" json:"type,omitempty"`
	Area        *int32            `thrift:"area,3" json:"area,omitempty"`
	ExtendParam map[string]string `thrift:"extendParam,4" json:"extendParam,omitempty"`
}

func NewSearchParam() *SearchParam {
	return &SearchParam{}
}

func (p *SearchParam) GetCondition() string {
	return p.Condition
}

var SearchParam_Type_DEFAULT int8

func (p *SearchParam) GetType() int8 {
	if !p.IsSetType() {
		return SearchParam_Type_DEFAULT
	}
	return *p.Type
}

var SearchParam_Area_DEFAULT int32

func (p *SearchParam) GetArea() int32 {
	if !p.IsSetArea() {
		return SearchParam_Area_DEFAULT
	}
	return *p.Area
}

var SearchParam_ExtendParam_DEFAULT map[string]string

func (p *SearchParam) GetExtendParam() map[string]string {
	return p.ExtendParam
}
func (p *SearchParam) IsSetType() bool {
	return p.Type != nil
}

func (p *SearchParam) IsSetArea() bool {
	return p.Area != nil
}

func (p *SearchParam) IsSetExtendParam() bool {
	return p.ExtendParam != nil
}

func (p *SearchParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Condition = v
	}
	return nil
}

func (p *SearchParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Type = &temp
	}
	return nil
}

func (p *SearchParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Area = &v
	}
	return nil
}

func (p *SearchParam) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.ExtendParam = tMap
	for i := 0; i < size; i++ {
		var _key44 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key44 = v
		}
		var _val45 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val45 = v
		}
		p.ExtendParam[_key44] = _val45
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SearchParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("condition", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:condition: ", p), err)
	}
	if err := oprot.WriteString(string(p.Condition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.condition (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:condition: ", p), err)
	}
	return err
}

func (p *SearchParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *SearchParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetArea() {
		if err := oprot.WriteFieldBegin("area", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:area: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Area)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.area (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:area: ", p), err)
		}
	}
	return err
}

func (p *SearchParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtendParam() {
		if err := oprot.WriteFieldBegin("extendParam", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extendParam: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ExtendParam)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ExtendParam {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extendParam: ", p), err)
		}
	}
	return err
}

func (p *SearchParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchParam(%+v)", *p)
}

// 检索结果
//
// Attributes:
//  - Orgs
//  - Users
type SearchOrgAndUserResult_ struct {
	Orgs  []*OrganizationBean   `thrift:"orgs,1" json:"orgs,omitempty"`
	Users []*EnterpriseUserBean `thrift:"users,2" json:"users,omitempty"`
}

func NewSearchOrgAndUserResult_() *SearchOrgAndUserResult_ {
	return &SearchOrgAndUserResult_{}
}

var SearchOrgAndUserResult__Orgs_DEFAULT []*OrganizationBean

func (p *SearchOrgAndUserResult_) GetOrgs() []*OrganizationBean {
	return p.Orgs
}

var SearchOrgAndUserResult__Users_DEFAULT []*EnterpriseUserBean

func (p *SearchOrgAndUserResult_) GetUsers() []*EnterpriseUserBean {
	return p.Users
}
func (p *SearchOrgAndUserResult_) IsSetOrgs() bool {
	return p.Orgs != nil
}

func (p *SearchOrgAndUserResult_) IsSetUsers() bool {
	return p.Users != nil
}

func (p *SearchOrgAndUserResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SearchOrgAndUserResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OrganizationBean, 0, size)
	p.Orgs = tSlice
	for i := 0; i < size; i++ {
		_elem46 := &OrganizationBean{}
		if err := _elem46.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
		}
		p.Orgs = append(p.Orgs, _elem46)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchOrgAndUserResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EnterpriseUserBean, 0, size)
	p.Users = tSlice
	for i := 0; i < size; i++ {
		_elem47 := &EnterpriseUserBean{}
		if err := _elem47.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem47), err)
		}
		p.Users = append(p.Users, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SearchOrgAndUserResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchOrgAndUserResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SearchOrgAndUserResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgs() {
		if err := oprot.WriteFieldBegin("orgs", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orgs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Orgs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Orgs {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orgs: ", p), err)
		}
	}
	return err
}

func (p *SearchOrgAndUserResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsers() {
		if err := oprot.WriteFieldBegin("users", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:users: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Users)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Users {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:users: ", p), err)
		}
	}
	return err
}

func (p *SearchOrgAndUserResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchOrgAndUserResult_(%+v)", *p)
}

// **********地址解析返回结构体***********************************
//
// Attributes:
//  - URL
//  - Title
//  - Img
//  - Description
//  - Code
type UrlContent struct {
	URL         string  `thrift:"url,1" json:"url"`
	Title       *string `thrift:"title,2" json:"title,omitempty"`
	Img         *string `thrift:"img,3" json:"img,omitempty"`
	Description *string `thrift:"description,4" json:"description,omitempty"`
	Code        *int32  `thrift:"code,5" json:"code,omitempty"`
}

func NewUrlContent() *UrlContent {
	return &UrlContent{}
}

func (p *UrlContent) GetURL() string {
	return p.URL
}

var UrlContent_Title_DEFAULT string

func (p *UrlContent) GetTitle() string {
	if !p.IsSetTitle() {
		return UrlContent_Title_DEFAULT
	}
	return *p.Title
}

var UrlContent_Img_DEFAULT string

func (p *UrlContent) GetImg() string {
	if !p.IsSetImg() {
		return UrlContent_Img_DEFAULT
	}
	return *p.Img
}

var UrlContent_Description_DEFAULT string

func (p *UrlContent) GetDescription() string {
	if !p.IsSetDescription() {
		return UrlContent_Description_DEFAULT
	}
	return *p.Description
}

var UrlContent_Code_DEFAULT int32

func (p *UrlContent) GetCode() int32 {
	if !p.IsSetCode() {
		return UrlContent_Code_DEFAULT
	}
	return *p.Code
}
func (p *UrlContent) IsSetTitle() bool {
	return p.Title != nil
}

func (p *UrlContent) IsSetImg() bool {
	return p.Img != nil
}

func (p *UrlContent) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UrlContent) IsSetCode() bool {
	return p.Code != nil
}

func (p *UrlContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UrlContent) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *UrlContent) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *UrlContent) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Img = &v
	}
	return nil
}

func (p *UrlContent) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *UrlContent) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Code = &v
	}
	return nil
}

func (p *UrlContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UrlContent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UrlContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
	}
	return err
}

func (p *UrlContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
		}
	}
	return err
}

func (p *UrlContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetImg() {
		if err := oprot.WriteFieldBegin("img", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:img: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Img)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.img (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:img: ", p), err)
		}
	}
	return err
}

func (p *UrlContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err)
		}
	}
	return err
}

func (p *UrlContent) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err := oprot.WriteFieldBegin("code", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:code: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Code)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.code (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:code: ", p), err)
		}
	}
	return err
}

func (p *UrlContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UrlContent(%+v)", *p)
}

// 用户查询参数
//
// Attributes:
//  - TableName
//  - TableSerial
//  - PageNo
//  - PageSize
//  - SDKID
type UserQueryParam struct {
	TableName   *string `thrift:"tableName,1" json:"tableName,omitempty"`
	TableSerial *int32  `thrift:"tableSerial,2" json:"tableSerial,omitempty"`
	PageNo      *int32  `thrift:"pageNo,3" json:"pageNo,omitempty"`
	PageSize    *int32  `thrift:"pageSize,4" json:"pageSize,omitempty"`
	SDKID       *int64  `thrift:"SDKID,5" json:"SDKID,omitempty"`
}

func NewUserQueryParam() *UserQueryParam {
	return &UserQueryParam{}
}

var UserQueryParam_TableName_DEFAULT string

func (p *UserQueryParam) GetTableName() string {
	if !p.IsSetTableName() {
		return UserQueryParam_TableName_DEFAULT
	}
	return *p.TableName
}

var UserQueryParam_TableSerial_DEFAULT int32

func (p *UserQueryParam) GetTableSerial() int32 {
	if !p.IsSetTableSerial() {
		return UserQueryParam_TableSerial_DEFAULT
	}
	return *p.TableSerial
}

var UserQueryParam_PageNo_DEFAULT int32

func (p *UserQueryParam) GetPageNo() int32 {
	if !p.IsSetPageNo() {
		return UserQueryParam_PageNo_DEFAULT
	}
	return *p.PageNo
}

var UserQueryParam_PageSize_DEFAULT int32

func (p *UserQueryParam) GetPageSize() int32 {
	if !p.IsSetPageSize() {
		return UserQueryParam_PageSize_DEFAULT
	}
	return *p.PageSize
}

var UserQueryParam_SDKID_DEFAULT int64

func (p *UserQueryParam) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return UserQueryParam_SDKID_DEFAULT
	}
	return *p.SDKID
}
func (p *UserQueryParam) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *UserQueryParam) IsSetTableSerial() bool {
	return p.TableSerial != nil
}

func (p *UserQueryParam) IsSetPageNo() bool {
	return p.PageNo != nil
}

func (p *UserQueryParam) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *UserQueryParam) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *UserQueryParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserQueryParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *UserQueryParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableSerial = &v
	}
	return nil
}

func (p *UserQueryParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PageNo = &v
	}
	return nil
}

func (p *UserQueryParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *UserQueryParam) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *UserQueryParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserQueryParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserQueryParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
		}
	}
	return err
}

func (p *UserQueryParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableSerial() {
		if err := oprot.WriteFieldBegin("tableSerial", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableSerial: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TableSerial)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tableSerial (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableSerial: ", p), err)
		}
	}
	return err
}

func (p *UserQueryParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNo() {
		if err := oprot.WriteFieldBegin("pageNo", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pageNo: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageNo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageNo (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pageNo: ", p), err)
		}
	}
	return err
}

func (p *UserQueryParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageSize (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageSize: ", p), err)
		}
	}
	return err
}

func (p *UserQueryParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SDKID: ", p), err)
		}
	}
	return err
}

func (p *UserQueryParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserQueryParam(%+v)", *p)
}

// 用户注册参数
//
// Attributes:
//  - Accounts
//  - Pwd
//  - Name
//  - Sex
//  - Status
//  - SDKID
//  - PwdStrength
//  - EntExtend
//  - OrgID
//  - RoleID
//  - BizStatus
//  - PortraitURL
//  - PhoneNum
//  - Email
//  - Realname
//  - TagIds
type RegisterParam struct {
	Accounts    []*AccountType `thrift:"accounts,1" json:"accounts,omitempty"`
	Pwd         *string        `thrift:"pwd,2" json:"pwd,omitempty"`
	Name        *string        `thrift:"name,3" json:"name,omitempty"`
	Sex         *int8          `thrift:"sex,4" json:"sex,omitempty"`
	Status      *int8          `thrift:"status,5" json:"status,omitempty"`
	SDKID       *int64         `thrift:"SDKID,6" json:"SDKID,omitempty"`
	PwdStrength *int8          `thrift:"pwdStrength,7" json:"pwdStrength,omitempty"`
	EntExtend   *string        `thrift:"entExtend,8" json:"entExtend,omitempty"`
	OrgID       *string        `thrift:"orgID,9" json:"orgID,omitempty"`
	RoleID      *int64         `thrift:"roleID,10" json:"roleID,omitempty"`
	BizStatus   *int8          `thrift:"bizStatus,11" json:"bizStatus,omitempty"`
	PortraitURL *string        `thrift:"portraitURL,12" json:"portraitURL,omitempty"`
	PhoneNum    *string        `thrift:"phoneNum,13" json:"phoneNum,omitempty"`
	Email       *string        `thrift:"email,14" json:"email,omitempty"`
	Realname    *string        `thrift:"realname,15" json:"realname,omitempty"`
	TagIds      *string        `thrift:"tagIds,16" json:"tagIds,omitempty"`
}

func NewRegisterParam() *RegisterParam {
	return &RegisterParam{}
}

var RegisterParam_Accounts_DEFAULT []*AccountType

func (p *RegisterParam) GetAccounts() []*AccountType {
	return p.Accounts
}

var RegisterParam_Pwd_DEFAULT string

func (p *RegisterParam) GetPwd() string {
	if !p.IsSetPwd() {
		return RegisterParam_Pwd_DEFAULT
	}
	return *p.Pwd
}

var RegisterParam_Name_DEFAULT string

func (p *RegisterParam) GetName() string {
	if !p.IsSetName() {
		return RegisterParam_Name_DEFAULT
	}
	return *p.Name
}

var RegisterParam_Sex_DEFAULT int8

func (p *RegisterParam) GetSex() int8 {
	if !p.IsSetSex() {
		return RegisterParam_Sex_DEFAULT
	}
	return *p.Sex
}

var RegisterParam_Status_DEFAULT int8

func (p *RegisterParam) GetStatus() int8 {
	if !p.IsSetStatus() {
		return RegisterParam_Status_DEFAULT
	}
	return *p.Status
}

var RegisterParam_SDKID_DEFAULT int64

func (p *RegisterParam) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return RegisterParam_SDKID_DEFAULT
	}
	return *p.SDKID
}

var RegisterParam_PwdStrength_DEFAULT int8

func (p *RegisterParam) GetPwdStrength() int8 {
	if !p.IsSetPwdStrength() {
		return RegisterParam_PwdStrength_DEFAULT
	}
	return *p.PwdStrength
}

var RegisterParam_EntExtend_DEFAULT string

func (p *RegisterParam) GetEntExtend() string {
	if !p.IsSetEntExtend() {
		return RegisterParam_EntExtend_DEFAULT
	}
	return *p.EntExtend
}

var RegisterParam_OrgID_DEFAULT string

func (p *RegisterParam) GetOrgID() string {
	if !p.IsSetOrgID() {
		return RegisterParam_OrgID_DEFAULT
	}
	return *p.OrgID
}

var RegisterParam_RoleID_DEFAULT int64

func (p *RegisterParam) GetRoleID() int64 {
	if !p.IsSetRoleID() {
		return RegisterParam_RoleID_DEFAULT
	}
	return *p.RoleID
}

var RegisterParam_BizStatus_DEFAULT int8

func (p *RegisterParam) GetBizStatus() int8 {
	if !p.IsSetBizStatus() {
		return RegisterParam_BizStatus_DEFAULT
	}
	return *p.BizStatus
}

var RegisterParam_PortraitURL_DEFAULT string

func (p *RegisterParam) GetPortraitURL() string {
	if !p.IsSetPortraitURL() {
		return RegisterParam_PortraitURL_DEFAULT
	}
	return *p.PortraitURL
}

var RegisterParam_PhoneNum_DEFAULT string

func (p *RegisterParam) GetPhoneNum() string {
	if !p.IsSetPhoneNum() {
		return RegisterParam_PhoneNum_DEFAULT
	}
	return *p.PhoneNum
}

var RegisterParam_Email_DEFAULT string

func (p *RegisterParam) GetEmail() string {
	if !p.IsSetEmail() {
		return RegisterParam_Email_DEFAULT
	}
	return *p.Email
}

var RegisterParam_Realname_DEFAULT string

func (p *RegisterParam) GetRealname() string {
	if !p.IsSetRealname() {
		return RegisterParam_Realname_DEFAULT
	}
	return *p.Realname
}

var RegisterParam_TagIds_DEFAULT string

func (p *RegisterParam) GetTagIds() string {
	if !p.IsSetTagIds() {
		return RegisterParam_TagIds_DEFAULT
	}
	return *p.TagIds
}
func (p *RegisterParam) IsSetAccounts() bool {
	return p.Accounts != nil
}

func (p *RegisterParam) IsSetPwd() bool {
	return p.Pwd != nil
}

func (p *RegisterParam) IsSetName() bool {
	return p.Name != nil
}

func (p *RegisterParam) IsSetSex() bool {
	return p.Sex != nil
}

func (p *RegisterParam) IsSetStatus() bool {
	return p.Status != nil
}

func (p *RegisterParam) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *RegisterParam) IsSetPwdStrength() bool {
	return p.PwdStrength != nil
}

func (p *RegisterParam) IsSetEntExtend() bool {
	return p.EntExtend != nil
}

func (p *RegisterParam) IsSetOrgID() bool {
	return p.OrgID != nil
}

func (p *RegisterParam) IsSetRoleID() bool {
	return p.RoleID != nil
}

func (p *RegisterParam) IsSetBizStatus() bool {
	return p.BizStatus != nil
}

func (p *RegisterParam) IsSetPortraitURL() bool {
	return p.PortraitURL != nil
}

func (p *RegisterParam) IsSetPhoneNum() bool {
	return p.PhoneNum != nil
}

func (p *RegisterParam) IsSetEmail() bool {
	return p.Email != nil
}

func (p *RegisterParam) IsSetRealname() bool {
	return p.Realname != nil
}

func (p *RegisterParam) IsSetTagIds() bool {
	return p.TagIds != nil
}

func (p *RegisterParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RegisterParam) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AccountType, 0, size)
	p.Accounts = tSlice
	for i := 0; i < size; i++ {
		_elem48 := &AccountType{}
		if err := _elem48.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
		}
		p.Accounts = append(p.Accounts, _elem48)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RegisterParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = &v
	}
	return nil
}

func (p *RegisterParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *RegisterParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Sex = &temp
	}
	return nil
}

func (p *RegisterParam) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *RegisterParam) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *RegisterParam) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.PwdStrength = &temp
	}
	return nil
}

func (p *RegisterParam) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.EntExtend = &v
	}
	return nil
}

func (p *RegisterParam) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.OrgID = &v
	}
	return nil
}

func (p *RegisterParam) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.RoleID = &v
	}
	return nil
}

func (p *RegisterParam) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.BizStatus = &temp
	}
	return nil
}

func (p *RegisterParam) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.PortraitURL = &v
	}
	return nil
}

func (p *RegisterParam) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.PhoneNum = &v
	}
	return nil
}

func (p *RegisterParam) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *RegisterParam) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Realname = &v
	}
	return nil
}

func (p *RegisterParam) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.TagIds = &v
	}
	return nil
}

func (p *RegisterParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RegisterParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RegisterParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccounts() {
		if err := oprot.WriteFieldBegin("accounts", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:accounts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Accounts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Accounts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:accounts: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwd() {
		if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Pwd)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSex() {
		if err := oprot.WriteFieldBegin("sex", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sex: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Sex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sex (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sex: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SDKID: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwdStrength() {
		if err := oprot.WriteFieldBegin("pwdStrength", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pwdStrength: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.PwdStrength)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pwdStrength (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pwdStrength: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntExtend() {
		if err := oprot.WriteFieldBegin("entExtend", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:entExtend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EntExtend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entExtend (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:entExtend: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgID() {
		if err := oprot.WriteFieldBegin("orgID", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:orgID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgID (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:orgID: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoleID() {
		if err := oprot.WriteFieldBegin("roleID", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:roleID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RoleID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roleID (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:roleID: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizStatus() {
		if err := oprot.WriteFieldBegin("bizStatus", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:bizStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.BizStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bizStatus (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:bizStatus: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPortraitURL() {
		if err := oprot.WriteFieldBegin("portraitURL", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:portraitURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PortraitURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.portraitURL (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:portraitURL: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNum() {
		if err := oprot.WriteFieldBegin("phoneNum", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:phoneNum: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PhoneNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.phoneNum (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:phoneNum: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.email (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:email: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetRealname() {
		if err := oprot.WriteFieldBegin("realname", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:realname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Realname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.realname (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:realname: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagIds() {
		if err := oprot.WriteFieldBegin("tagIds", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:tagIds: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TagIds)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tagIds (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:tagIds: ", p), err)
		}
	}
	return err
}

func (p *RegisterParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterParam(%+v)", *p)
}

// Attributes:
//  - PageNo: 页码
//  - PageSize: 每页条数
//  - TotalPage: 总页数
//  - TotalCount: 总条数
//  - Items: 条目
type GroupPage struct {
	PageNo     int32        `thrift:"pageNo,1" json:"pageNo"`
	PageSize   int32        `thrift:"pageSize,2" json:"pageSize"`
	TotalPage  int64        `thrift:"totalPage,3" json:"totalPage"`
	TotalCount int64        `thrift:"totalCount,4" json:"totalCount"`
	Items      []*GroupInfo `thrift:"items,5" json:"items"`
}

func NewGroupPage() *GroupPage {
	return &GroupPage{}
}

func (p *GroupPage) GetPageNo() int32 {
	return p.PageNo
}

func (p *GroupPage) GetPageSize() int32 {
	return p.PageSize
}

func (p *GroupPage) GetTotalPage() int64 {
	return p.TotalPage
}

func (p *GroupPage) GetTotalCount() int64 {
	return p.TotalCount
}

func (p *GroupPage) GetItems() []*GroupInfo {
	return p.Items
}
func (p *GroupPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupPage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNo = v
	}
	return nil
}

func (p *GroupPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *GroupPage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *GroupPage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *GroupPage) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*GroupInfo, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem49 := &GroupInfo{}
		if err := _elem49.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
		}
		p.Items = append(p.Items, _elem49)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupPage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageNo", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNo: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNo: ", p), err)
	}
	return err
}

func (p *GroupPage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
	}
	return err
}

func (p *GroupPage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPage: ", p), err)
	}
	return err
}

func (p *GroupPage) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalCount", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalCount: ", p), err)
	}
	return err
}

func (p *GroupPage) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("items", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:items: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:items: ", p), err)
	}
	return err
}

func (p *GroupPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupPage(%+v)", *p)
}

// Attributes:
//  - PageNo: 页码
//  - PageSize: 每页条数
//  - GroupName: 群名称
//  - PoliceTypeID: 警种ID
//  - ProvinceID: 地域---省份ID
//  - CityID: 地域---市ID
//  - QueryCondition: 扩展查询，上面没有的查询调节可以以key,value的形式放入这里,key是群接口提对应的属性名称,上面的3,4,5,6也可以放入此处
type GroupSearchParam struct {
	PageNo         int32             `thrift:"pageNo,1" json:"pageNo"`
	PageSize       int32             `thrift:"pageSize,2" json:"pageSize"`
	GroupName      *string           `thrift:"groupName,3" json:"groupName,omitempty"`
	PoliceTypeID   *string           `thrift:"policeTypeID,4" json:"policeTypeID,omitempty"`
	ProvinceID     *string           `thrift:"provinceID,5" json:"provinceID,omitempty"`
	CityID         *string           `thrift:"cityID,6" json:"cityID,omitempty"`
	QueryCondition map[string]string `thrift:"queryCondition,7" json:"queryCondition,omitempty"`
}

func NewGroupSearchParam() *GroupSearchParam {
	return &GroupSearchParam{}
}

func (p *GroupSearchParam) GetPageNo() int32 {
	return p.PageNo
}

func (p *GroupSearchParam) GetPageSize() int32 {
	return p.PageSize
}

var GroupSearchParam_GroupName_DEFAULT string

func (p *GroupSearchParam) GetGroupName() string {
	if !p.IsSetGroupName() {
		return GroupSearchParam_GroupName_DEFAULT
	}
	return *p.GroupName
}

var GroupSearchParam_PoliceTypeID_DEFAULT string

func (p *GroupSearchParam) GetPoliceTypeID() string {
	if !p.IsSetPoliceTypeID() {
		return GroupSearchParam_PoliceTypeID_DEFAULT
	}
	return *p.PoliceTypeID
}

var GroupSearchParam_ProvinceID_DEFAULT string

func (p *GroupSearchParam) GetProvinceID() string {
	if !p.IsSetProvinceID() {
		return GroupSearchParam_ProvinceID_DEFAULT
	}
	return *p.ProvinceID
}

var GroupSearchParam_CityID_DEFAULT string

func (p *GroupSearchParam) GetCityID() string {
	if !p.IsSetCityID() {
		return GroupSearchParam_CityID_DEFAULT
	}
	return *p.CityID
}

var GroupSearchParam_QueryCondition_DEFAULT map[string]string

func (p *GroupSearchParam) GetQueryCondition() map[string]string {
	return p.QueryCondition
}
func (p *GroupSearchParam) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *GroupSearchParam) IsSetPoliceTypeID() bool {
	return p.PoliceTypeID != nil
}

func (p *GroupSearchParam) IsSetProvinceID() bool {
	return p.ProvinceID != nil
}

func (p *GroupSearchParam) IsSetCityID() bool {
	return p.CityID != nil
}

func (p *GroupSearchParam) IsSetQueryCondition() bool {
	return p.QueryCondition != nil
}

func (p *GroupSearchParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupSearchParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNo = v
	}
	return nil
}

func (p *GroupSearchParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *GroupSearchParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *GroupSearchParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PoliceTypeID = &v
	}
	return nil
}

func (p *GroupSearchParam) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ProvinceID = &v
	}
	return nil
}

func (p *GroupSearchParam) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CityID = &v
	}
	return nil
}

func (p *GroupSearchParam) readField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.QueryCondition = tMap
	for i := 0; i < size; i++ {
		var _key50 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key50 = v
		}
		var _val51 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val51 = v
		}
		p.QueryCondition[_key50] = _val51
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GroupSearchParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupSearchParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupSearchParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageNo", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNo: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNo: ", p), err)
	}
	return err
}

func (p *GroupSearchParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
	}
	return err
}

func (p *GroupSearchParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupName: ", p), err)
		}
	}
	return err
}

func (p *GroupSearchParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPoliceTypeID() {
		if err := oprot.WriteFieldBegin("policeTypeID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:policeTypeID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PoliceTypeID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.policeTypeID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:policeTypeID: ", p), err)
		}
	}
	return err
}

func (p *GroupSearchParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetProvinceID() {
		if err := oprot.WriteFieldBegin("provinceID", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:provinceID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ProvinceID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.provinceID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:provinceID: ", p), err)
		}
	}
	return err
}

func (p *GroupSearchParam) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCityID() {
		if err := oprot.WriteFieldBegin("cityID", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cityID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CityID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cityID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cityID: ", p), err)
		}
	}
	return err
}

func (p *GroupSearchParam) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryCondition() {
		if err := oprot.WriteFieldBegin("queryCondition", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:queryCondition: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.QueryCondition)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.QueryCondition {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:queryCondition: ", p), err)
		}
	}
	return err
}

func (p *GroupSearchParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupSearchParam(%+v)", *p)
}

// 个人资料开关
//
// Attributes:
//  - CurrentUserId
//  - SwitchType
//  - Value: 类型
//  - SDKID
//  - ExtendValue
type NewPersonalDataSwitch_ struct {
	CurrentUserId int64   `thrift:"currentUserId,1" json:"currentUserId"`
	SwitchType    int32   `thrift:"switchType,2" json:"switchType"`
	Value         *string `thrift:"value,3" json:"value,omitempty"`
	SDKID         *int64  `thrift:"SDKID,4" json:"SDKID,omitempty"`
	ExtendValue   *string `thrift:"extendValue,5" json:"extendValue,omitempty"`
}

func NewNewPersonalDataSwitch_() *NewPersonalDataSwitch_ {
	return &NewPersonalDataSwitch_{}
}

func (p *NewPersonalDataSwitch_) GetCurrentUserId() int64 {
	return p.CurrentUserId
}

func (p *NewPersonalDataSwitch_) GetSwitchType() int32 {
	return p.SwitchType
}

var NewPersonalDataSwitch__Value_DEFAULT string

func (p *NewPersonalDataSwitch_) GetValue() string {
	if !p.IsSetValue() {
		return NewPersonalDataSwitch__Value_DEFAULT
	}
	return *p.Value
}

var NewPersonalDataSwitch__SDKID_DEFAULT int64

func (p *NewPersonalDataSwitch_) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return NewPersonalDataSwitch__SDKID_DEFAULT
	}
	return *p.SDKID
}

var NewPersonalDataSwitch__ExtendValue_DEFAULT string

func (p *NewPersonalDataSwitch_) GetExtendValue() string {
	if !p.IsSetExtendValue() {
		return NewPersonalDataSwitch__ExtendValue_DEFAULT
	}
	return *p.ExtendValue
}
func (p *NewPersonalDataSwitch_) IsSetValue() bool {
	return p.Value != nil
}

func (p *NewPersonalDataSwitch_) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *NewPersonalDataSwitch_) IsSetExtendValue() bool {
	return p.ExtendValue != nil
}

func (p *NewPersonalDataSwitch_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NewPersonalDataSwitch_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CurrentUserId = v
	}
	return nil
}

func (p *NewPersonalDataSwitch_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SwitchType = v
	}
	return nil
}

func (p *NewPersonalDataSwitch_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = &v
	}
	return nil
}

func (p *NewPersonalDataSwitch_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *NewPersonalDataSwitch_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ExtendValue = &v
	}
	return nil
}

func (p *NewPersonalDataSwitch_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NewPersonalDataSwitch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NewPersonalDataSwitch_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentUserId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentUserId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CurrentUserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentUserId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentUserId: ", p), err)
	}
	return err
}

func (p *NewPersonalDataSwitch_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("switchType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:switchType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SwitchType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.switchType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:switchType: ", p), err)
	}
	return err
}

func (p *NewPersonalDataSwitch_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
		}
	}
	return err
}

func (p *NewPersonalDataSwitch_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
		}
	}
	return err
}

func (p *NewPersonalDataSwitch_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtendValue() {
		if err := oprot.WriteFieldBegin("extendValue", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extendValue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtendValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extendValue (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extendValue: ", p), err)
		}
	}
	return err
}

func (p *NewPersonalDataSwitch_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewPersonalDataSwitch_(%+v)", *p)
}

// 扩展字段，目前，全局勿扰中使用此字段，里面存储的startTimer,endTimer组成的json
//
// Attributes:
//  - ID
//  - ParentId
//  - DicValue
//  - Dickey
//  - Extend
//  - OrderNum: 扩展字段，格式为{"isEdit":0,"isFriend":0,"isInput":0,"isLogin":0,"isShow":0,"isStrange":0},isEdit:是否客户端可编辑;isFriend:客户端是否好友可见;isInput:是否必填字段;isLogin:是否登录项字段;isShow:客户端组织架构是否可见;isStrange:客户端是否陌生人可见
type EnterpriseDictionary struct {
	ID       int32  `thrift:"id,1" json:"id"`
	ParentId int32  `thrift:"parentId,2" json:"parentId"`
	DicValue string `thrift:"dicValue,3" json:"dicValue"`
	Dickey   string `thrift:"dickey,4" json:"dickey"`
	Extend   string `thrift:"extend,5" json:"extend"`
	OrderNum int32  `thrift:"orderNum,6" json:"orderNum"`
}

func NewEnterpriseDictionary() *EnterpriseDictionary {
	return &EnterpriseDictionary{}
}

func (p *EnterpriseDictionary) GetID() int32 {
	return p.ID
}

func (p *EnterpriseDictionary) GetParentId() int32 {
	return p.ParentId
}

func (p *EnterpriseDictionary) GetDicValue() string {
	return p.DicValue
}

func (p *EnterpriseDictionary) GetDickey() string {
	return p.Dickey
}

func (p *EnterpriseDictionary) GetExtend() string {
	return p.Extend
}

func (p *EnterpriseDictionary) GetOrderNum() int32 {
	return p.OrderNum
}
func (p *EnterpriseDictionary) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EnterpriseDictionary) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *EnterpriseDictionary) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ParentId = v
	}
	return nil
}

func (p *EnterpriseDictionary) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DicValue = v
	}
	return nil
}

func (p *EnterpriseDictionary) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Dickey = v
	}
	return nil
}

func (p *EnterpriseDictionary) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Extend = v
	}
	return nil
}

func (p *EnterpriseDictionary) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OrderNum = v
	}
	return nil
}

func (p *EnterpriseDictionary) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EnterpriseDictionary"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EnterpriseDictionary) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionary) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parentId", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parentId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ParentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parentId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parentId: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionary) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dicValue", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dicValue: ", p), err)
	}
	if err := oprot.WriteString(string(p.DicValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dicValue (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dicValue: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionary) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dickey", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dickey: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dickey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dickey (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dickey: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionary) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extend", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extend: ", p), err)
	}
	if err := oprot.WriteString(string(p.Extend)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extend (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extend: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionary) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderNum", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:orderNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderNum (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:orderNum: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionary) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnterpriseDictionary(%+v)", *p)
}

// 排序专用字段
//
// Attributes:
//  - EnDics
//  - Total
//  - TotalPage
type EnterpriseDictionaryStruct struct {
	EnDics    []*EnterpriseDictionary `thrift:"enDics,1" json:"enDics"`
	Total     int64                   `thrift:"total,2" json:"total"`
	TotalPage int64                   `thrift:"totalPage,3" json:"totalPage"`
}

func NewEnterpriseDictionaryStruct() *EnterpriseDictionaryStruct {
	return &EnterpriseDictionaryStruct{}
}

func (p *EnterpriseDictionaryStruct) GetEnDics() []*EnterpriseDictionary {
	return p.EnDics
}

func (p *EnterpriseDictionaryStruct) GetTotal() int64 {
	return p.Total
}

func (p *EnterpriseDictionaryStruct) GetTotalPage() int64 {
	return p.TotalPage
}
func (p *EnterpriseDictionaryStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EnterpriseDictionaryStruct) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EnterpriseDictionary, 0, size)
	p.EnDics = tSlice
	for i := 0; i < size; i++ {
		_elem52 := &EnterpriseDictionary{}
		if err := _elem52.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem52), err)
		}
		p.EnDics = append(p.EnDics, _elem52)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EnterpriseDictionaryStruct) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *EnterpriseDictionaryStruct) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *EnterpriseDictionaryStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EnterpriseDictionaryStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EnterpriseDictionaryStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("enDics", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:enDics: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EnDics)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EnDics {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:enDics: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionaryStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionaryStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPage: ", p), err)
	}
	return err
}

func (p *EnterpriseDictionaryStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnterpriseDictionaryStruct(%+v)", *p)
}

// Attributes:
//  - UserList
//  - Total
//  - TotalPage
//  - PageNo: 页码
//  - PageSize: 每页条数
type SmallUserPage struct {
	UserList  []*SmallUserBean `thrift:"userList,1" json:"userList"`
	Total     int64            `thrift:"total,2" json:"total"`
	TotalPage int64            `thrift:"totalPage,3" json:"totalPage"`
	PageNo    int32            `thrift:"pageNo,4" json:"pageNo"`
	PageSize  int32            `thrift:"pageSize,5" json:"pageSize"`
}

func NewSmallUserPage() *SmallUserPage {
	return &SmallUserPage{}
}

func (p *SmallUserPage) GetUserList() []*SmallUserBean {
	return p.UserList
}

func (p *SmallUserPage) GetTotal() int64 {
	return p.Total
}

func (p *SmallUserPage) GetTotalPage() int64 {
	return p.TotalPage
}

func (p *SmallUserPage) GetPageNo() int32 {
	return p.PageNo
}

func (p *SmallUserPage) GetPageSize() int32 {
	return p.PageSize
}
func (p *SmallUserPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallUserPage) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SmallUserBean, 0, size)
	p.UserList = tSlice
	for i := 0; i < size; i++ {
		_elem53 := &SmallUserBean{}
		if err := _elem53.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
		}
		p.UserList = append(p.UserList, _elem53)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SmallUserPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *SmallUserPage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *SmallUserPage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PageNo = v
	}
	return nil
}

func (p *SmallUserPage) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *SmallUserPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallUserPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallUserPage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UserList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userList: ", p), err)
	}
	return err
}

func (p *SmallUserPage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total: ", p), err)
	}
	return err
}

func (p *SmallUserPage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPage: ", p), err)
	}
	return err
}

func (p *SmallUserPage) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageNo", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageNo: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageNo (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageNo: ", p), err)
	}
	return err
}

func (p *SmallUserPage) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *SmallUserPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallUserPage(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Longitude
//  - Latitude
//  - Password
//  - SDKID
//  - Operation
type FaceJoinGroup struct {
	UserID    int64   `thrift:"userID,1" json:"userID"`
	Longitude float64 `thrift:"longitude,2" json:"longitude"`
	Latitude  float64 `thrift:"latitude,3" json:"latitude"`
	Password  *string `thrift:"password,4" json:"password,omitempty"`
	SDKID     int64   `thrift:"SDKID,5" json:"SDKID"`
	Operation int8    `thrift:"operation,6" json:"operation"`
}

func NewFaceJoinGroup() *FaceJoinGroup {
	return &FaceJoinGroup{}
}

func (p *FaceJoinGroup) GetUserID() int64 {
	return p.UserID
}

func (p *FaceJoinGroup) GetLongitude() float64 {
	return p.Longitude
}

func (p *FaceJoinGroup) GetLatitude() float64 {
	return p.Latitude
}

var FaceJoinGroup_Password_DEFAULT string

func (p *FaceJoinGroup) GetPassword() string {
	if !p.IsSetPassword() {
		return FaceJoinGroup_Password_DEFAULT
	}
	return *p.Password
}

func (p *FaceJoinGroup) GetSDKID() int64 {
	return p.SDKID
}

func (p *FaceJoinGroup) GetOperation() int8 {
	return p.Operation
}
func (p *FaceJoinGroup) IsSetPassword() bool {
	return p.Password != nil
}

func (p *FaceJoinGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FaceJoinGroup) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *FaceJoinGroup) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Longitude = v
	}
	return nil
}

func (p *FaceJoinGroup) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Latitude = v
	}
	return nil
}

func (p *FaceJoinGroup) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Password = &v
	}
	return nil
}

func (p *FaceJoinGroup) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *FaceJoinGroup) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Operation = temp
	}
	return nil
}

func (p *FaceJoinGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FaceJoinGroup"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FaceJoinGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *FaceJoinGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:longitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.longitude (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:longitude: ", p), err)
	}
	return err
}

func (p *FaceJoinGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err)
	}
	return err
}

func (p *FaceJoinGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Password)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err)
		}
	}
	return err
}

func (p *FaceJoinGroup) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SDKID: ", p), err)
	}
	return err
}

func (p *FaceJoinGroup) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operation", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:operation: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Operation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operation (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:operation: ", p), err)
	}
	return err
}

func (p *FaceJoinGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FaceJoinGroup(%+v)", *p)
}

// Attributes:
//  - Result_
//  - RoomID
//  - UserList
//  - SDKID
//  - RandomCode
type FaceJoinGroupResult_ struct {
	Result_    int8             `thrift:"result,1" json:"result"`
	RoomID     *string          `thrift:"roomID,2" json:"roomID,omitempty"`
	UserList   []*SmallUserBean `thrift:"userList,3" json:"userList,omitempty"`
	SDKID      int64            `thrift:"SDKID,4" json:"SDKID"`
	RandomCode *string          `thrift:"randomCode,5" json:"randomCode,omitempty"`
}

func NewFaceJoinGroupResult_() *FaceJoinGroupResult_ {
	return &FaceJoinGroupResult_{}
}

func (p *FaceJoinGroupResult_) GetResult_() int8 {
	return p.Result_
}

var FaceJoinGroupResult__RoomID_DEFAULT string

func (p *FaceJoinGroupResult_) GetRoomID() string {
	if !p.IsSetRoomID() {
		return FaceJoinGroupResult__RoomID_DEFAULT
	}
	return *p.RoomID
}

var FaceJoinGroupResult__UserList_DEFAULT []*SmallUserBean

func (p *FaceJoinGroupResult_) GetUserList() []*SmallUserBean {
	return p.UserList
}

func (p *FaceJoinGroupResult_) GetSDKID() int64 {
	return p.SDKID
}

var FaceJoinGroupResult__RandomCode_DEFAULT string

func (p *FaceJoinGroupResult_) GetRandomCode() string {
	if !p.IsSetRandomCode() {
		return FaceJoinGroupResult__RandomCode_DEFAULT
	}
	return *p.RandomCode
}
func (p *FaceJoinGroupResult_) IsSetRoomID() bool {
	return p.RoomID != nil
}

func (p *FaceJoinGroupResult_) IsSetUserList() bool {
	return p.UserList != nil
}

func (p *FaceJoinGroupResult_) IsSetRandomCode() bool {
	return p.RandomCode != nil
}

func (p *FaceJoinGroupResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FaceJoinGroupResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Result_ = temp
	}
	return nil
}

func (p *FaceJoinGroupResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RoomID = &v
	}
	return nil
}

func (p *FaceJoinGroupResult_) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SmallUserBean, 0, size)
	p.UserList = tSlice
	for i := 0; i < size; i++ {
		_elem54 := &SmallUserBean{}
		if err := _elem54.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem54), err)
		}
		p.UserList = append(p.UserList, _elem54)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FaceJoinGroupResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *FaceJoinGroupResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RandomCode = &v
	}
	return nil
}

func (p *FaceJoinGroupResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FaceJoinGroupResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FaceJoinGroupResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Result_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *FaceJoinGroupResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoomID() {
		if err := oprot.WriteFieldBegin("roomID", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RoomID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roomID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomID: ", p), err)
		}
	}
	return err
}

func (p *FaceJoinGroupResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserList() {
		if err := oprot.WriteFieldBegin("userList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.UserList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userList: ", p), err)
		}
	}
	return err
}

func (p *FaceJoinGroupResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
	}
	return err
}

func (p *FaceJoinGroupResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetRandomCode() {
		if err := oprot.WriteFieldBegin("randomCode", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:randomCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RandomCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.randomCode (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:randomCode: ", p), err)
		}
	}
	return err
}

func (p *FaceJoinGroupResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FaceJoinGroupResult_(%+v)", *p)
}

// Attributes:
//  - ResultCode: 801:md5Code不存在
// 802：md5Code文件已存在
//  - ResultMessage
//  - MdCode
//  - OrderNum
type EmoticonErrorResult_ struct {
	ResultCode    int32   `thrift:"resultCode,1" json:"resultCode"`
	ResultMessage *string `thrift:"resultMessage,2" json:"resultMessage,omitempty"`
	MdCode        *string `thrift:"mdCode,3" json:"mdCode,omitempty"`
	OrderNum      int32   `thrift:"orderNum,4" json:"orderNum"`
}

func NewEmoticonErrorResult_() *EmoticonErrorResult_ {
	return &EmoticonErrorResult_{}
}

func (p *EmoticonErrorResult_) GetResultCode() int32 {
	return p.ResultCode
}

var EmoticonErrorResult__ResultMessage_DEFAULT string

func (p *EmoticonErrorResult_) GetResultMessage() string {
	if !p.IsSetResultMessage() {
		return EmoticonErrorResult__ResultMessage_DEFAULT
	}
	return *p.ResultMessage
}

var EmoticonErrorResult__MdCode_DEFAULT string

func (p *EmoticonErrorResult_) GetMdCode() string {
	if !p.IsSetMdCode() {
		return EmoticonErrorResult__MdCode_DEFAULT
	}
	return *p.MdCode
}

func (p *EmoticonErrorResult_) GetOrderNum() int32 {
	return p.OrderNum
}
func (p *EmoticonErrorResult_) IsSetResultMessage() bool {
	return p.ResultMessage != nil
}

func (p *EmoticonErrorResult_) IsSetMdCode() bool {
	return p.MdCode != nil
}

func (p *EmoticonErrorResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmoticonErrorResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ResultCode = v
	}
	return nil
}

func (p *EmoticonErrorResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ResultMessage = &v
	}
	return nil
}

func (p *EmoticonErrorResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MdCode = &v
	}
	return nil
}

func (p *EmoticonErrorResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OrderNum = v
	}
	return nil
}

func (p *EmoticonErrorResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmoticonErrorResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmoticonErrorResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResultCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resultCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultCode: ", p), err)
	}
	return err
}

func (p *EmoticonErrorResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultMessage() {
		if err := oprot.WriteFieldBegin("resultMessage", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resultMessage: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ResultMessage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resultMessage (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resultMessage: ", p), err)
		}
	}
	return err
}

func (p *EmoticonErrorResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMdCode() {
		if err := oprot.WriteFieldBegin("mdCode", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mdCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MdCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mdCode (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mdCode: ", p), err)
		}
	}
	return err
}

func (p *EmoticonErrorResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderNum", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:orderNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderNum (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:orderNum: ", p), err)
	}
	return err
}

func (p *EmoticonErrorResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmoticonErrorResult_(%+v)", *p)
}

// Attributes:
//  - ResultCode: 0:操作成功
// 801:md5Code不存在
// 802：md5Code文件已存在
// 803：批量新增表情失败
//  - ResultMessage
//  - SuccessList
//  - FailList
type EmoticonOPResult_ struct {
	ResultCode    int32                   `thrift:"resultCode,1" json:"resultCode"`
	ResultMessage *string                 `thrift:"resultMessage,2" json:"resultMessage,omitempty"`
	SuccessList   []*EmoticonErrorResult_ `thrift:"successList,3" json:"successList,omitempty"`
	FailList      []*EmoticonErrorResult_ `thrift:"failList,4" json:"failList,omitempty"`
}

func NewEmoticonOPResult_() *EmoticonOPResult_ {
	return &EmoticonOPResult_{}
}

func (p *EmoticonOPResult_) GetResultCode() int32 {
	return p.ResultCode
}

var EmoticonOPResult__ResultMessage_DEFAULT string

func (p *EmoticonOPResult_) GetResultMessage() string {
	if !p.IsSetResultMessage() {
		return EmoticonOPResult__ResultMessage_DEFAULT
	}
	return *p.ResultMessage
}

var EmoticonOPResult__SuccessList_DEFAULT []*EmoticonErrorResult_

func (p *EmoticonOPResult_) GetSuccessList() []*EmoticonErrorResult_ {
	return p.SuccessList
}

var EmoticonOPResult__FailList_DEFAULT []*EmoticonErrorResult_

func (p *EmoticonOPResult_) GetFailList() []*EmoticonErrorResult_ {
	return p.FailList
}
func (p *EmoticonOPResult_) IsSetResultMessage() bool {
	return p.ResultMessage != nil
}

func (p *EmoticonOPResult_) IsSetSuccessList() bool {
	return p.SuccessList != nil
}

func (p *EmoticonOPResult_) IsSetFailList() bool {
	return p.FailList != nil
}

func (p *EmoticonOPResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmoticonOPResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ResultCode = v
	}
	return nil
}

func (p *EmoticonOPResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ResultMessage = &v
	}
	return nil
}

func (p *EmoticonOPResult_) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EmoticonErrorResult_, 0, size)
	p.SuccessList = tSlice
	for i := 0; i < size; i++ {
		_elem55 := &EmoticonErrorResult_{}
		if err := _elem55.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem55), err)
		}
		p.SuccessList = append(p.SuccessList, _elem55)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EmoticonOPResult_) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EmoticonErrorResult_, 0, size)
	p.FailList = tSlice
	for i := 0; i < size; i++ {
		_elem56 := &EmoticonErrorResult_{}
		if err := _elem56.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem56), err)
		}
		p.FailList = append(p.FailList, _elem56)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EmoticonOPResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmoticonOPResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmoticonOPResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResultCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resultCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultCode: ", p), err)
	}
	return err
}

func (p *EmoticonOPResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultMessage() {
		if err := oprot.WriteFieldBegin("resultMessage", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resultMessage: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ResultMessage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resultMessage (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resultMessage: ", p), err)
		}
	}
	return err
}

func (p *EmoticonOPResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccessList() {
		if err := oprot.WriteFieldBegin("successList", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:successList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SuccessList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SuccessList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:successList: ", p), err)
		}
	}
	return err
}

func (p *EmoticonOPResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailList() {
		if err := oprot.WriteFieldBegin("failList", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:failList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FailList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.FailList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:failList: ", p), err)
		}
	}
	return err
}

func (p *EmoticonOPResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmoticonOPResult_(%+v)", *p)
}

// Attributes:
//  - MdCode
//  - Depict
//  - UserID
//  - CreateTime
//  - MainUrl
//  - Property
//  - EmoStatus
//  - PackageCode
//  - Type
//  - Category
//  - Label
//  - ThumbnailUrl
//  - Meaning
//  - OrderNum
//  - ExtendFiled
//  - ExtendColumn
type Emoticon struct {
	MdCode       *string `thrift:"mdCode,1" json:"mdCode,omitempty"`
	Depict       *string `thrift:"depict,2" json:"depict,omitempty"`
	UserID       *int64  `thrift:"userID,3" json:"userID,omitempty"`
	CreateTime   *int64  `thrift:"createTime,4" json:"createTime,omitempty"`
	MainUrl      *string `thrift:"mainUrl,5" json:"mainUrl,omitempty"`
	Property     *int8   `thrift:"property,6" json:"property,omitempty"`
	EmoStatus    *int8   `thrift:"emoStatus,7" json:"emoStatus,omitempty"`
	PackageCode  *string `thrift:"packageCode,8" json:"packageCode,omitempty"`
	Type         *int8   `thrift:"type,9" json:"type,omitempty"`
	Category     *int8   `thrift:"category,10" json:"category,omitempty"`
	Label        *string `thrift:"label,11" json:"label,omitempty"`
	ThumbnailUrl *string `thrift:"thumbnailUrl,12" json:"thumbnailUrl,omitempty"`
	Meaning      *string `thrift:"meaning,13" json:"meaning,omitempty"`
	OrderNum     *string `thrift:"orderNum,14" json:"orderNum,omitempty"`
	ExtendFiled  *string `thrift:"extendFiled,15" json:"extendFiled,omitempty"`
	ExtendColumn *string `thrift:"extendColumn,16" json:"extendColumn,omitempty"`
}

func NewEmoticon() *Emoticon {
	return &Emoticon{}
}

var Emoticon_MdCode_DEFAULT string

func (p *Emoticon) GetMdCode() string {
	if !p.IsSetMdCode() {
		return Emoticon_MdCode_DEFAULT
	}
	return *p.MdCode
}

var Emoticon_Depict_DEFAULT string

func (p *Emoticon) GetDepict() string {
	if !p.IsSetDepict() {
		return Emoticon_Depict_DEFAULT
	}
	return *p.Depict
}

var Emoticon_UserID_DEFAULT int64

func (p *Emoticon) GetUserID() int64 {
	if !p.IsSetUserID() {
		return Emoticon_UserID_DEFAULT
	}
	return *p.UserID
}

var Emoticon_CreateTime_DEFAULT int64

func (p *Emoticon) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return Emoticon_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var Emoticon_MainUrl_DEFAULT string

func (p *Emoticon) GetMainUrl() string {
	if !p.IsSetMainUrl() {
		return Emoticon_MainUrl_DEFAULT
	}
	return *p.MainUrl
}

var Emoticon_Property_DEFAULT int8

func (p *Emoticon) GetProperty() int8 {
	if !p.IsSetProperty() {
		return Emoticon_Property_DEFAULT
	}
	return *p.Property
}

var Emoticon_EmoStatus_DEFAULT int8

func (p *Emoticon) GetEmoStatus() int8 {
	if !p.IsSetEmoStatus() {
		return Emoticon_EmoStatus_DEFAULT
	}
	return *p.EmoStatus
}

var Emoticon_PackageCode_DEFAULT string

func (p *Emoticon) GetPackageCode() string {
	if !p.IsSetPackageCode() {
		return Emoticon_PackageCode_DEFAULT
	}
	return *p.PackageCode
}

var Emoticon_Type_DEFAULT int8

func (p *Emoticon) GetType() int8 {
	if !p.IsSetType() {
		return Emoticon_Type_DEFAULT
	}
	return *p.Type
}

var Emoticon_Category_DEFAULT int8

func (p *Emoticon) GetCategory() int8 {
	if !p.IsSetCategory() {
		return Emoticon_Category_DEFAULT
	}
	return *p.Category
}

var Emoticon_Label_DEFAULT string

func (p *Emoticon) GetLabel() string {
	if !p.IsSetLabel() {
		return Emoticon_Label_DEFAULT
	}
	return *p.Label
}

var Emoticon_ThumbnailUrl_DEFAULT string

func (p *Emoticon) GetThumbnailUrl() string {
	if !p.IsSetThumbnailUrl() {
		return Emoticon_ThumbnailUrl_DEFAULT
	}
	return *p.ThumbnailUrl
}

var Emoticon_Meaning_DEFAULT string

func (p *Emoticon) GetMeaning() string {
	if !p.IsSetMeaning() {
		return Emoticon_Meaning_DEFAULT
	}
	return *p.Meaning
}

var Emoticon_OrderNum_DEFAULT string

func (p *Emoticon) GetOrderNum() string {
	if !p.IsSetOrderNum() {
		return Emoticon_OrderNum_DEFAULT
	}
	return *p.OrderNum
}

var Emoticon_ExtendFiled_DEFAULT string

func (p *Emoticon) GetExtendFiled() string {
	if !p.IsSetExtendFiled() {
		return Emoticon_ExtendFiled_DEFAULT
	}
	return *p.ExtendFiled
}

var Emoticon_ExtendColumn_DEFAULT string

func (p *Emoticon) GetExtendColumn() string {
	if !p.IsSetExtendColumn() {
		return Emoticon_ExtendColumn_DEFAULT
	}
	return *p.ExtendColumn
}
func (p *Emoticon) IsSetMdCode() bool {
	return p.MdCode != nil
}

func (p *Emoticon) IsSetDepict() bool {
	return p.Depict != nil
}

func (p *Emoticon) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *Emoticon) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *Emoticon) IsSetMainUrl() bool {
	return p.MainUrl != nil
}

func (p *Emoticon) IsSetProperty() bool {
	return p.Property != nil
}

func (p *Emoticon) IsSetEmoStatus() bool {
	return p.EmoStatus != nil
}

func (p *Emoticon) IsSetPackageCode() bool {
	return p.PackageCode != nil
}

func (p *Emoticon) IsSetType() bool {
	return p.Type != nil
}

func (p *Emoticon) IsSetCategory() bool {
	return p.Category != nil
}

func (p *Emoticon) IsSetLabel() bool {
	return p.Label != nil
}

func (p *Emoticon) IsSetThumbnailUrl() bool {
	return p.ThumbnailUrl != nil
}

func (p *Emoticon) IsSetMeaning() bool {
	return p.Meaning != nil
}

func (p *Emoticon) IsSetOrderNum() bool {
	return p.OrderNum != nil
}

func (p *Emoticon) IsSetExtendFiled() bool {
	return p.ExtendFiled != nil
}

func (p *Emoticon) IsSetExtendColumn() bool {
	return p.ExtendColumn != nil
}

func (p *Emoticon) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Emoticon) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MdCode = &v
	}
	return nil
}

func (p *Emoticon) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Depict = &v
	}
	return nil
}

func (p *Emoticon) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *Emoticon) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *Emoticon) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MainUrl = &v
	}
	return nil
}

func (p *Emoticon) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Property = &temp
	}
	return nil
}

func (p *Emoticon) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.EmoStatus = &temp
	}
	return nil
}

func (p *Emoticon) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.PackageCode = &v
	}
	return nil
}

func (p *Emoticon) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.Type = &temp
	}
	return nil
}

func (p *Emoticon) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.Category = &temp
	}
	return nil
}

func (p *Emoticon) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Label = &v
	}
	return nil
}

func (p *Emoticon) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ThumbnailUrl = &v
	}
	return nil
}

func (p *Emoticon) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Meaning = &v
	}
	return nil
}

func (p *Emoticon) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.OrderNum = &v
	}
	return nil
}

func (p *Emoticon) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ExtendFiled = &v
	}
	return nil
}

func (p *Emoticon) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.ExtendColumn = &v
	}
	return nil
}

func (p *Emoticon) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Emoticon"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Emoticon) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMdCode() {
		if err := oprot.WriteFieldBegin("mdCode", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mdCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MdCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mdCode (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mdCode: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDepict() {
		if err := oprot.WriteFieldBegin("depict", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:depict: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Depict)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.depict (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:depict: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userID: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTime: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMainUrl() {
		if err := oprot.WriteFieldBegin("mainUrl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mainUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MainUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mainUrl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mainUrl: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperty() {
		if err := oprot.WriteFieldBegin("property", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:property: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Property)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.property (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:property: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmoStatus() {
		if err := oprot.WriteFieldBegin("emoStatus", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:emoStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.EmoStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.emoStatus (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:emoStatus: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPackageCode() {
		if err := oprot.WriteFieldBegin("packageCode", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:packageCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PackageCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.packageCode (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:packageCode: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.BYTE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:type: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:type: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategory() {
		if err := oprot.WriteFieldBegin("category", thrift.BYTE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:category: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Category)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.category (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:category: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err := oprot.WriteFieldBegin("label", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:label: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Label)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.label (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:label: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetThumbnailUrl() {
		if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:thumbnailUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ThumbnailUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:thumbnailUrl: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetMeaning() {
		if err := oprot.WriteFieldBegin("meaning", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:meaning: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Meaning)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.meaning (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:meaning: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderNum() {
		if err := oprot.WriteFieldBegin("orderNum", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:orderNum: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrderNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orderNum (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:orderNum: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtendFiled() {
		if err := oprot.WriteFieldBegin("extendFiled", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:extendFiled: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtendFiled)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extendFiled (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:extendFiled: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtendColumn() {
		if err := oprot.WriteFieldBegin("extendColumn", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:extendColumn: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtendColumn)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extendColumn (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:extendColumn: ", p), err)
		}
	}
	return err
}

func (p *Emoticon) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Emoticon(%+v)", *p)
}

// Attributes:
//  - MdCode
//  - Depict
//  - UserID
//  - CreateTime
//  - MainUrl
//  - Property
//  - PackStatus
//  - Name
//  - BannerUrl
//  - Type
//  - Category
//  - Label
//  - IconUrl
//  - CoverUrl
//  - Instruction
//  - OrderNum
//  - ExtendFiled
//  - ExtendColumn
//  - EmoticonListJson
//  - Version
type EmoticonPackage struct {
	MdCode           *string `thrift:"mdCode,1" json:"mdCode,omitempty"`
	Depict           *string `thrift:"depict,2" json:"depict,omitempty"`
	UserID           *int64  `thrift:"userID,3" json:"userID,omitempty"`
	CreateTime       *int64  `thrift:"createTime,4" json:"createTime,omitempty"`
	MainUrl          *string `thrift:"mainUrl,5" json:"mainUrl,omitempty"`
	Property         *int8   `thrift:"property,6" json:"property,omitempty"`
	PackStatus       *int8   `thrift:"packStatus,7" json:"packStatus,omitempty"`
	Name             *string `thrift:"name,8" json:"name,omitempty"`
	BannerUrl        *string `thrift:"bannerUrl,9" json:"bannerUrl,omitempty"`
	Type             *int8   `thrift:"type,10" json:"type,omitempty"`
	Category         *int8   `thrift:"category,11" json:"category,omitempty"`
	Label            *string `thrift:"label,12" json:"label,omitempty"`
	IconUrl          *string `thrift:"iconUrl,13" json:"iconUrl,omitempty"`
	CoverUrl         *string `thrift:"coverUrl,14" json:"coverUrl,omitempty"`
	Instruction      *string `thrift:"instruction,15" json:"instruction,omitempty"`
	OrderNum         *string `thrift:"orderNum,16" json:"orderNum,omitempty"`
	ExtendFiled      *string `thrift:"extendFiled,17" json:"extendFiled,omitempty"`
	ExtendColumn     *string `thrift:"extendColumn,18" json:"extendColumn,omitempty"`
	EmoticonListJson *string `thrift:"emoticonListJson,19" json:"emoticonListJson,omitempty"`
	Version          *string `thrift:"version,20" json:"version,omitempty"`
}

func NewEmoticonPackage() *EmoticonPackage {
	return &EmoticonPackage{}
}

var EmoticonPackage_MdCode_DEFAULT string

func (p *EmoticonPackage) GetMdCode() string {
	if !p.IsSetMdCode() {
		return EmoticonPackage_MdCode_DEFAULT
	}
	return *p.MdCode
}

var EmoticonPackage_Depict_DEFAULT string

func (p *EmoticonPackage) GetDepict() string {
	if !p.IsSetDepict() {
		return EmoticonPackage_Depict_DEFAULT
	}
	return *p.Depict
}

var EmoticonPackage_UserID_DEFAULT int64

func (p *EmoticonPackage) GetUserID() int64 {
	if !p.IsSetUserID() {
		return EmoticonPackage_UserID_DEFAULT
	}
	return *p.UserID
}

var EmoticonPackage_CreateTime_DEFAULT int64

func (p *EmoticonPackage) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return EmoticonPackage_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var EmoticonPackage_MainUrl_DEFAULT string

func (p *EmoticonPackage) GetMainUrl() string {
	if !p.IsSetMainUrl() {
		return EmoticonPackage_MainUrl_DEFAULT
	}
	return *p.MainUrl
}

var EmoticonPackage_Property_DEFAULT int8

func (p *EmoticonPackage) GetProperty() int8 {
	if !p.IsSetProperty() {
		return EmoticonPackage_Property_DEFAULT
	}
	return *p.Property
}

var EmoticonPackage_PackStatus_DEFAULT int8

func (p *EmoticonPackage) GetPackStatus() int8 {
	if !p.IsSetPackStatus() {
		return EmoticonPackage_PackStatus_DEFAULT
	}
	return *p.PackStatus
}

var EmoticonPackage_Name_DEFAULT string

func (p *EmoticonPackage) GetName() string {
	if !p.IsSetName() {
		return EmoticonPackage_Name_DEFAULT
	}
	return *p.Name
}

var EmoticonPackage_BannerUrl_DEFAULT string

func (p *EmoticonPackage) GetBannerUrl() string {
	if !p.IsSetBannerUrl() {
		return EmoticonPackage_BannerUrl_DEFAULT
	}
	return *p.BannerUrl
}

var EmoticonPackage_Type_DEFAULT int8

func (p *EmoticonPackage) GetType() int8 {
	if !p.IsSetType() {
		return EmoticonPackage_Type_DEFAULT
	}
	return *p.Type
}

var EmoticonPackage_Category_DEFAULT int8

func (p *EmoticonPackage) GetCategory() int8 {
	if !p.IsSetCategory() {
		return EmoticonPackage_Category_DEFAULT
	}
	return *p.Category
}

var EmoticonPackage_Label_DEFAULT string

func (p *EmoticonPackage) GetLabel() string {
	if !p.IsSetLabel() {
		return EmoticonPackage_Label_DEFAULT
	}
	return *p.Label
}

var EmoticonPackage_IconUrl_DEFAULT string

func (p *EmoticonPackage) GetIconUrl() string {
	if !p.IsSetIconUrl() {
		return EmoticonPackage_IconUrl_DEFAULT
	}
	return *p.IconUrl
}

var EmoticonPackage_CoverUrl_DEFAULT string

func (p *EmoticonPackage) GetCoverUrl() string {
	if !p.IsSetCoverUrl() {
		return EmoticonPackage_CoverUrl_DEFAULT
	}
	return *p.CoverUrl
}

var EmoticonPackage_Instruction_DEFAULT string

func (p *EmoticonPackage) GetInstruction() string {
	if !p.IsSetInstruction() {
		return EmoticonPackage_Instruction_DEFAULT
	}
	return *p.Instruction
}

var EmoticonPackage_OrderNum_DEFAULT string

func (p *EmoticonPackage) GetOrderNum() string {
	if !p.IsSetOrderNum() {
		return EmoticonPackage_OrderNum_DEFAULT
	}
	return *p.OrderNum
}

var EmoticonPackage_ExtendFiled_DEFAULT string

func (p *EmoticonPackage) GetExtendFiled() string {
	if !p.IsSetExtendFiled() {
		return EmoticonPackage_ExtendFiled_DEFAULT
	}
	return *p.ExtendFiled
}

var EmoticonPackage_ExtendColumn_DEFAULT string

func (p *EmoticonPackage) GetExtendColumn() string {
	if !p.IsSetExtendColumn() {
		return EmoticonPackage_ExtendColumn_DEFAULT
	}
	return *p.ExtendColumn
}

var EmoticonPackage_EmoticonListJson_DEFAULT string

func (p *EmoticonPackage) GetEmoticonListJson() string {
	if !p.IsSetEmoticonListJson() {
		return EmoticonPackage_EmoticonListJson_DEFAULT
	}
	return *p.EmoticonListJson
}

var EmoticonPackage_Version_DEFAULT string

func (p *EmoticonPackage) GetVersion() string {
	if !p.IsSetVersion() {
		return EmoticonPackage_Version_DEFAULT
	}
	return *p.Version
}
func (p *EmoticonPackage) IsSetMdCode() bool {
	return p.MdCode != nil
}

func (p *EmoticonPackage) IsSetDepict() bool {
	return p.Depict != nil
}

func (p *EmoticonPackage) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *EmoticonPackage) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *EmoticonPackage) IsSetMainUrl() bool {
	return p.MainUrl != nil
}

func (p *EmoticonPackage) IsSetProperty() bool {
	return p.Property != nil
}

func (p *EmoticonPackage) IsSetPackStatus() bool {
	return p.PackStatus != nil
}

func (p *EmoticonPackage) IsSetName() bool {
	return p.Name != nil
}

func (p *EmoticonPackage) IsSetBannerUrl() bool {
	return p.BannerUrl != nil
}

func (p *EmoticonPackage) IsSetType() bool {
	return p.Type != nil
}

func (p *EmoticonPackage) IsSetCategory() bool {
	return p.Category != nil
}

func (p *EmoticonPackage) IsSetLabel() bool {
	return p.Label != nil
}

func (p *EmoticonPackage) IsSetIconUrl() bool {
	return p.IconUrl != nil
}

func (p *EmoticonPackage) IsSetCoverUrl() bool {
	return p.CoverUrl != nil
}

func (p *EmoticonPackage) IsSetInstruction() bool {
	return p.Instruction != nil
}

func (p *EmoticonPackage) IsSetOrderNum() bool {
	return p.OrderNum != nil
}

func (p *EmoticonPackage) IsSetExtendFiled() bool {
	return p.ExtendFiled != nil
}

func (p *EmoticonPackage) IsSetExtendColumn() bool {
	return p.ExtendColumn != nil
}

func (p *EmoticonPackage) IsSetEmoticonListJson() bool {
	return p.EmoticonListJson != nil
}

func (p *EmoticonPackage) IsSetVersion() bool {
	return p.Version != nil
}

func (p *EmoticonPackage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmoticonPackage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MdCode = &v
	}
	return nil
}

func (p *EmoticonPackage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Depict = &v
	}
	return nil
}

func (p *EmoticonPackage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *EmoticonPackage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *EmoticonPackage) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MainUrl = &v
	}
	return nil
}

func (p *EmoticonPackage) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Property = &temp
	}
	return nil
}

func (p *EmoticonPackage) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.PackStatus = &temp
	}
	return nil
}

func (p *EmoticonPackage) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *EmoticonPackage) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.BannerUrl = &v
	}
	return nil
}

func (p *EmoticonPackage) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.Type = &temp
	}
	return nil
}

func (p *EmoticonPackage) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.Category = &temp
	}
	return nil
}

func (p *EmoticonPackage) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Label = &v
	}
	return nil
}

func (p *EmoticonPackage) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.IconUrl = &v
	}
	return nil
}

func (p *EmoticonPackage) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.CoverUrl = &v
	}
	return nil
}

func (p *EmoticonPackage) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Instruction = &v
	}
	return nil
}

func (p *EmoticonPackage) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.OrderNum = &v
	}
	return nil
}

func (p *EmoticonPackage) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.ExtendFiled = &v
	}
	return nil
}

func (p *EmoticonPackage) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.ExtendColumn = &v
	}
	return nil
}

func (p *EmoticonPackage) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.EmoticonListJson = &v
	}
	return nil
}

func (p *EmoticonPackage) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *EmoticonPackage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmoticonPackage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmoticonPackage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMdCode() {
		if err := oprot.WriteFieldBegin("mdCode", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mdCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MdCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mdCode (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mdCode: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDepict() {
		if err := oprot.WriteFieldBegin("depict", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:depict: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Depict)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.depict (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:depict: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userID: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTime: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMainUrl() {
		if err := oprot.WriteFieldBegin("mainUrl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mainUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MainUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mainUrl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mainUrl: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperty() {
		if err := oprot.WriteFieldBegin("property", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:property: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Property)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.property (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:property: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPackStatus() {
		if err := oprot.WriteFieldBegin("packStatus", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:packStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.PackStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.packStatus (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:packStatus: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:name: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBannerUrl() {
		if err := oprot.WriteFieldBegin("bannerUrl", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:bannerUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BannerUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bannerUrl (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:bannerUrl: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.BYTE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategory() {
		if err := oprot.WriteFieldBegin("category", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:category: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Category)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.category (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:category: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err := oprot.WriteFieldBegin("label", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:label: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Label)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.label (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:label: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetIconUrl() {
		if err := oprot.WriteFieldBegin("iconUrl", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:iconUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.IconUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.iconUrl (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:iconUrl: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCoverUrl() {
		if err := oprot.WriteFieldBegin("coverUrl", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:coverUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CoverUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.coverUrl (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:coverUrl: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstruction() {
		if err := oprot.WriteFieldBegin("instruction", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:instruction: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Instruction)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.instruction (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:instruction: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderNum() {
		if err := oprot.WriteFieldBegin("orderNum", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:orderNum: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrderNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orderNum (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:orderNum: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtendFiled() {
		if err := oprot.WriteFieldBegin("extendFiled", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:extendFiled: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtendFiled)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extendFiled (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:extendFiled: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtendColumn() {
		if err := oprot.WriteFieldBegin("extendColumn", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:extendColumn: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtendColumn)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extendColumn (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:extendColumn: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmoticonListJson() {
		if err := oprot.WriteFieldBegin("emoticonListJson", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:emoticonListJson: ", p), err)
		}
		if err := oprot.WriteString(string(*p.EmoticonListJson)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.emoticonListJson (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:emoticonListJson: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:version: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:version: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmoticonPackage(%+v)", *p)
}

// 表情设置分页数据
// 分页参数和结果分页共用
//
// Attributes:
//  - PageNum: 请求页码
//  - PageSize: 每页大小
//  - TotalPage: 总页数
//  - TotalItems: 总条数
//  - Items: 当前页数据
//  - SDKID
type EmoticonPackagePage struct {
	PageNum    *int32             `thrift:"pageNum,1" json:"pageNum,omitempty"`
	PageSize   *int16             `thrift:"pageSize,2" json:"pageSize,omitempty"`
	TotalPage  *int64             `thrift:"totalPage,3" json:"totalPage,omitempty"`
	TotalItems *int64             `thrift:"totalItems,4" json:"totalItems,omitempty"`
	Items      []*EmoticonPackage `thrift:"items,5" json:"items,omitempty"`
	SDKID      int64              `thrift:"SDKID,6" json:"SDKID"`
}

func NewEmoticonPackagePage() *EmoticonPackagePage {
	return &EmoticonPackagePage{}
}

var EmoticonPackagePage_PageNum_DEFAULT int32

func (p *EmoticonPackagePage) GetPageNum() int32 {
	if !p.IsSetPageNum() {
		return EmoticonPackagePage_PageNum_DEFAULT
	}
	return *p.PageNum
}

var EmoticonPackagePage_PageSize_DEFAULT int16

func (p *EmoticonPackagePage) GetPageSize() int16 {
	if !p.IsSetPageSize() {
		return EmoticonPackagePage_PageSize_DEFAULT
	}
	return *p.PageSize
}

var EmoticonPackagePage_TotalPage_DEFAULT int64

func (p *EmoticonPackagePage) GetTotalPage() int64 {
	if !p.IsSetTotalPage() {
		return EmoticonPackagePage_TotalPage_DEFAULT
	}
	return *p.TotalPage
}

var EmoticonPackagePage_TotalItems_DEFAULT int64

func (p *EmoticonPackagePage) GetTotalItems() int64 {
	if !p.IsSetTotalItems() {
		return EmoticonPackagePage_TotalItems_DEFAULT
	}
	return *p.TotalItems
}

var EmoticonPackagePage_Items_DEFAULT []*EmoticonPackage

func (p *EmoticonPackagePage) GetItems() []*EmoticonPackage {
	return p.Items
}

func (p *EmoticonPackagePage) GetSDKID() int64 {
	return p.SDKID
}
func (p *EmoticonPackagePage) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *EmoticonPackagePage) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *EmoticonPackagePage) IsSetTotalPage() bool {
	return p.TotalPage != nil
}

func (p *EmoticonPackagePage) IsSetTotalItems() bool {
	return p.TotalItems != nil
}

func (p *EmoticonPackagePage) IsSetItems() bool {
	return p.Items != nil
}

func (p *EmoticonPackagePage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmoticonPackagePage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNum = &v
	}
	return nil
}

func (p *EmoticonPackagePage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *EmoticonPackagePage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPage = &v
	}
	return nil
}

func (p *EmoticonPackagePage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalItems = &v
	}
	return nil
}

func (p *EmoticonPackagePage) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EmoticonPackage, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem57 := &EmoticonPackage{}
		if err := _elem57.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem57), err)
		}
		p.Items = append(p.Items, _elem57)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *EmoticonPackagePage) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *EmoticonPackagePage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EmoticonPackagePage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmoticonPackagePage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNum() {
		if err := oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageNum (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNum: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackagePage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err := oprot.WriteFieldBegin("pageSize", thrift.I16, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.PageSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackagePage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalPage() {
		if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPage: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TotalPage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalPage (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPage: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackagePage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalItems() {
		if err := oprot.WriteFieldBegin("totalItems", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalItems: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TotalItems)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalItems (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalItems: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackagePage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err := oprot.WriteFieldBegin("items", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:items: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:items: ", p), err)
		}
	}
	return err
}

func (p *EmoticonPackagePage) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SDKID: ", p), err)
	}
	return err
}

func (p *EmoticonPackagePage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmoticonPackagePage(%+v)", *p)
}

// 应用市场信息
//
// Attributes:
//  - AppID
//  - AppSign
//  - AppName
//  - AppIcon
//  - EntID
//  - Status
//  - AppFunctintroduce
//  - Version
//  - OwnerId
//  - AppType
//  - DefaultInstall
//  - ShowInMy
//  - MainUrl
//  - AdminUrl
//  - MyUrl
//  - PackageName
//  - DownloadUrl
//  - UrlScheme
//  - QuickUrl
//  - Extend
//  - ActivityName
//  - SourceType
//  - VestAppID
//  - AppTypeID
//  - AppTypeName
//  - ProcessName
type SmallMarketAppInfo struct {
	AppID             *int64  `thrift:"appID,1" json:"appID,omitempty"`
	AppSign           string  `thrift:"appSign,2" json:"appSign"`
	AppName           string  `thrift:"appName,3" json:"appName"`
	AppIcon           string  `thrift:"appIcon,4" json:"appIcon"`
	EntID             int64   `thrift:"entID,5" json:"entID"`
	Status            *int8   `thrift:"status,6" json:"status,omitempty"`
	AppFunctintroduce *string `thrift:"appFunctintroduce,7" json:"appFunctintroduce,omitempty"`
	Version           *string `thrift:"version,8" json:"version,omitempty"`
	OwnerId           *int64  `thrift:"ownerId,9" json:"ownerId,omitempty"`
	AppType           *int8   `thrift:"appType,10" json:"appType,omitempty"`
	DefaultInstall    *int8   `thrift:"defaultInstall,11" json:"defaultInstall,omitempty"`
	ShowInMy          *int8   `thrift:"showInMy,12" json:"showInMy,omitempty"`
	MainUrl           *string `thrift:"mainUrl,13" json:"mainUrl,omitempty"`
	AdminUrl          *string `thrift:"adminUrl,14" json:"adminUrl,omitempty"`
	MyUrl             *string `thrift:"myUrl,15" json:"myUrl,omitempty"`
	PackageName       *string `thrift:"packageName,16" json:"packageName,omitempty"`
	DownloadUrl       *string `thrift:"downloadUrl,17" json:"downloadUrl,omitempty"`
	UrlScheme         *string `thrift:"urlScheme,18" json:"urlScheme,omitempty"`
	QuickUrl          *string `thrift:"quickUrl,19" json:"quickUrl,omitempty"`
	Extend            *string `thrift:"extend,20" json:"extend,omitempty"`
	ActivityName      *string `thrift:"activityName,21" json:"activityName,omitempty"`
	// unused field # 22
	SourceType  *int8   `thrift:"sourceType,23" json:"sourceType,omitempty"`
	VestAppID   *int64  `thrift:"vestAppID,24" json:"vestAppID,omitempty"`
	AppTypeID   *int64  `thrift:"appTypeID,25" json:"appTypeID,omitempty"`
	AppTypeName *string `thrift:"appTypeName,26" json:"appTypeName,omitempty"`
	ProcessName *string `thrift:"processName,27" json:"processName,omitempty"`
}

func NewSmallMarketAppInfo() *SmallMarketAppInfo {
	return &SmallMarketAppInfo{}
}

var SmallMarketAppInfo_AppID_DEFAULT int64

func (p *SmallMarketAppInfo) GetAppID() int64 {
	if !p.IsSetAppID() {
		return SmallMarketAppInfo_AppID_DEFAULT
	}
	return *p.AppID
}

func (p *SmallMarketAppInfo) GetAppSign() string {
	return p.AppSign
}

func (p *SmallMarketAppInfo) GetAppName() string {
	return p.AppName
}

func (p *SmallMarketAppInfo) GetAppIcon() string {
	return p.AppIcon
}

func (p *SmallMarketAppInfo) GetEntID() int64 {
	return p.EntID
}

var SmallMarketAppInfo_Status_DEFAULT int8

func (p *SmallMarketAppInfo) GetStatus() int8 {
	if !p.IsSetStatus() {
		return SmallMarketAppInfo_Status_DEFAULT
	}
	return *p.Status
}

var SmallMarketAppInfo_AppFunctintroduce_DEFAULT string

func (p *SmallMarketAppInfo) GetAppFunctintroduce() string {
	if !p.IsSetAppFunctintroduce() {
		return SmallMarketAppInfo_AppFunctintroduce_DEFAULT
	}
	return *p.AppFunctintroduce
}

var SmallMarketAppInfo_Version_DEFAULT string

func (p *SmallMarketAppInfo) GetVersion() string {
	if !p.IsSetVersion() {
		return SmallMarketAppInfo_Version_DEFAULT
	}
	return *p.Version
}

var SmallMarketAppInfo_OwnerId_DEFAULT int64

func (p *SmallMarketAppInfo) GetOwnerId() int64 {
	if !p.IsSetOwnerId() {
		return SmallMarketAppInfo_OwnerId_DEFAULT
	}
	return *p.OwnerId
}

var SmallMarketAppInfo_AppType_DEFAULT int8

func (p *SmallMarketAppInfo) GetAppType() int8 {
	if !p.IsSetAppType() {
		return SmallMarketAppInfo_AppType_DEFAULT
	}
	return *p.AppType
}

var SmallMarketAppInfo_DefaultInstall_DEFAULT int8

func (p *SmallMarketAppInfo) GetDefaultInstall() int8 {
	if !p.IsSetDefaultInstall() {
		return SmallMarketAppInfo_DefaultInstall_DEFAULT
	}
	return *p.DefaultInstall
}

var SmallMarketAppInfo_ShowInMy_DEFAULT int8

func (p *SmallMarketAppInfo) GetShowInMy() int8 {
	if !p.IsSetShowInMy() {
		return SmallMarketAppInfo_ShowInMy_DEFAULT
	}
	return *p.ShowInMy
}

var SmallMarketAppInfo_MainUrl_DEFAULT string

func (p *SmallMarketAppInfo) GetMainUrl() string {
	if !p.IsSetMainUrl() {
		return SmallMarketAppInfo_MainUrl_DEFAULT
	}
	return *p.MainUrl
}

var SmallMarketAppInfo_AdminUrl_DEFAULT string

func (p *SmallMarketAppInfo) GetAdminUrl() string {
	if !p.IsSetAdminUrl() {
		return SmallMarketAppInfo_AdminUrl_DEFAULT
	}
	return *p.AdminUrl
}

var SmallMarketAppInfo_MyUrl_DEFAULT string

func (p *SmallMarketAppInfo) GetMyUrl() string {
	if !p.IsSetMyUrl() {
		return SmallMarketAppInfo_MyUrl_DEFAULT
	}
	return *p.MyUrl
}

var SmallMarketAppInfo_PackageName_DEFAULT string

func (p *SmallMarketAppInfo) GetPackageName() string {
	if !p.IsSetPackageName() {
		return SmallMarketAppInfo_PackageName_DEFAULT
	}
	return *p.PackageName
}

var SmallMarketAppInfo_DownloadUrl_DEFAULT string

func (p *SmallMarketAppInfo) GetDownloadUrl() string {
	if !p.IsSetDownloadUrl() {
		return SmallMarketAppInfo_DownloadUrl_DEFAULT
	}
	return *p.DownloadUrl
}

var SmallMarketAppInfo_UrlScheme_DEFAULT string

func (p *SmallMarketAppInfo) GetUrlScheme() string {
	if !p.IsSetUrlScheme() {
		return SmallMarketAppInfo_UrlScheme_DEFAULT
	}
	return *p.UrlScheme
}

var SmallMarketAppInfo_QuickUrl_DEFAULT string

func (p *SmallMarketAppInfo) GetQuickUrl() string {
	if !p.IsSetQuickUrl() {
		return SmallMarketAppInfo_QuickUrl_DEFAULT
	}
	return *p.QuickUrl
}

var SmallMarketAppInfo_Extend_DEFAULT string

func (p *SmallMarketAppInfo) GetExtend() string {
	if !p.IsSetExtend() {
		return SmallMarketAppInfo_Extend_DEFAULT
	}
	return *p.Extend
}

var SmallMarketAppInfo_ActivityName_DEFAULT string

func (p *SmallMarketAppInfo) GetActivityName() string {
	if !p.IsSetActivityName() {
		return SmallMarketAppInfo_ActivityName_DEFAULT
	}
	return *p.ActivityName
}

var SmallMarketAppInfo_SourceType_DEFAULT int8

func (p *SmallMarketAppInfo) GetSourceType() int8 {
	if !p.IsSetSourceType() {
		return SmallMarketAppInfo_SourceType_DEFAULT
	}
	return *p.SourceType
}

var SmallMarketAppInfo_VestAppID_DEFAULT int64

func (p *SmallMarketAppInfo) GetVestAppID() int64 {
	if !p.IsSetVestAppID() {
		return SmallMarketAppInfo_VestAppID_DEFAULT
	}
	return *p.VestAppID
}

var SmallMarketAppInfo_AppTypeID_DEFAULT int64

func (p *SmallMarketAppInfo) GetAppTypeID() int64 {
	if !p.IsSetAppTypeID() {
		return SmallMarketAppInfo_AppTypeID_DEFAULT
	}
	return *p.AppTypeID
}

var SmallMarketAppInfo_AppTypeName_DEFAULT string

func (p *SmallMarketAppInfo) GetAppTypeName() string {
	if !p.IsSetAppTypeName() {
		return SmallMarketAppInfo_AppTypeName_DEFAULT
	}
	return *p.AppTypeName
}

var SmallMarketAppInfo_ProcessName_DEFAULT string

func (p *SmallMarketAppInfo) GetProcessName() string {
	if !p.IsSetProcessName() {
		return SmallMarketAppInfo_ProcessName_DEFAULT
	}
	return *p.ProcessName
}
func (p *SmallMarketAppInfo) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *SmallMarketAppInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *SmallMarketAppInfo) IsSetAppFunctintroduce() bool {
	return p.AppFunctintroduce != nil
}

func (p *SmallMarketAppInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *SmallMarketAppInfo) IsSetOwnerId() bool {
	return p.OwnerId != nil
}

func (p *SmallMarketAppInfo) IsSetAppType() bool {
	return p.AppType != nil
}

func (p *SmallMarketAppInfo) IsSetDefaultInstall() bool {
	return p.DefaultInstall != nil
}

func (p *SmallMarketAppInfo) IsSetShowInMy() bool {
	return p.ShowInMy != nil
}

func (p *SmallMarketAppInfo) IsSetMainUrl() bool {
	return p.MainUrl != nil
}

func (p *SmallMarketAppInfo) IsSetAdminUrl() bool {
	return p.AdminUrl != nil
}

func (p *SmallMarketAppInfo) IsSetMyUrl() bool {
	return p.MyUrl != nil
}

func (p *SmallMarketAppInfo) IsSetPackageName() bool {
	return p.PackageName != nil
}

func (p *SmallMarketAppInfo) IsSetDownloadUrl() bool {
	return p.DownloadUrl != nil
}

func (p *SmallMarketAppInfo) IsSetUrlScheme() bool {
	return p.UrlScheme != nil
}

func (p *SmallMarketAppInfo) IsSetQuickUrl() bool {
	return p.QuickUrl != nil
}

func (p *SmallMarketAppInfo) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *SmallMarketAppInfo) IsSetActivityName() bool {
	return p.ActivityName != nil
}

func (p *SmallMarketAppInfo) IsSetSourceType() bool {
	return p.SourceType != nil
}

func (p *SmallMarketAppInfo) IsSetVestAppID() bool {
	return p.VestAppID != nil
}

func (p *SmallMarketAppInfo) IsSetAppTypeID() bool {
	return p.AppTypeID != nil
}

func (p *SmallMarketAppInfo) IsSetAppTypeName() bool {
	return p.AppTypeName != nil
}

func (p *SmallMarketAppInfo) IsSetProcessName() bool {
	return p.ProcessName != nil
}

func (p *SmallMarketAppInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallMarketAppInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppID = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppSign = v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppIcon = v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.EntID = v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *SmallMarketAppInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.AppFunctintroduce = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Version = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.OwnerId = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := int8(v)
		p.AppType = &temp
	}
	return nil
}

func (p *SmallMarketAppInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := int8(v)
		p.DefaultInstall = &temp
	}
	return nil
}

func (p *SmallMarketAppInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.ShowInMy = &temp
	}
	return nil
}

func (p *SmallMarketAppInfo) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.MainUrl = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.AdminUrl = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.MyUrl = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.PackageName = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.DownloadUrl = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.UrlScheme = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.QuickUrl = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.ActivityName = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		temp := int8(v)
		p.SourceType = &temp
	}
	return nil
}

func (p *SmallMarketAppInfo) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.VestAppID = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.AppTypeID = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.AppTypeName = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.ProcessName = &v
	}
	return nil
}

func (p *SmallMarketAppInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallMarketAppInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallMarketAppInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err := oprot.WriteFieldBegin("appID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AppID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appID: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appSign", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appSign: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppSign)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appSign (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appSign: ", p), err)
	}
	return err
}

func (p *SmallMarketAppInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appName: ", p), err)
	}
	return err
}

func (p *SmallMarketAppInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appIcon", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appIcon: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppIcon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appIcon (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appIcon: ", p), err)
	}
	return err
}

func (p *SmallMarketAppInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entID", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:entID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EntID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.entID (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:entID: ", p), err)
	}
	return err
}

func (p *SmallMarketAppInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppFunctintroduce() {
		if err := oprot.WriteFieldBegin("appFunctintroduce", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:appFunctintroduce: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppFunctintroduce)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appFunctintroduce (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:appFunctintroduce: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:version: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Version)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.version (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:version: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerId() {
		if err := oprot.WriteFieldBegin("ownerId", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ownerId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OwnerId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ownerId (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ownerId: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppType() {
		if err := oprot.WriteFieldBegin("appType", thrift.BYTE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:appType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.AppType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appType (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:appType: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultInstall() {
		if err := oprot.WriteFieldBegin("defaultInstall", thrift.BYTE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:defaultInstall: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.DefaultInstall)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultInstall (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:defaultInstall: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowInMy() {
		if err := oprot.WriteFieldBegin("showInMy", thrift.BYTE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:showInMy: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ShowInMy)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.showInMy (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:showInMy: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetMainUrl() {
		if err := oprot.WriteFieldBegin("mainUrl", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:mainUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MainUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mainUrl (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:mainUrl: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdminUrl() {
		if err := oprot.WriteFieldBegin("adminUrl", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:adminUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AdminUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.adminUrl (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:adminUrl: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetMyUrl() {
		if err := oprot.WriteFieldBegin("myUrl", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:myUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MyUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.myUrl (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:myUrl: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetPackageName() {
		if err := oprot.WriteFieldBegin("packageName", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:packageName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PackageName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.packageName (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:packageName: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadUrl() {
		if err := oprot.WriteFieldBegin("downloadUrl", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:downloadUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DownloadUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.downloadUrl (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:downloadUrl: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetUrlScheme() {
		if err := oprot.WriteFieldBegin("urlScheme", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:urlScheme: ", p), err)
		}
		if err := oprot.WriteString(string(*p.UrlScheme)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.urlScheme (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:urlScheme: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuickUrl() {
		if err := oprot.WriteFieldBegin("quickUrl", thrift.STRING, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:quickUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.QuickUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.quickUrl (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:quickUrl: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:extend: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetActivityName() {
		if err := oprot.WriteFieldBegin("activityName", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:activityName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ActivityName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.activityName (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:activityName: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceType() {
		if err := oprot.WriteFieldBegin("sourceType", thrift.BYTE, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:sourceType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.SourceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceType (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:sourceType: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetVestAppID() {
		if err := oprot.WriteFieldBegin("vestAppID", thrift.I64, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:vestAppID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.VestAppID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vestAppID (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:vestAppID: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppTypeID() {
		if err := oprot.WriteFieldBegin("appTypeID", thrift.I64, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:appTypeID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AppTypeID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appTypeID (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:appTypeID: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppTypeName() {
		if err := oprot.WriteFieldBegin("appTypeName", thrift.STRING, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:appTypeName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppTypeName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appTypeName (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:appTypeName: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessName() {
		if err := oprot.WriteFieldBegin("processName", thrift.STRING, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:processName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ProcessName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.processName (27) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:processName: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallMarketAppInfo(%+v)", *p)
}

// 应用市场分页查询条件
//
// Attributes:
//  - PageNum
//  - PageSize
//  - DeviceType
//  - UserID
//  - AppName
type SmallMarketAppQueryParam struct {
	PageNum    *int32  `thrift:"pageNum,1" json:"pageNum,omitempty"`
	PageSize   *int32  `thrift:"pageSize,2" json:"pageSize,omitempty"`
	DeviceType *int32  `thrift:"deviceType,3" json:"deviceType,omitempty"`
	UserID     *int64  `thrift:"userID,4" json:"userID,omitempty"`
	AppName    *string `thrift:"appName,5" json:"appName,omitempty"`
}

func NewSmallMarketAppQueryParam() *SmallMarketAppQueryParam {
	return &SmallMarketAppQueryParam{}
}

var SmallMarketAppQueryParam_PageNum_DEFAULT int32

func (p *SmallMarketAppQueryParam) GetPageNum() int32 {
	if !p.IsSetPageNum() {
		return SmallMarketAppQueryParam_PageNum_DEFAULT
	}
	return *p.PageNum
}

var SmallMarketAppQueryParam_PageSize_DEFAULT int32

func (p *SmallMarketAppQueryParam) GetPageSize() int32 {
	if !p.IsSetPageSize() {
		return SmallMarketAppQueryParam_PageSize_DEFAULT
	}
	return *p.PageSize
}

var SmallMarketAppQueryParam_DeviceType_DEFAULT int32

func (p *SmallMarketAppQueryParam) GetDeviceType() int32 {
	if !p.IsSetDeviceType() {
		return SmallMarketAppQueryParam_DeviceType_DEFAULT
	}
	return *p.DeviceType
}

var SmallMarketAppQueryParam_UserID_DEFAULT int64

func (p *SmallMarketAppQueryParam) GetUserID() int64 {
	if !p.IsSetUserID() {
		return SmallMarketAppQueryParam_UserID_DEFAULT
	}
	return *p.UserID
}

var SmallMarketAppQueryParam_AppName_DEFAULT string

func (p *SmallMarketAppQueryParam) GetAppName() string {
	if !p.IsSetAppName() {
		return SmallMarketAppQueryParam_AppName_DEFAULT
	}
	return *p.AppName
}
func (p *SmallMarketAppQueryParam) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *SmallMarketAppQueryParam) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *SmallMarketAppQueryParam) IsSetDeviceType() bool {
	return p.DeviceType != nil
}

func (p *SmallMarketAppQueryParam) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *SmallMarketAppQueryParam) IsSetAppName() bool {
	return p.AppName != nil
}

func (p *SmallMarketAppQueryParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallMarketAppQueryParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNum = &v
	}
	return nil
}

func (p *SmallMarketAppQueryParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *SmallMarketAppQueryParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DeviceType = &v
	}
	return nil
}

func (p *SmallMarketAppQueryParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *SmallMarketAppQueryParam) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.AppName = &v
	}
	return nil
}

func (p *SmallMarketAppQueryParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallMarketAppQueryParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallMarketAppQueryParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNum() {
		if err := oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageNum (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNum: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppQueryParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppQueryParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeviceType() {
		if err := oprot.WriteFieldBegin("deviceType", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DeviceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deviceType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceType: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppQueryParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userID: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppQueryParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppName() {
		if err := oprot.WriteFieldBegin("appName", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:appName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appName (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:appName: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppQueryParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallMarketAppQueryParam(%+v)", *p)
}

// 应用市场分页查询结果
//
// Attributes:
//  - PageNum
//  - PageSize
//  - Count
//  - TotalPage
//  - MarketAppInfos
type SmallMarketAppPage struct {
	PageNum        *int32                `thrift:"pageNum,1" json:"pageNum,omitempty"`
	PageSize       *int32                `thrift:"pageSize,2" json:"pageSize,omitempty"`
	Count          *int32                `thrift:"count,3" json:"count,omitempty"`
	TotalPage      *int32                `thrift:"totalPage,4" json:"totalPage,omitempty"`
	MarketAppInfos []*SmallMarketAppInfo `thrift:"marketAppInfos,5" json:"marketAppInfos,omitempty"`
}

func NewSmallMarketAppPage() *SmallMarketAppPage {
	return &SmallMarketAppPage{}
}

var SmallMarketAppPage_PageNum_DEFAULT int32

func (p *SmallMarketAppPage) GetPageNum() int32 {
	if !p.IsSetPageNum() {
		return SmallMarketAppPage_PageNum_DEFAULT
	}
	return *p.PageNum
}

var SmallMarketAppPage_PageSize_DEFAULT int32

func (p *SmallMarketAppPage) GetPageSize() int32 {
	if !p.IsSetPageSize() {
		return SmallMarketAppPage_PageSize_DEFAULT
	}
	return *p.PageSize
}

var SmallMarketAppPage_Count_DEFAULT int32

func (p *SmallMarketAppPage) GetCount() int32 {
	if !p.IsSetCount() {
		return SmallMarketAppPage_Count_DEFAULT
	}
	return *p.Count
}

var SmallMarketAppPage_TotalPage_DEFAULT int32

func (p *SmallMarketAppPage) GetTotalPage() int32 {
	if !p.IsSetTotalPage() {
		return SmallMarketAppPage_TotalPage_DEFAULT
	}
	return *p.TotalPage
}

var SmallMarketAppPage_MarketAppInfos_DEFAULT []*SmallMarketAppInfo

func (p *SmallMarketAppPage) GetMarketAppInfos() []*SmallMarketAppInfo {
	return p.MarketAppInfos
}
func (p *SmallMarketAppPage) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *SmallMarketAppPage) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *SmallMarketAppPage) IsSetCount() bool {
	return p.Count != nil
}

func (p *SmallMarketAppPage) IsSetTotalPage() bool {
	return p.TotalPage != nil
}

func (p *SmallMarketAppPage) IsSetMarketAppInfos() bool {
	return p.MarketAppInfos != nil
}

func (p *SmallMarketAppPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallMarketAppPage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNum = &v
	}
	return nil
}

func (p *SmallMarketAppPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *SmallMarketAppPage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = &v
	}
	return nil
}

func (p *SmallMarketAppPage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalPage = &v
	}
	return nil
}

func (p *SmallMarketAppPage) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SmallMarketAppInfo, 0, size)
	p.MarketAppInfos = tSlice
	for i := 0; i < size; i++ {
		_elem58 := &SmallMarketAppInfo{}
		if err := _elem58.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem58), err)
		}
		p.MarketAppInfos = append(p.MarketAppInfos, _elem58)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SmallMarketAppPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallMarketAppPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallMarketAppPage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNum() {
		if err := oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageNum (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNum: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppPage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppPage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Count)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppPage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalPage() {
		if err := oprot.WriteFieldBegin("totalPage", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalPage: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalPage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalPage (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalPage: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppPage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMarketAppInfos() {
		if err := oprot.WriteFieldBegin("marketAppInfos", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:marketAppInfos: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MarketAppInfos)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MarketAppInfos {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:marketAppInfos: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallMarketAppPage(%+v)", *p)
}

// 账户绑定
//
// Attributes:
//  - UserID: 用户ID
//  - AccountType: 账号类型
//  - Operation: 操作: 1:绑定,2解绑
//  - SDKID
//  - Lang: 当前系统语言: 如zh_CN, en_US等
type AccountBinding struct {
	UserID      int64        `thrift:"userID,1" json:"userID"`
	AccountType *AccountType `thrift:"accountType,2" json:"accountType"`
	Operation   int8         `thrift:"operation,3" json:"operation"`
	SDKID       int64        `thrift:"SDKID,4" json:"SDKID"`
	Lang        string       `thrift:"lang,5" json:"lang"`
}

func NewAccountBinding() *AccountBinding {
	return &AccountBinding{}
}

func (p *AccountBinding) GetUserID() int64 {
	return p.UserID
}

var AccountBinding_AccountType_DEFAULT *AccountType

func (p *AccountBinding) GetAccountType() *AccountType {
	if !p.IsSetAccountType() {
		return AccountBinding_AccountType_DEFAULT
	}
	return p.AccountType
}

func (p *AccountBinding) GetOperation() int8 {
	return p.Operation
}

func (p *AccountBinding) GetSDKID() int64 {
	return p.SDKID
}

func (p *AccountBinding) GetLang() string {
	return p.Lang
}
func (p *AccountBinding) IsSetAccountType() bool {
	return p.AccountType != nil
}

func (p *AccountBinding) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccountBinding) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *AccountBinding) readField2(iprot thrift.TProtocol) error {
	p.AccountType = &AccountType{}
	if err := p.AccountType.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AccountType), err)
	}
	return nil
}

func (p *AccountBinding) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Operation = temp
	}
	return nil
}

func (p *AccountBinding) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *AccountBinding) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Lang = v
	}
	return nil
}

func (p *AccountBinding) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AccountBinding"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccountBinding) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *AccountBinding) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accountType", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountType: ", p), err)
	}
	if err := p.AccountType.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AccountType), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountType: ", p), err)
	}
	return err
}

func (p *AccountBinding) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operation", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:operation: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Operation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operation (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:operation: ", p), err)
	}
	return err
}

func (p *AccountBinding) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
	}
	return err
}

func (p *AccountBinding) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lang", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lang: ", p), err)
	}
	if err := oprot.WriteString(string(p.Lang)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lang (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lang: ", p), err)
	}
	return err
}

func (p *AccountBinding) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccountBinding(%+v)", *p)
}

// 操作日志
//
// Attributes:
//  - LogId
//  - Type
//  - AdminId
//  - AdminName
//  - BusinessName
//  - TableName
//  - Result_
//  - ResultType
//  - CreateAt
//  - Extend
//  - BusinessName_EN
//  - IsRead
//  - RoleID
//  - OrgCode
//  - ModelClassName
//  - ModelMethodName
//  - IpAddr
//  - OrgName
type OperationLog struct {
	LogId           *int64  `thrift:"logId,1" json:"logId,omitempty"`
	Type            *int32  `thrift:"type,2" json:"type,omitempty"`
	AdminId         *int64  `thrift:"adminId,3" json:"adminId,omitempty"`
	AdminName       *string `thrift:"adminName,4" json:"adminName,omitempty"`
	BusinessName    *string `thrift:"businessName,5" json:"businessName,omitempty"`
	TableName       *string `thrift:"tableName,6" json:"tableName,omitempty"`
	Result_         *string `thrift:"result,7" json:"result,omitempty"`
	ResultType      *int32  `thrift:"resultType,8" json:"resultType,omitempty"`
	CreateAt        *int64  `thrift:"createAt,9" json:"createAt,omitempty"`
	Extend          *string `thrift:"extend,10" json:"extend,omitempty"`
	BusinessName_EN *string `thrift:"businessName_EN,11" json:"businessName_EN,omitempty"`
	IsRead          *int32  `thrift:"isRead,12" json:"isRead,omitempty"`
	RoleID          *int64  `thrift:"roleID,13" json:"roleID,omitempty"`
	OrgCode         *string `thrift:"orgCode,14" json:"orgCode,omitempty"`
	ModelClassName  *string `thrift:"modelClassName,15" json:"modelClassName,omitempty"`
	ModelMethodName *string `thrift:"modelMethodName,16" json:"modelMethodName,omitempty"`
	IpAddr          *string `thrift:"ipAddr,17" json:"ipAddr,omitempty"`
	OrgName         *string `thrift:"orgName,18" json:"orgName,omitempty"`
}

func NewOperationLog() *OperationLog {
	return &OperationLog{}
}

var OperationLog_LogId_DEFAULT int64

func (p *OperationLog) GetLogId() int64 {
	if !p.IsSetLogId() {
		return OperationLog_LogId_DEFAULT
	}
	return *p.LogId
}

var OperationLog_Type_DEFAULT int32

func (p *OperationLog) GetType() int32 {
	if !p.IsSetType() {
		return OperationLog_Type_DEFAULT
	}
	return *p.Type
}

var OperationLog_AdminId_DEFAULT int64

func (p *OperationLog) GetAdminId() int64 {
	if !p.IsSetAdminId() {
		return OperationLog_AdminId_DEFAULT
	}
	return *p.AdminId
}

var OperationLog_AdminName_DEFAULT string

func (p *OperationLog) GetAdminName() string {
	if !p.IsSetAdminName() {
		return OperationLog_AdminName_DEFAULT
	}
	return *p.AdminName
}

var OperationLog_BusinessName_DEFAULT string

func (p *OperationLog) GetBusinessName() string {
	if !p.IsSetBusinessName() {
		return OperationLog_BusinessName_DEFAULT
	}
	return *p.BusinessName
}

var OperationLog_TableName_DEFAULT string

func (p *OperationLog) GetTableName() string {
	if !p.IsSetTableName() {
		return OperationLog_TableName_DEFAULT
	}
	return *p.TableName
}

var OperationLog_Result__DEFAULT string

func (p *OperationLog) GetResult_() string {
	if !p.IsSetResult_() {
		return OperationLog_Result__DEFAULT
	}
	return *p.Result_
}

var OperationLog_ResultType_DEFAULT int32

func (p *OperationLog) GetResultType() int32 {
	if !p.IsSetResultType() {
		return OperationLog_ResultType_DEFAULT
	}
	return *p.ResultType
}

var OperationLog_CreateAt_DEFAULT int64

func (p *OperationLog) GetCreateAt() int64 {
	if !p.IsSetCreateAt() {
		return OperationLog_CreateAt_DEFAULT
	}
	return *p.CreateAt
}

var OperationLog_Extend_DEFAULT string

func (p *OperationLog) GetExtend() string {
	if !p.IsSetExtend() {
		return OperationLog_Extend_DEFAULT
	}
	return *p.Extend
}

var OperationLog_BusinessName_EN_DEFAULT string

func (p *OperationLog) GetBusinessName_EN() string {
	if !p.IsSetBusinessName_EN() {
		return OperationLog_BusinessName_EN_DEFAULT
	}
	return *p.BusinessName_EN
}

var OperationLog_IsRead_DEFAULT int32

func (p *OperationLog) GetIsRead() int32 {
	if !p.IsSetIsRead() {
		return OperationLog_IsRead_DEFAULT
	}
	return *p.IsRead
}

var OperationLog_RoleID_DEFAULT int64

func (p *OperationLog) GetRoleID() int64 {
	if !p.IsSetRoleID() {
		return OperationLog_RoleID_DEFAULT
	}
	return *p.RoleID
}

var OperationLog_OrgCode_DEFAULT string

func (p *OperationLog) GetOrgCode() string {
	if !p.IsSetOrgCode() {
		return OperationLog_OrgCode_DEFAULT
	}
	return *p.OrgCode
}

var OperationLog_ModelClassName_DEFAULT string

func (p *OperationLog) GetModelClassName() string {
	if !p.IsSetModelClassName() {
		return OperationLog_ModelClassName_DEFAULT
	}
	return *p.ModelClassName
}

var OperationLog_ModelMethodName_DEFAULT string

func (p *OperationLog) GetModelMethodName() string {
	if !p.IsSetModelMethodName() {
		return OperationLog_ModelMethodName_DEFAULT
	}
	return *p.ModelMethodName
}

var OperationLog_IpAddr_DEFAULT string

func (p *OperationLog) GetIpAddr() string {
	if !p.IsSetIpAddr() {
		return OperationLog_IpAddr_DEFAULT
	}
	return *p.IpAddr
}

var OperationLog_OrgName_DEFAULT string

func (p *OperationLog) GetOrgName() string {
	if !p.IsSetOrgName() {
		return OperationLog_OrgName_DEFAULT
	}
	return *p.OrgName
}
func (p *OperationLog) IsSetLogId() bool {
	return p.LogId != nil
}

func (p *OperationLog) IsSetType() bool {
	return p.Type != nil
}

func (p *OperationLog) IsSetAdminId() bool {
	return p.AdminId != nil
}

func (p *OperationLog) IsSetAdminName() bool {
	return p.AdminName != nil
}

func (p *OperationLog) IsSetBusinessName() bool {
	return p.BusinessName != nil
}

func (p *OperationLog) IsSetTableName() bool {
	return p.TableName != nil
}

func (p *OperationLog) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *OperationLog) IsSetResultType() bool {
	return p.ResultType != nil
}

func (p *OperationLog) IsSetCreateAt() bool {
	return p.CreateAt != nil
}

func (p *OperationLog) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *OperationLog) IsSetBusinessName_EN() bool {
	return p.BusinessName_EN != nil
}

func (p *OperationLog) IsSetIsRead() bool {
	return p.IsRead != nil
}

func (p *OperationLog) IsSetRoleID() bool {
	return p.RoleID != nil
}

func (p *OperationLog) IsSetOrgCode() bool {
	return p.OrgCode != nil
}

func (p *OperationLog) IsSetModelClassName() bool {
	return p.ModelClassName != nil
}

func (p *OperationLog) IsSetModelMethodName() bool {
	return p.ModelMethodName != nil
}

func (p *OperationLog) IsSetIpAddr() bool {
	return p.IpAddr != nil
}

func (p *OperationLog) IsSetOrgName() bool {
	return p.OrgName != nil
}

func (p *OperationLog) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OperationLog) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LogId = &v
	}
	return nil
}

func (p *OperationLog) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *OperationLog) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AdminId = &v
	}
	return nil
}

func (p *OperationLog) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AdminName = &v
	}
	return nil
}

func (p *OperationLog) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BusinessName = &v
	}
	return nil
}

func (p *OperationLog) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TableName = &v
	}
	return nil
}

func (p *OperationLog) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Result_ = &v
	}
	return nil
}

func (p *OperationLog) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ResultType = &v
	}
	return nil
}

func (p *OperationLog) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.CreateAt = &v
	}
	return nil
}

func (p *OperationLog) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *OperationLog) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.BusinessName_EN = &v
	}
	return nil
}

func (p *OperationLog) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.IsRead = &v
	}
	return nil
}

func (p *OperationLog) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.RoleID = &v
	}
	return nil
}

func (p *OperationLog) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.OrgCode = &v
	}
	return nil
}

func (p *OperationLog) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ModelClassName = &v
	}
	return nil
}

func (p *OperationLog) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.ModelMethodName = &v
	}
	return nil
}

func (p *OperationLog) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.IpAddr = &v
	}
	return nil
}

func (p *OperationLog) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.OrgName = &v
	}
	return nil
}

func (p *OperationLog) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OperationLog"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OperationLog) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogId() {
		if err := oprot.WriteFieldBegin("logId", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:logId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LogId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.logId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:logId: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdminId() {
		if err := oprot.WriteFieldBegin("adminId", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:adminId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AdminId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.adminId (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:adminId: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdminName() {
		if err := oprot.WriteFieldBegin("adminName", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:adminName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AdminName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.adminName (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:adminName: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessName() {
		if err := oprot.WriteFieldBegin("businessName", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:businessName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BusinessName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessName (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:businessName: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTableName() {
		if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tableName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TableName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tableName (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tableName: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err := oprot.WriteFieldBegin("result", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:result: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Result_)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.result (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:result: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultType() {
		if err := oprot.WriteFieldBegin("resultType", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:resultType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ResultType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resultType (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:resultType: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateAt() {
		if err := oprot.WriteFieldBegin("createAt", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:createAt: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateAt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createAt (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:createAt: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extend: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessName_EN() {
		if err := oprot.WriteFieldBegin("businessName_EN", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:businessName_EN: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BusinessName_EN)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessName_EN (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:businessName_EN: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsRead() {
		if err := oprot.WriteFieldBegin("isRead", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isRead: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.IsRead)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isRead (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isRead: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetRoleID() {
		if err := oprot.WriteFieldBegin("roleID", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:roleID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RoleID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roleID (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:roleID: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgCode() {
		if err := oprot.WriteFieldBegin("orgCode", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:orgCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgCode (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:orgCode: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelClassName() {
		if err := oprot.WriteFieldBegin("modelClassName", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:modelClassName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ModelClassName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.modelClassName (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:modelClassName: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelMethodName() {
		if err := oprot.WriteFieldBegin("modelMethodName", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:modelMethodName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ModelMethodName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.modelMethodName (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:modelMethodName: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetIpAddr() {
		if err := oprot.WriteFieldBegin("ipAddr", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:ipAddr: ", p), err)
		}
		if err := oprot.WriteString(string(*p.IpAddr)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ipAddr (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:ipAddr: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgName() {
		if err := oprot.WriteFieldBegin("orgName", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:orgName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgName (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:orgName: ", p), err)
		}
	}
	return err
}

func (p *OperationLog) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperationLog(%+v)", *p)
}

// 操作日志分页查询结果
//
// Attributes:
//  - PageNum
//  - PageSize
//  - Count
//  - TotalPage
//  - Logs
type OperationLogPage struct {
	PageNum   *int32          `thrift:"pageNum,1" json:"pageNum,omitempty"`
	PageSize  *int32          `thrift:"pageSize,2" json:"pageSize,omitempty"`
	Count     *int32          `thrift:"count,3" json:"count,omitempty"`
	TotalPage *int32          `thrift:"totalPage,4" json:"totalPage,omitempty"`
	Logs      []*OperationLog `thrift:"logs,5" json:"logs,omitempty"`
}

func NewOperationLogPage() *OperationLogPage {
	return &OperationLogPage{}
}

var OperationLogPage_PageNum_DEFAULT int32

func (p *OperationLogPage) GetPageNum() int32 {
	if !p.IsSetPageNum() {
		return OperationLogPage_PageNum_DEFAULT
	}
	return *p.PageNum
}

var OperationLogPage_PageSize_DEFAULT int32

func (p *OperationLogPage) GetPageSize() int32 {
	if !p.IsSetPageSize() {
		return OperationLogPage_PageSize_DEFAULT
	}
	return *p.PageSize
}

var OperationLogPage_Count_DEFAULT int32

func (p *OperationLogPage) GetCount() int32 {
	if !p.IsSetCount() {
		return OperationLogPage_Count_DEFAULT
	}
	return *p.Count
}

var OperationLogPage_TotalPage_DEFAULT int32

func (p *OperationLogPage) GetTotalPage() int32 {
	if !p.IsSetTotalPage() {
		return OperationLogPage_TotalPage_DEFAULT
	}
	return *p.TotalPage
}

var OperationLogPage_Logs_DEFAULT []*OperationLog

func (p *OperationLogPage) GetLogs() []*OperationLog {
	return p.Logs
}
func (p *OperationLogPage) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *OperationLogPage) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *OperationLogPage) IsSetCount() bool {
	return p.Count != nil
}

func (p *OperationLogPage) IsSetTotalPage() bool {
	return p.TotalPage != nil
}

func (p *OperationLogPage) IsSetLogs() bool {
	return p.Logs != nil
}

func (p *OperationLogPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OperationLogPage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNum = &v
	}
	return nil
}

func (p *OperationLogPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *OperationLogPage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = &v
	}
	return nil
}

func (p *OperationLogPage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalPage = &v
	}
	return nil
}

func (p *OperationLogPage) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OperationLog, 0, size)
	p.Logs = tSlice
	for i := 0; i < size; i++ {
		_elem59 := &OperationLog{}
		if err := _elem59.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem59), err)
		}
		p.Logs = append(p.Logs, _elem59)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OperationLogPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OperationLogPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OperationLogPage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNum() {
		if err := oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageNum (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNum: ", p), err)
		}
	}
	return err
}

func (p *OperationLogPage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
		}
	}
	return err
}

func (p *OperationLogPage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Count)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
		}
	}
	return err
}

func (p *OperationLogPage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalPage() {
		if err := oprot.WriteFieldBegin("totalPage", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalPage: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalPage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalPage (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalPage: ", p), err)
		}
	}
	return err
}

func (p *OperationLogPage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogs() {
		if err := oprot.WriteFieldBegin("logs", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:logs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Logs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Logs {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:logs: ", p), err)
		}
	}
	return err
}

func (p *OperationLogPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperationLogPage(%+v)", *p)
}

// 操作参数日志
//
// Attributes:
//  - ArgsId
//  - LogId
//  - ArgsKey
//  - ArgsValue
//  - ArgsType
//  - CreateAt
//  - Extend
type OperationLogArgs_ struct {
	ArgsId    *int64  `thrift:"argsId,1" json:"argsId,omitempty"`
	LogId     *int64  `thrift:"logId,2" json:"logId,omitempty"`
	ArgsKey   *string `thrift:"argsKey,3" json:"argsKey,omitempty"`
	ArgsValue *string `thrift:"argsValue,4" json:"argsValue,omitempty"`
	ArgsType  *string `thrift:"argsType,5" json:"argsType,omitempty"`
	CreateAt  *int64  `thrift:"createAt,6" json:"createAt,omitempty"`
	Extend    *string `thrift:"extend,7" json:"extend,omitempty"`
}

func NewOperationLogArgs_() *OperationLogArgs_ {
	return &OperationLogArgs_{}
}

var OperationLogArgs__ArgsId_DEFAULT int64

func (p *OperationLogArgs_) GetArgsId() int64 {
	if !p.IsSetArgsId() {
		return OperationLogArgs__ArgsId_DEFAULT
	}
	return *p.ArgsId
}

var OperationLogArgs__LogId_DEFAULT int64

func (p *OperationLogArgs_) GetLogId() int64 {
	if !p.IsSetLogId() {
		return OperationLogArgs__LogId_DEFAULT
	}
	return *p.LogId
}

var OperationLogArgs__ArgsKey_DEFAULT string

func (p *OperationLogArgs_) GetArgsKey() string {
	if !p.IsSetArgsKey() {
		return OperationLogArgs__ArgsKey_DEFAULT
	}
	return *p.ArgsKey
}

var OperationLogArgs__ArgsValue_DEFAULT string

func (p *OperationLogArgs_) GetArgsValue() string {
	if !p.IsSetArgsValue() {
		return OperationLogArgs__ArgsValue_DEFAULT
	}
	return *p.ArgsValue
}

var OperationLogArgs__ArgsType_DEFAULT string

func (p *OperationLogArgs_) GetArgsType() string {
	if !p.IsSetArgsType() {
		return OperationLogArgs__ArgsType_DEFAULT
	}
	return *p.ArgsType
}

var OperationLogArgs__CreateAt_DEFAULT int64

func (p *OperationLogArgs_) GetCreateAt() int64 {
	if !p.IsSetCreateAt() {
		return OperationLogArgs__CreateAt_DEFAULT
	}
	return *p.CreateAt
}

var OperationLogArgs__Extend_DEFAULT string

func (p *OperationLogArgs_) GetExtend() string {
	if !p.IsSetExtend() {
		return OperationLogArgs__Extend_DEFAULT
	}
	return *p.Extend
}
func (p *OperationLogArgs_) IsSetArgsId() bool {
	return p.ArgsId != nil
}

func (p *OperationLogArgs_) IsSetLogId() bool {
	return p.LogId != nil
}

func (p *OperationLogArgs_) IsSetArgsKey() bool {
	return p.ArgsKey != nil
}

func (p *OperationLogArgs_) IsSetArgsValue() bool {
	return p.ArgsValue != nil
}

func (p *OperationLogArgs_) IsSetArgsType() bool {
	return p.ArgsType != nil
}

func (p *OperationLogArgs_) IsSetCreateAt() bool {
	return p.CreateAt != nil
}

func (p *OperationLogArgs_) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *OperationLogArgs_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OperationLogArgs_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ArgsId = &v
	}
	return nil
}

func (p *OperationLogArgs_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LogId = &v
	}
	return nil
}

func (p *OperationLogArgs_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ArgsKey = &v
	}
	return nil
}

func (p *OperationLogArgs_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ArgsValue = &v
	}
	return nil
}

func (p *OperationLogArgs_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ArgsType = &v
	}
	return nil
}

func (p *OperationLogArgs_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CreateAt = &v
	}
	return nil
}

func (p *OperationLogArgs_) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *OperationLogArgs_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OperationLogArgs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OperationLogArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetArgsId() {
		if err := oprot.WriteFieldBegin("argsId", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:argsId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ArgsId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.argsId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:argsId: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogId() {
		if err := oprot.WriteFieldBegin("logId", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:logId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LogId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.logId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:logId: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetArgsKey() {
		if err := oprot.WriteFieldBegin("argsKey", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:argsKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ArgsKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.argsKey (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:argsKey: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgs_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetArgsValue() {
		if err := oprot.WriteFieldBegin("argsValue", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:argsValue: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ArgsValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.argsValue (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:argsValue: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgs_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetArgsType() {
		if err := oprot.WriteFieldBegin("argsType", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:argsType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ArgsType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.argsType (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:argsType: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgs_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateAt() {
		if err := oprot.WriteFieldBegin("createAt", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createAt: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateAt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createAt (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createAt: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgs_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extend: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperationLogArgs_(%+v)", *p)
}

// 操作参数日志分页查询结果
//
// Attributes:
//  - PageNum
//  - PageSize
//  - Count
//  - TotalPage
//  - ArgsLogs
type OperationLogArgsPage struct {
	PageNum   *int32               `thrift:"pageNum,1" json:"pageNum,omitempty"`
	PageSize  *int32               `thrift:"pageSize,2" json:"pageSize,omitempty"`
	Count     *int32               `thrift:"count,3" json:"count,omitempty"`
	TotalPage *int32               `thrift:"totalPage,4" json:"totalPage,omitempty"`
	ArgsLogs  []*OperationLogArgs_ `thrift:"ArgsLogs,5" json:"ArgsLogs,omitempty"`
}

func NewOperationLogArgsPage() *OperationLogArgsPage {
	return &OperationLogArgsPage{}
}

var OperationLogArgsPage_PageNum_DEFAULT int32

func (p *OperationLogArgsPage) GetPageNum() int32 {
	if !p.IsSetPageNum() {
		return OperationLogArgsPage_PageNum_DEFAULT
	}
	return *p.PageNum
}

var OperationLogArgsPage_PageSize_DEFAULT int32

func (p *OperationLogArgsPage) GetPageSize() int32 {
	if !p.IsSetPageSize() {
		return OperationLogArgsPage_PageSize_DEFAULT
	}
	return *p.PageSize
}

var OperationLogArgsPage_Count_DEFAULT int32

func (p *OperationLogArgsPage) GetCount() int32 {
	if !p.IsSetCount() {
		return OperationLogArgsPage_Count_DEFAULT
	}
	return *p.Count
}

var OperationLogArgsPage_TotalPage_DEFAULT int32

func (p *OperationLogArgsPage) GetTotalPage() int32 {
	if !p.IsSetTotalPage() {
		return OperationLogArgsPage_TotalPage_DEFAULT
	}
	return *p.TotalPage
}

var OperationLogArgsPage_ArgsLogs_DEFAULT []*OperationLogArgs_

func (p *OperationLogArgsPage) GetArgsLogs() []*OperationLogArgs_ {
	return p.ArgsLogs
}
func (p *OperationLogArgsPage) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *OperationLogArgsPage) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *OperationLogArgsPage) IsSetCount() bool {
	return p.Count != nil
}

func (p *OperationLogArgsPage) IsSetTotalPage() bool {
	return p.TotalPage != nil
}

func (p *OperationLogArgsPage) IsSetArgsLogs() bool {
	return p.ArgsLogs != nil
}

func (p *OperationLogArgsPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OperationLogArgsPage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNum = &v
	}
	return nil
}

func (p *OperationLogArgsPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *OperationLogArgsPage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = &v
	}
	return nil
}

func (p *OperationLogArgsPage) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalPage = &v
	}
	return nil
}

func (p *OperationLogArgsPage) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OperationLogArgs_, 0, size)
	p.ArgsLogs = tSlice
	for i := 0; i < size; i++ {
		_elem60 := &OperationLogArgs_{}
		if err := _elem60.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem60), err)
		}
		p.ArgsLogs = append(p.ArgsLogs, _elem60)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OperationLogArgsPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OperationLogArgsPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OperationLogArgsPage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNum() {
		if err := oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageNum (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNum: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgsPage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PageSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgsPage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCount() {
		if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Count)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgsPage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalPage() {
		if err := oprot.WriteFieldBegin("totalPage", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalPage: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalPage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalPage (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalPage: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgsPage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetArgsLogs() {
		if err := oprot.WriteFieldBegin("ArgsLogs", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ArgsLogs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ArgsLogs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ArgsLogs {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ArgsLogs: ", p), err)
		}
	}
	return err
}

func (p *OperationLogArgsPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperationLogArgsPage(%+v)", *p)
}

// 应用市场logo图片
//
// Attributes:
//  - Title
//  - ImgUrl
type BannerMarketBean struct {
	Title  string `thrift:"title,1" json:"title"`
	ImgUrl string `thrift:"imgUrl,2" json:"imgUrl"`
}

func NewBannerMarketBean() *BannerMarketBean {
	return &BannerMarketBean{}
}

func (p *BannerMarketBean) GetTitle() string {
	return p.Title
}

func (p *BannerMarketBean) GetImgUrl() string {
	return p.ImgUrl
}
func (p *BannerMarketBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BannerMarketBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *BannerMarketBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ImgUrl = v
	}
	return nil
}

func (p *BannerMarketBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BannerMarketBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BannerMarketBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err)
	}
	return err
}

func (p *BannerMarketBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("imgUrl", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imgUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImgUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.imgUrl (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imgUrl: ", p), err)
	}
	return err
}

func (p *BannerMarketBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BannerMarketBean(%+v)", *p)
}

// SDK用户
//
// Attributes:
//  - Account
//  - Pwd
//  - PwdStrength
type SDKUser struct {
	Account     string  `thrift:"account,1" json:"account"`
	Pwd         *string `thrift:"pwd,2" json:"pwd,omitempty"`
	PwdStrength *int8   `thrift:"pwdStrength,3" json:"pwdStrength,omitempty"`
}

func NewSDKUser() *SDKUser {
	return &SDKUser{}
}

func (p *SDKUser) GetAccount() string {
	return p.Account
}

var SDKUser_Pwd_DEFAULT string

func (p *SDKUser) GetPwd() string {
	if !p.IsSetPwd() {
		return SDKUser_Pwd_DEFAULT
	}
	return *p.Pwd
}

var SDKUser_PwdStrength_DEFAULT int8

func (p *SDKUser) GetPwdStrength() int8 {
	if !p.IsSetPwdStrength() {
		return SDKUser_PwdStrength_DEFAULT
	}
	return *p.PwdStrength
}
func (p *SDKUser) IsSetPwd() bool {
	return p.Pwd != nil
}

func (p *SDKUser) IsSetPwdStrength() bool {
	return p.PwdStrength != nil
}

func (p *SDKUser) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SDKUser) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *SDKUser) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = &v
	}
	return nil
}

func (p *SDKUser) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.PwdStrength = &temp
	}
	return nil
}

func (p *SDKUser) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SDKUser"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SDKUser) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err)
	}
	if err := oprot.WriteString(string(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err)
	}
	return err
}

func (p *SDKUser) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwd() {
		if err := oprot.WriteFieldBegin("pwd", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Pwd)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
		}
	}
	return err
}

func (p *SDKUser) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPwdStrength() {
		if err := oprot.WriteFieldBegin("pwdStrength", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pwdStrength: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.PwdStrength)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pwdStrength (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pwdStrength: ", p), err)
		}
	}
	return err
}

func (p *SDKUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SDKUser(%+v)", *p)
}

// UserService.getLoginAuthCode参数
//
// Attributes:
//  - AppID
//  - UserID
//  - Account
//  - AccountType
//  - Password
type LoginAuthParam struct {
	AppID       string  `thrift:"appID,1" json:"appID"`
	UserID      string  `thrift:"userID,2" json:"userID"`
	Account     *string `thrift:"account,3" json:"account,omitempty"`
	AccountType string  `thrift:"accountType,4" json:"accountType"`
	Password    *string `thrift:"password,5" json:"password,omitempty"`
}

func NewLoginAuthParam() *LoginAuthParam {
	return &LoginAuthParam{}
}

func (p *LoginAuthParam) GetAppID() string {
	return p.AppID
}

func (p *LoginAuthParam) GetUserID() string {
	return p.UserID
}

var LoginAuthParam_Account_DEFAULT string

func (p *LoginAuthParam) GetAccount() string {
	if !p.IsSetAccount() {
		return LoginAuthParam_Account_DEFAULT
	}
	return *p.Account
}

func (p *LoginAuthParam) GetAccountType() string {
	return p.AccountType
}

var LoginAuthParam_Password_DEFAULT string

func (p *LoginAuthParam) GetPassword() string {
	if !p.IsSetPassword() {
		return LoginAuthParam_Password_DEFAULT
	}
	return *p.Password
}
func (p *LoginAuthParam) IsSetAccount() bool {
	return p.Account != nil
}

func (p *LoginAuthParam) IsSetPassword() bool {
	return p.Password != nil
}

func (p *LoginAuthParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LoginAuthParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *LoginAuthParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *LoginAuthParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Account = &v
	}
	return nil
}

func (p *LoginAuthParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AccountType = v
	}
	return nil
}

func (p *LoginAuthParam) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Password = &v
	}
	return nil
}

func (p *LoginAuthParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginAuthParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LoginAuthParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appID: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appID: ", p), err)
	}
	return err
}

func (p *LoginAuthParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
	}
	return err
}

func (p *LoginAuthParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccount() {
		if err := oprot.WriteFieldBegin("account", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:account: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Account)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.account (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:account: ", p), err)
		}
	}
	return err
}

func (p *LoginAuthParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accountType", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:accountType: ", p), err)
	}
	if err := oprot.WriteString(string(p.AccountType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accountType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:accountType: ", p), err)
	}
	return err
}

func (p *LoginAuthParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err := oprot.WriteFieldBegin("password", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:password: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Password)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.password (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:password: ", p), err)
		}
	}
	return err
}

func (p *LoginAuthParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginAuthParam(%+v)", *p)
}

// 客户端分页获取企业号 查询参数类
//
//
// Attributes:
//  - PageNum
//  - PageSize
//  - Status
//  - UserID
//  - EntID
type SmallEntAppInfoQueryParam struct {
	PageNum  int32  `thrift:"pageNum,1" json:"pageNum"`
	PageSize int32  `thrift:"pageSize,2" json:"pageSize"`
	Status   int8   `thrift:"status,3" json:"status"`
	UserID   int64  `thrift:"userID,4" json:"userID"`
	EntID    *int64 `thrift:"entID,5" json:"entID,omitempty"`
}

func NewSmallEntAppInfoQueryParam() *SmallEntAppInfoQueryParam {
	return &SmallEntAppInfoQueryParam{}
}

func (p *SmallEntAppInfoQueryParam) GetPageNum() int32 {
	return p.PageNum
}

func (p *SmallEntAppInfoQueryParam) GetPageSize() int32 {
	return p.PageSize
}

func (p *SmallEntAppInfoQueryParam) GetStatus() int8 {
	return p.Status
}

func (p *SmallEntAppInfoQueryParam) GetUserID() int64 {
	return p.UserID
}

var SmallEntAppInfoQueryParam_EntID_DEFAULT int64

func (p *SmallEntAppInfoQueryParam) GetEntID() int64 {
	if !p.IsSetEntID() {
		return SmallEntAppInfoQueryParam_EntID_DEFAULT
	}
	return *p.EntID
}
func (p *SmallEntAppInfoQueryParam) IsSetEntID() bool {
	return p.EntID != nil
}

func (p *SmallEntAppInfoQueryParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallEntAppInfoQueryParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNum = v
	}
	return nil
}

func (p *SmallEntAppInfoQueryParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *SmallEntAppInfoQueryParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Status = temp
	}
	return nil
}

func (p *SmallEntAppInfoQueryParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *SmallEntAppInfoQueryParam) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.EntID = &v
	}
	return nil
}

func (p *SmallEntAppInfoQueryParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallEntAppInfoQueryParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallEntAppInfoQueryParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageNum", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageNum (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNum: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfoQueryParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfoQueryParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfoQueryParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userID: ", p), err)
	}
	return err
}

func (p *SmallEntAppInfoQueryParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntID() {
		if err := oprot.WriteFieldBegin("entID", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:entID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EntID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.entID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:entID: ", p), err)
		}
	}
	return err
}

func (p *SmallEntAppInfoQueryParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallEntAppInfoQueryParam(%+v)", *p)
}

// 客户端分页获取企业号 返回类型
//
//
// Attributes:
//  - TotalCount
//  - TotalPage
//  - AppList
type SmallEntAppPage struct {
	TotalCount int64              `thrift:"totalCount,1" json:"totalCount"`
	TotalPage  int64              `thrift:"totalPage,2" json:"totalPage"`
	AppList    []*SmallEntAppInfo `thrift:"appList,3" json:"appList"`
}

func NewSmallEntAppPage() *SmallEntAppPage {
	return &SmallEntAppPage{}
}

func (p *SmallEntAppPage) GetTotalCount() int64 {
	return p.TotalCount
}

func (p *SmallEntAppPage) GetTotalPage() int64 {
	return p.TotalPage
}

func (p *SmallEntAppPage) GetAppList() []*SmallEntAppInfo {
	return p.AppList
}
func (p *SmallEntAppPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallEntAppPage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *SmallEntAppPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *SmallEntAppPage) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SmallEntAppInfo, 0, size)
	p.AppList = tSlice
	for i := 0; i < size; i++ {
		_elem61 := &SmallEntAppInfo{}
		if err := _elem61.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem61), err)
		}
		p.AppList = append(p.AppList, _elem61)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SmallEntAppPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallEntAppPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallEntAppPage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalCount", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalCount (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalCount: ", p), err)
	}
	return err
}

func (p *SmallEntAppPage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalPage: ", p), err)
	}
	return err
}

func (p *SmallEntAppPage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AppList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AppList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appList: ", p), err)
	}
	return err
}

func (p *SmallEntAppPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallEntAppPage(%+v)", *p)
}

// oauth2.0认证用户信息
//
//
// Attributes:
//  - UserID
//  - Name
//  - Sex
//  - Area
//  - Birthday
//  - School
//  - PortraitURL
//  - PhoneNums
//  - Emails
type AuthUserBean struct {
	UserID      *int64   `thrift:"userID,1" json:"userID,omitempty"`
	Name        *string  `thrift:"name,2" json:"name,omitempty"`
	Sex         *int8    `thrift:"sex,3" json:"sex,omitempty"`
	Area        *string  `thrift:"area,4" json:"area,omitempty"`
	Birthday    *YMD     `thrift:"birthday,5" json:"birthday,omitempty"`
	School      *string  `thrift:"school,6" json:"school,omitempty"`
	PortraitURL *string  `thrift:"portraitURL,7" json:"portraitURL,omitempty"`
	PhoneNums   []string `thrift:"phoneNums,8" json:"phoneNums,omitempty"`
	Emails      []string `thrift:"emails,9" json:"emails,omitempty"`
}

func NewAuthUserBean() *AuthUserBean {
	return &AuthUserBean{}
}

var AuthUserBean_UserID_DEFAULT int64

func (p *AuthUserBean) GetUserID() int64 {
	if !p.IsSetUserID() {
		return AuthUserBean_UserID_DEFAULT
	}
	return *p.UserID
}

var AuthUserBean_Name_DEFAULT string

func (p *AuthUserBean) GetName() string {
	if !p.IsSetName() {
		return AuthUserBean_Name_DEFAULT
	}
	return *p.Name
}

var AuthUserBean_Sex_DEFAULT int8

func (p *AuthUserBean) GetSex() int8 {
	if !p.IsSetSex() {
		return AuthUserBean_Sex_DEFAULT
	}
	return *p.Sex
}

var AuthUserBean_Area_DEFAULT string

func (p *AuthUserBean) GetArea() string {
	if !p.IsSetArea() {
		return AuthUserBean_Area_DEFAULT
	}
	return *p.Area
}

var AuthUserBean_Birthday_DEFAULT *YMD

func (p *AuthUserBean) GetBirthday() *YMD {
	if !p.IsSetBirthday() {
		return AuthUserBean_Birthday_DEFAULT
	}
	return p.Birthday
}

var AuthUserBean_School_DEFAULT string

func (p *AuthUserBean) GetSchool() string {
	if !p.IsSetSchool() {
		return AuthUserBean_School_DEFAULT
	}
	return *p.School
}

var AuthUserBean_PortraitURL_DEFAULT string

func (p *AuthUserBean) GetPortraitURL() string {
	if !p.IsSetPortraitURL() {
		return AuthUserBean_PortraitURL_DEFAULT
	}
	return *p.PortraitURL
}

var AuthUserBean_PhoneNums_DEFAULT []string

func (p *AuthUserBean) GetPhoneNums() []string {
	return p.PhoneNums
}

var AuthUserBean_Emails_DEFAULT []string

func (p *AuthUserBean) GetEmails() []string {
	return p.Emails
}
func (p *AuthUserBean) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *AuthUserBean) IsSetName() bool {
	return p.Name != nil
}

func (p *AuthUserBean) IsSetSex() bool {
	return p.Sex != nil
}

func (p *AuthUserBean) IsSetArea() bool {
	return p.Area != nil
}

func (p *AuthUserBean) IsSetBirthday() bool {
	return p.Birthday != nil
}

func (p *AuthUserBean) IsSetSchool() bool {
	return p.School != nil
}

func (p *AuthUserBean) IsSetPortraitURL() bool {
	return p.PortraitURL != nil
}

func (p *AuthUserBean) IsSetPhoneNums() bool {
	return p.PhoneNums != nil
}

func (p *AuthUserBean) IsSetEmails() bool {
	return p.Emails != nil
}

func (p *AuthUserBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthUserBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *AuthUserBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *AuthUserBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Sex = &temp
	}
	return nil
}

func (p *AuthUserBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Area = &v
	}
	return nil
}

func (p *AuthUserBean) readField5(iprot thrift.TProtocol) error {
	p.Birthday = &YMD{}
	if err := p.Birthday.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
	}
	return nil
}

func (p *AuthUserBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.School = &v
	}
	return nil
}

func (p *AuthUserBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PortraitURL = &v
	}
	return nil
}

func (p *AuthUserBean) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PhoneNums = tSlice
	for i := 0; i < size; i++ {
		var _elem62 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem62 = v
		}
		p.PhoneNums = append(p.PhoneNums, _elem62)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AuthUserBean) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Emails = tSlice
	for i := 0; i < size; i++ {
		var _elem63 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem63 = v
		}
		p.Emails = append(p.Emails, _elem63)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AuthUserBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthUserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthUserBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSex() {
		if err := oprot.WriteFieldBegin("sex", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sex: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Sex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sex (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sex: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetArea() {
		if err := oprot.WriteFieldBegin("area", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:area: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Area)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.area (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:area: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthday() {
		if err := oprot.WriteFieldBegin("birthday", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:birthday: ", p), err)
		}
		if err := p.Birthday.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:birthday: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchool() {
		if err := oprot.WriteFieldBegin("school", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:school: ", p), err)
		}
		if err := oprot.WriteString(string(*p.School)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.school (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:school: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPortraitURL() {
		if err := oprot.WriteFieldBegin("portraitURL", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:portraitURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PortraitURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.portraitURL (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:portraitURL: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPhoneNums() {
		if err := oprot.WriteFieldBegin("phoneNums", thrift.LIST, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:phoneNums: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PhoneNums)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PhoneNums {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:phoneNums: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmails() {
		if err := oprot.WriteFieldBegin("emails", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:emails: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Emails {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:emails: ", p), err)
		}
	}
	return err
}

func (p *AuthUserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthUserBean(%+v)", *p)
}

// 用户账户
//
// Attributes:
//  - Type
//  - ContactInfo
//  - Status
//  - SDKID
//  - Mark
//  - UserID
type UserContact struct {
	Type        int8    `thrift:"type,1" json:"type"`
	ContactInfo string  `thrift:"contactInfo,2" json:"contactInfo"`
	Status      int8    `thrift:"status,3" json:"status"`
	SDKID       int64   `thrift:"SDKID,4" json:"SDKID"`
	Mark        *string `thrift:"mark,5" json:"mark,omitempty"`
	UserID      *int64  `thrift:"userID,6" json:"userID,omitempty"`
}

func NewUserContact() *UserContact {
	return &UserContact{}
}

func (p *UserContact) GetType() int8 {
	return p.Type
}

func (p *UserContact) GetContactInfo() string {
	return p.ContactInfo
}

func (p *UserContact) GetStatus() int8 {
	return p.Status
}

func (p *UserContact) GetSDKID() int64 {
	return p.SDKID
}

var UserContact_Mark_DEFAULT string

func (p *UserContact) GetMark() string {
	if !p.IsSetMark() {
		return UserContact_Mark_DEFAULT
	}
	return *p.Mark
}

var UserContact_UserID_DEFAULT int64

func (p *UserContact) GetUserID() int64 {
	if !p.IsSetUserID() {
		return UserContact_UserID_DEFAULT
	}
	return *p.UserID
}
func (p *UserContact) IsSetMark() bool {
	return p.Mark != nil
}

func (p *UserContact) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserContact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserContact) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Type = temp
	}
	return nil
}

func (p *UserContact) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ContactInfo = v
	}
	return nil
}

func (p *UserContact) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Status = temp
	}
	return nil
}

func (p *UserContact) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *UserContact) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Mark = &v
	}
	return nil
}

func (p *UserContact) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *UserContact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserContact"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserContact) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *UserContact) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contactInfo", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contactInfo: ", p), err)
	}
	if err := oprot.WriteString(string(p.ContactInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contactInfo (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contactInfo: ", p), err)
	}
	return err
}

func (p *UserContact) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err)
	}
	return err
}

func (p *UserContact) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
	}
	return err
}

func (p *UserContact) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMark() {
		if err := oprot.WriteFieldBegin("mark", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mark: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Mark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mark (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mark: ", p), err)
		}
	}
	return err
}

func (p *UserContact) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userID: ", p), err)
		}
	}
	return err
}

func (p *UserContact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserContact(%+v)", *p)
}

// 开放平台应用安装应用的用户表
//
// Attributes:
//  - AppID
//  - UserID
//  - VestAppID
//  - CreateDt
//  - UpdateDt
//  - Status
//  - WhiteStatus
type InstallMatketUser struct {
	AppID       *int64 `thrift:"appID,1" json:"appID,omitempty"`
	UserID      *int64 `thrift:"userID,2" json:"userID,omitempty"`
	VestAppID   *int64 `thrift:"vestAppID,3" json:"vestAppID,omitempty"`
	CreateDt    *int64 `thrift:"createDt,4" json:"createDt,omitempty"`
	UpdateDt    *int64 `thrift:"updateDt,5" json:"updateDt,omitempty"`
	Status      *int8  `thrift:"status,6" json:"status,omitempty"`
	WhiteStatus *int8  `thrift:"whiteStatus,7" json:"whiteStatus,omitempty"`
}

func NewInstallMatketUser() *InstallMatketUser {
	return &InstallMatketUser{}
}

var InstallMatketUser_AppID_DEFAULT int64

func (p *InstallMatketUser) GetAppID() int64 {
	if !p.IsSetAppID() {
		return InstallMatketUser_AppID_DEFAULT
	}
	return *p.AppID
}

var InstallMatketUser_UserID_DEFAULT int64

func (p *InstallMatketUser) GetUserID() int64 {
	if !p.IsSetUserID() {
		return InstallMatketUser_UserID_DEFAULT
	}
	return *p.UserID
}

var InstallMatketUser_VestAppID_DEFAULT int64

func (p *InstallMatketUser) GetVestAppID() int64 {
	if !p.IsSetVestAppID() {
		return InstallMatketUser_VestAppID_DEFAULT
	}
	return *p.VestAppID
}

var InstallMatketUser_CreateDt_DEFAULT int64

func (p *InstallMatketUser) GetCreateDt() int64 {
	if !p.IsSetCreateDt() {
		return InstallMatketUser_CreateDt_DEFAULT
	}
	return *p.CreateDt
}

var InstallMatketUser_UpdateDt_DEFAULT int64

func (p *InstallMatketUser) GetUpdateDt() int64 {
	if !p.IsSetUpdateDt() {
		return InstallMatketUser_UpdateDt_DEFAULT
	}
	return *p.UpdateDt
}

var InstallMatketUser_Status_DEFAULT int8

func (p *InstallMatketUser) GetStatus() int8 {
	if !p.IsSetStatus() {
		return InstallMatketUser_Status_DEFAULT
	}
	return *p.Status
}

var InstallMatketUser_WhiteStatus_DEFAULT int8

func (p *InstallMatketUser) GetWhiteStatus() int8 {
	if !p.IsSetWhiteStatus() {
		return InstallMatketUser_WhiteStatus_DEFAULT
	}
	return *p.WhiteStatus
}
func (p *InstallMatketUser) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *InstallMatketUser) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *InstallMatketUser) IsSetVestAppID() bool {
	return p.VestAppID != nil
}

func (p *InstallMatketUser) IsSetCreateDt() bool {
	return p.CreateDt != nil
}

func (p *InstallMatketUser) IsSetUpdateDt() bool {
	return p.UpdateDt != nil
}

func (p *InstallMatketUser) IsSetStatus() bool {
	return p.Status != nil
}

func (p *InstallMatketUser) IsSetWhiteStatus() bool {
	return p.WhiteStatus != nil
}

func (p *InstallMatketUser) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InstallMatketUser) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppID = &v
	}
	return nil
}

func (p *InstallMatketUser) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *InstallMatketUser) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VestAppID = &v
	}
	return nil
}

func (p *InstallMatketUser) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CreateDt = &v
	}
	return nil
}

func (p *InstallMatketUser) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UpdateDt = &v
	}
	return nil
}

func (p *InstallMatketUser) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *InstallMatketUser) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.WhiteStatus = &temp
	}
	return nil
}

func (p *InstallMatketUser) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InstallMatketUser"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InstallMatketUser) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err := oprot.WriteFieldBegin("appID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AppID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appID: ", p), err)
		}
	}
	return err
}

func (p *InstallMatketUser) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
		}
	}
	return err
}

func (p *InstallMatketUser) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVestAppID() {
		if err := oprot.WriteFieldBegin("vestAppID", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vestAppID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.VestAppID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vestAppID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vestAppID: ", p), err)
		}
	}
	return err
}

func (p *InstallMatketUser) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateDt() {
		if err := oprot.WriteFieldBegin("createDt", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createDt: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateDt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createDt (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createDt: ", p), err)
		}
	}
	return err
}

func (p *InstallMatketUser) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateDt() {
		if err := oprot.WriteFieldBegin("updateDt", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updateDt: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UpdateDt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateDt (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updateDt: ", p), err)
		}
	}
	return err
}

func (p *InstallMatketUser) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err)
		}
	}
	return err
}

func (p *InstallMatketUser) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetWhiteStatus() {
		if err := oprot.WriteFieldBegin("whiteStatus", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:whiteStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.WhiteStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.whiteStatus (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:whiteStatus: ", p), err)
		}
	}
	return err
}

func (p *InstallMatketUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstallMatketUser(%+v)", *p)
}

// 应用市场应用分类
//
// Attributes:
//  - AppTypeID
//  - AppTypeName
type SmallMarketAppType struct {
	AppTypeID   *int64  `thrift:"appTypeID,1" json:"appTypeID,omitempty"`
	AppTypeName *string `thrift:"appTypeName,2" json:"appTypeName,omitempty"`
}

func NewSmallMarketAppType() *SmallMarketAppType {
	return &SmallMarketAppType{}
}

var SmallMarketAppType_AppTypeID_DEFAULT int64

func (p *SmallMarketAppType) GetAppTypeID() int64 {
	if !p.IsSetAppTypeID() {
		return SmallMarketAppType_AppTypeID_DEFAULT
	}
	return *p.AppTypeID
}

var SmallMarketAppType_AppTypeName_DEFAULT string

func (p *SmallMarketAppType) GetAppTypeName() string {
	if !p.IsSetAppTypeName() {
		return SmallMarketAppType_AppTypeName_DEFAULT
	}
	return *p.AppTypeName
}
func (p *SmallMarketAppType) IsSetAppTypeID() bool {
	return p.AppTypeID != nil
}

func (p *SmallMarketAppType) IsSetAppTypeName() bool {
	return p.AppTypeName != nil
}

func (p *SmallMarketAppType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallMarketAppType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppTypeID = &v
	}
	return nil
}

func (p *SmallMarketAppType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppTypeName = &v
	}
	return nil
}

func (p *SmallMarketAppType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallMarketAppType"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallMarketAppType) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppTypeID() {
		if err := oprot.WriteFieldBegin("appTypeID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appTypeID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.AppTypeID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appTypeID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appTypeID: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppType) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppTypeName() {
		if err := oprot.WriteFieldBegin("appTypeName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appTypeName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppTypeName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appTypeName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appTypeName: ", p), err)
		}
	}
	return err
}

func (p *SmallMarketAppType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallMarketAppType(%+v)", *p)
}

// 全文检索动态查询参数对象
//
// Attributes:
//  - ParamKey
//  - LogicType
//  - SearchType
//  - ParamValues
//  - NestedPath
type DynamicQueryParam struct {
	ParamKey    *string  `thrift:"paramKey,1" json:"paramKey,omitempty"`
	LogicType   *string  `thrift:"logicType,2" json:"logicType,omitempty"`
	SearchType  *string  `thrift:"searchType,3" json:"searchType,omitempty"`
	ParamValues []string `thrift:"paramValues,4" json:"paramValues,omitempty"`
	NestedPath  *string  `thrift:"nestedPath,5" json:"nestedPath,omitempty"`
}

func NewDynamicQueryParam() *DynamicQueryParam {
	return &DynamicQueryParam{}
}

var DynamicQueryParam_ParamKey_DEFAULT string

func (p *DynamicQueryParam) GetParamKey() string {
	if !p.IsSetParamKey() {
		return DynamicQueryParam_ParamKey_DEFAULT
	}
	return *p.ParamKey
}

var DynamicQueryParam_LogicType_DEFAULT string

func (p *DynamicQueryParam) GetLogicType() string {
	if !p.IsSetLogicType() {
		return DynamicQueryParam_LogicType_DEFAULT
	}
	return *p.LogicType
}

var DynamicQueryParam_SearchType_DEFAULT string

func (p *DynamicQueryParam) GetSearchType() string {
	if !p.IsSetSearchType() {
		return DynamicQueryParam_SearchType_DEFAULT
	}
	return *p.SearchType
}

var DynamicQueryParam_ParamValues_DEFAULT []string

func (p *DynamicQueryParam) GetParamValues() []string {
	return p.ParamValues
}

var DynamicQueryParam_NestedPath_DEFAULT string

func (p *DynamicQueryParam) GetNestedPath() string {
	if !p.IsSetNestedPath() {
		return DynamicQueryParam_NestedPath_DEFAULT
	}
	return *p.NestedPath
}
func (p *DynamicQueryParam) IsSetParamKey() bool {
	return p.ParamKey != nil
}

func (p *DynamicQueryParam) IsSetLogicType() bool {
	return p.LogicType != nil
}

func (p *DynamicQueryParam) IsSetSearchType() bool {
	return p.SearchType != nil
}

func (p *DynamicQueryParam) IsSetParamValues() bool {
	return p.ParamValues != nil
}

func (p *DynamicQueryParam) IsSetNestedPath() bool {
	return p.NestedPath != nil
}

func (p *DynamicQueryParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DynamicQueryParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ParamKey = &v
	}
	return nil
}

func (p *DynamicQueryParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LogicType = &v
	}
	return nil
}

func (p *DynamicQueryParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SearchType = &v
	}
	return nil
}

func (p *DynamicQueryParam) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ParamValues = tSlice
	for i := 0; i < size; i++ {
		var _elem64 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem64 = v
		}
		p.ParamValues = append(p.ParamValues, _elem64)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DynamicQueryParam) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NestedPath = &v
	}
	return nil
}

func (p *DynamicQueryParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DynamicQueryParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DynamicQueryParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetParamKey() {
		if err := oprot.WriteFieldBegin("paramKey", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:paramKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ParamKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.paramKey (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:paramKey: ", p), err)
		}
	}
	return err
}

func (p *DynamicQueryParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogicType() {
		if err := oprot.WriteFieldBegin("logicType", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:logicType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LogicType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.logicType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:logicType: ", p), err)
		}
	}
	return err
}

func (p *DynamicQueryParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearchType() {
		if err := oprot.WriteFieldBegin("searchType", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:searchType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SearchType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.searchType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:searchType: ", p), err)
		}
	}
	return err
}

func (p *DynamicQueryParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetParamValues() {
		if err := oprot.WriteFieldBegin("paramValues", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:paramValues: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ParamValues)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ParamValues {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:paramValues: ", p), err)
		}
	}
	return err
}

func (p *DynamicQueryParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNestedPath() {
		if err := oprot.WriteFieldBegin("nestedPath", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nestedPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NestedPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nestedPath (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nestedPath: ", p), err)
		}
	}
	return err
}

func (p *DynamicQueryParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DynamicQueryParam(%+v)", *p)
}

// 全文检索动态查询排序对象
//
// Attributes:
//  - FiledName
//  - OrderType
//  - NestedPath
//  - MissType
//  - FilterParam
type OrderFiledParam struct {
	FiledName   *string              `thrift:"filedName,1" json:"filedName,omitempty"`
	OrderType   *string              `thrift:"orderType,2" json:"orderType,omitempty"`
	NestedPath  *string              `thrift:"nestedPath,3" json:"nestedPath,omitempty"`
	MissType    *string              `thrift:"missType,4" json:"missType,omitempty"`
	FilterParam []*DynamicQueryParam `thrift:"filterParam,5" json:"filterParam,omitempty"`
}

func NewOrderFiledParam() *OrderFiledParam {
	return &OrderFiledParam{}
}

var OrderFiledParam_FiledName_DEFAULT string

func (p *OrderFiledParam) GetFiledName() string {
	if !p.IsSetFiledName() {
		return OrderFiledParam_FiledName_DEFAULT
	}
	return *p.FiledName
}

var OrderFiledParam_OrderType_DEFAULT string

func (p *OrderFiledParam) GetOrderType() string {
	if !p.IsSetOrderType() {
		return OrderFiledParam_OrderType_DEFAULT
	}
	return *p.OrderType
}

var OrderFiledParam_NestedPath_DEFAULT string

func (p *OrderFiledParam) GetNestedPath() string {
	if !p.IsSetNestedPath() {
		return OrderFiledParam_NestedPath_DEFAULT
	}
	return *p.NestedPath
}

var OrderFiledParam_MissType_DEFAULT string

func (p *OrderFiledParam) GetMissType() string {
	if !p.IsSetMissType() {
		return OrderFiledParam_MissType_DEFAULT
	}
	return *p.MissType
}

var OrderFiledParam_FilterParam_DEFAULT []*DynamicQueryParam

func (p *OrderFiledParam) GetFilterParam() []*DynamicQueryParam {
	return p.FilterParam
}
func (p *OrderFiledParam) IsSetFiledName() bool {
	return p.FiledName != nil
}

func (p *OrderFiledParam) IsSetOrderType() bool {
	return p.OrderType != nil
}

func (p *OrderFiledParam) IsSetNestedPath() bool {
	return p.NestedPath != nil
}

func (p *OrderFiledParam) IsSetMissType() bool {
	return p.MissType != nil
}

func (p *OrderFiledParam) IsSetFilterParam() bool {
	return p.FilterParam != nil
}

func (p *OrderFiledParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OrderFiledParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FiledName = &v
	}
	return nil
}

func (p *OrderFiledParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderType = &v
	}
	return nil
}

func (p *OrderFiledParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NestedPath = &v
	}
	return nil
}

func (p *OrderFiledParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MissType = &v
	}
	return nil
}

func (p *OrderFiledParam) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DynamicQueryParam, 0, size)
	p.FilterParam = tSlice
	for i := 0; i < size; i++ {
		_elem65 := &DynamicQueryParam{}
		if err := _elem65.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem65), err)
		}
		p.FilterParam = append(p.FilterParam, _elem65)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OrderFiledParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OrderFiledParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OrderFiledParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFiledName() {
		if err := oprot.WriteFieldBegin("filedName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:filedName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FiledName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.filedName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:filedName: ", p), err)
		}
	}
	return err
}

func (p *OrderFiledParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderType() {
		if err := oprot.WriteFieldBegin("orderType", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrderType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orderType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderType: ", p), err)
		}
	}
	return err
}

func (p *OrderFiledParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNestedPath() {
		if err := oprot.WriteFieldBegin("nestedPath", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nestedPath: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NestedPath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nestedPath (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nestedPath: ", p), err)
		}
	}
	return err
}

func (p *OrderFiledParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMissType() {
		if err := oprot.WriteFieldBegin("missType", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:missType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MissType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.missType (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:missType: ", p), err)
		}
	}
	return err
}

func (p *OrderFiledParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterParam() {
		if err := oprot.WriteFieldBegin("filterParam", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:filterParam: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FilterParam)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.FilterParam {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:filterParam: ", p), err)
		}
	}
	return err
}

func (p *OrderFiledParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderFiledParam(%+v)", *p)
}

// 全文检索动态查询分页查询参数对象
//
// Attributes:
//  - PageNo
//  - PageSize
//  - Type
//  - Params
//  - OrderFileds
//  - SelectFileds
type DynamicSearchPageParam struct {
	PageNo       int32                `thrift:"pageNo,1" json:"pageNo"`
	PageSize     int32                `thrift:"pageSize,2" json:"pageSize"`
	Type         int32                `thrift:"type,3" json:"type"`
	Params       []*DynamicQueryParam `thrift:"params,4" json:"params,omitempty"`
	OrderFileds  []*OrderFiledParam   `thrift:"orderFileds,5" json:"orderFileds,omitempty"`
	SelectFileds []string             `thrift:"selectFileds,6" json:"selectFileds,omitempty"`
}

func NewDynamicSearchPageParam() *DynamicSearchPageParam {
	return &DynamicSearchPageParam{}
}

func (p *DynamicSearchPageParam) GetPageNo() int32 {
	return p.PageNo
}

func (p *DynamicSearchPageParam) GetPageSize() int32 {
	return p.PageSize
}

func (p *DynamicSearchPageParam) GetType() int32 {
	return p.Type
}

var DynamicSearchPageParam_Params_DEFAULT []*DynamicQueryParam

func (p *DynamicSearchPageParam) GetParams() []*DynamicQueryParam {
	return p.Params
}

var DynamicSearchPageParam_OrderFileds_DEFAULT []*OrderFiledParam

func (p *DynamicSearchPageParam) GetOrderFileds() []*OrderFiledParam {
	return p.OrderFileds
}

var DynamicSearchPageParam_SelectFileds_DEFAULT []string

func (p *DynamicSearchPageParam) GetSelectFileds() []string {
	return p.SelectFileds
}
func (p *DynamicSearchPageParam) IsSetParams() bool {
	return p.Params != nil
}

func (p *DynamicSearchPageParam) IsSetOrderFileds() bool {
	return p.OrderFileds != nil
}

func (p *DynamicSearchPageParam) IsSetSelectFileds() bool {
	return p.SelectFileds != nil
}

func (p *DynamicSearchPageParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DynamicSearchPageParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNo = v
	}
	return nil
}

func (p *DynamicSearchPageParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *DynamicSearchPageParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *DynamicSearchPageParam) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DynamicQueryParam, 0, size)
	p.Params = tSlice
	for i := 0; i < size; i++ {
		_elem66 := &DynamicQueryParam{}
		if err := _elem66.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem66), err)
		}
		p.Params = append(p.Params, _elem66)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DynamicSearchPageParam) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OrderFiledParam, 0, size)
	p.OrderFileds = tSlice
	for i := 0; i < size; i++ {
		_elem67 := &OrderFiledParam{}
		if err := _elem67.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem67), err)
		}
		p.OrderFileds = append(p.OrderFileds, _elem67)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DynamicSearchPageParam) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SelectFileds = tSlice
	for i := 0; i < size; i++ {
		var _elem68 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem68 = v
		}
		p.SelectFileds = append(p.SelectFileds, _elem68)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DynamicSearchPageParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DynamicSearchPageParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DynamicSearchPageParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageNo", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNo: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNo: ", p), err)
	}
	return err
}

func (p *DynamicSearchPageParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
	}
	return err
}

func (p *DynamicSearchPageParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *DynamicSearchPageParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetParams() {
		if err := oprot.WriteFieldBegin("params", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:params: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Params)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Params {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:params: ", p), err)
		}
	}
	return err
}

func (p *DynamicSearchPageParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderFileds() {
		if err := oprot.WriteFieldBegin("orderFileds", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:orderFileds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderFileds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.OrderFileds {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:orderFileds: ", p), err)
		}
	}
	return err
}

func (p *DynamicSearchPageParam) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSelectFileds() {
		if err := oprot.WriteFieldBegin("selectFileds", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:selectFileds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SelectFileds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SelectFileds {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:selectFileds: ", p), err)
		}
	}
	return err
}

func (p *DynamicSearchPageParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DynamicSearchPageParam(%+v)", *p)
}

// Attributes:
//  - PageNo: ****查询第几页****
//  - PageSize: ****查询每一页对应多少条数据****
//  - TotalCount: ****符合条件的数据量****
//  - TotalPage: ****符合条件的数据总共页数****
//  - ResultList: **** 符合条件的查询结果****
//
//  目前： 查询用户全文检索，resultList中装载的内容为 json字符串，对应SmallUserBean，调用方根据SmallUserBean解析其中内容
//  - UserIDs: **** 符合条件的查询结果****
//
//  目前： 查询用户全文检索，resultList中装载的内容为 用户ID，由于存在一个用户多个组织，所以会获取到一个用户的多个相同的id，如果需要去重复，请自行处理
type FullSearchPageResult_ struct {
	PageNo     int32    `thrift:"pageNo,1" json:"pageNo"`
	PageSize   int32    `thrift:"pageSize,2" json:"pageSize"`
	TotalCount int64    `thrift:"totalCount,3" json:"totalCount"`
	TotalPage  int64    `thrift:"totalPage,4" json:"totalPage"`
	ResultList []string `thrift:"resultList,5" json:"resultList"`
	UserIDs    []int64  `thrift:"userIDs,6" json:"userIDs,omitempty"`
}

func NewFullSearchPageResult_() *FullSearchPageResult_ {
	return &FullSearchPageResult_{}
}

func (p *FullSearchPageResult_) GetPageNo() int32 {
	return p.PageNo
}

func (p *FullSearchPageResult_) GetPageSize() int32 {
	return p.PageSize
}

func (p *FullSearchPageResult_) GetTotalCount() int64 {
	return p.TotalCount
}

func (p *FullSearchPageResult_) GetTotalPage() int64 {
	return p.TotalPage
}

func (p *FullSearchPageResult_) GetResultList() []string {
	return p.ResultList
}

var FullSearchPageResult__UserIDs_DEFAULT []int64

func (p *FullSearchPageResult_) GetUserIDs() []int64 {
	return p.UserIDs
}
func (p *FullSearchPageResult_) IsSetUserIDs() bool {
	return p.UserIDs != nil
}

func (p *FullSearchPageResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FullSearchPageResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.PageNo = v
	}
	return nil
}

func (p *FullSearchPageResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *FullSearchPageResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *FullSearchPageResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *FullSearchPageResult_) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ResultList = tSlice
	for i := 0; i < size; i++ {
		var _elem69 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem69 = v
		}
		p.ResultList = append(p.ResultList, _elem69)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FullSearchPageResult_) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.UserIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem70 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem70 = v
		}
		p.UserIDs = append(p.UserIDs, _elem70)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FullSearchPageResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FullSearchPageResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FullSearchPageResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageNo", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pageNo: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageNo (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pageNo: ", p), err)
	}
	return err
}

func (p *FullSearchPageResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pageSize: ", p), err)
	}
	return err
}

func (p *FullSearchPageResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalCount", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalCount: ", p), err)
	}
	return err
}

func (p *FullSearchPageResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalPage: ", p), err)
	}
	return err
}

func (p *FullSearchPageResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:resultList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ResultList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ResultList {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:resultList: ", p), err)
	}
	return err
}

func (p *FullSearchPageResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIDs() {
		if err := oprot.WriteFieldBegin("userIDs", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userIDs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.UserIDs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.UserIDs {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userIDs: ", p), err)
		}
	}
	return err
}

func (p *FullSearchPageResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FullSearchPageResult_(%+v)", *p)
}

// Attributes:
//  - UserID
//  - SDKID
//  - ExtJSON
//  - DeviceType
type OnlineExt struct {
	UserID     *int64  `thrift:"userID,1" json:"userID,omitempty"`
	SDKID      *int64  `thrift:"SDKID,2" json:"SDKID,omitempty"`
	ExtJSON    *string `thrift:"extJSON,3" json:"extJSON,omitempty"`
	DeviceType *int8   `thrift:"deviceType,4" json:"deviceType,omitempty"`
}

func NewOnlineExt() *OnlineExt {
	return &OnlineExt{}
}

var OnlineExt_UserID_DEFAULT int64

func (p *OnlineExt) GetUserID() int64 {
	if !p.IsSetUserID() {
		return OnlineExt_UserID_DEFAULT
	}
	return *p.UserID
}

var OnlineExt_SDKID_DEFAULT int64

func (p *OnlineExt) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return OnlineExt_SDKID_DEFAULT
	}
	return *p.SDKID
}

var OnlineExt_ExtJSON_DEFAULT string

func (p *OnlineExt) GetExtJSON() string {
	if !p.IsSetExtJSON() {
		return OnlineExt_ExtJSON_DEFAULT
	}
	return *p.ExtJSON
}

var OnlineExt_DeviceType_DEFAULT int8

func (p *OnlineExt) GetDeviceType() int8 {
	if !p.IsSetDeviceType() {
		return OnlineExt_DeviceType_DEFAULT
	}
	return *p.DeviceType
}
func (p *OnlineExt) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *OnlineExt) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *OnlineExt) IsSetExtJSON() bool {
	return p.ExtJSON != nil
}

func (p *OnlineExt) IsSetDeviceType() bool {
	return p.DeviceType != nil
}

func (p *OnlineExt) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OnlineExt) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *OnlineExt) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *OnlineExt) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExtJSON = &v
	}
	return nil
}

func (p *OnlineExt) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = &temp
	}
	return nil
}

func (p *OnlineExt) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OnlineExt"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OnlineExt) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
		}
	}
	return err
}

func (p *OnlineExt) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SDKID: ", p), err)
		}
	}
	return err
}

func (p *OnlineExt) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtJSON() {
		if err := oprot.WriteFieldBegin("extJSON", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extJSON: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtJSON)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extJSON (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extJSON: ", p), err)
		}
	}
	return err
}

func (p *OnlineExt) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeviceType() {
		if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deviceType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.DeviceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deviceType (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deviceType: ", p), err)
		}
	}
	return err
}

func (p *OnlineExt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnlineExt(%+v)", *p)
}

// 邀请码参数
//
// Attributes:
//  - CreateUserID
//  - Digit
//  - EffectiveSeconds
//  - EffectiveCount
//  - ConsumeAccount
//  - ExtData
type InviteCodeParam struct {
	CreateUserID     int64          `thrift:"createUserID,1" json:"createUserID"`
	Digit            int32          `thrift:"digit,2" json:"digit"`
	EffectiveSeconds int64          `thrift:"effectiveSeconds,3" json:"effectiveSeconds"`
	EffectiveCount   int32          `thrift:"effectiveCount,4" json:"effectiveCount"`
	ConsumeAccount   []*UserContact `thrift:"consumeAccount,5" json:"consumeAccount"`
	// unused field # 6
	ExtData *string `thrift:"extData,7" json:"extData,omitempty"`
}

func NewInviteCodeParam() *InviteCodeParam {
	return &InviteCodeParam{}
}

func (p *InviteCodeParam) GetCreateUserID() int64 {
	return p.CreateUserID
}

func (p *InviteCodeParam) GetDigit() int32 {
	return p.Digit
}

func (p *InviteCodeParam) GetEffectiveSeconds() int64 {
	return p.EffectiveSeconds
}

func (p *InviteCodeParam) GetEffectiveCount() int32 {
	return p.EffectiveCount
}

func (p *InviteCodeParam) GetConsumeAccount() []*UserContact {
	return p.ConsumeAccount
}

var InviteCodeParam_ExtData_DEFAULT string

func (p *InviteCodeParam) GetExtData() string {
	if !p.IsSetExtData() {
		return InviteCodeParam_ExtData_DEFAULT
	}
	return *p.ExtData
}
func (p *InviteCodeParam) IsSetExtData() bool {
	return p.ExtData != nil
}

func (p *InviteCodeParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InviteCodeParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CreateUserID = v
	}
	return nil
}

func (p *InviteCodeParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Digit = v
	}
	return nil
}

func (p *InviteCodeParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EffectiveSeconds = v
	}
	return nil
}

func (p *InviteCodeParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EffectiveCount = v
	}
	return nil
}

func (p *InviteCodeParam) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UserContact, 0, size)
	p.ConsumeAccount = tSlice
	for i := 0; i < size; i++ {
		_elem71 := &UserContact{}
		if err := _elem71.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem71), err)
		}
		p.ConsumeAccount = append(p.ConsumeAccount, _elem71)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *InviteCodeParam) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ExtData = &v
	}
	return nil
}

func (p *InviteCodeParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InviteCodeParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InviteCodeParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createUserID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:createUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createUserID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:createUserID: ", p), err)
	}
	return err
}

func (p *InviteCodeParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("digit", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:digit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Digit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.digit (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:digit: ", p), err)
	}
	return err
}

func (p *InviteCodeParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("effectiveSeconds", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:effectiveSeconds: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EffectiveSeconds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.effectiveSeconds (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:effectiveSeconds: ", p), err)
	}
	return err
}

func (p *InviteCodeParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("effectiveCount", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:effectiveCount: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EffectiveCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.effectiveCount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:effectiveCount: ", p), err)
	}
	return err
}

func (p *InviteCodeParam) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("consumeAccount", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:consumeAccount: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ConsumeAccount)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ConsumeAccount {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:consumeAccount: ", p), err)
	}
	return err
}

func (p *InviteCodeParam) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtData() {
		if err := oprot.WriteFieldBegin("extData", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extData: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ExtData)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extData (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extData: ", p), err)
		}
	}
	return err
}

func (p *InviteCodeParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteCodeParam(%+v)", *p)
}

// 邀请码返回结果对象
// code:
// 	0：成功
// 	101：邀请码位数参数digit错误
// 	102：邀请码生成者参数createUserID错误
// 	103：邀请码有效秒数参数effectiveSeconds错误
// 	104：邀请码有效次数参数effectiveCount错误
// 	105：接口参数为空
// 	106：邀请码生成出错
// 	107：邀请码入库失败
// 	108：邀请码无效
// 	109：邀请码使用者账户参数consumeAccount错误
// 	110：邀请码id参数inviteCodeID错误
// 	111：邀请码使用者参数consumeUserID错误
// 	112：邀请码使用记录入库失败
// 	113：邀请码生产者入库失败
// 	114：邀请码生产者删除失败
// 	115：该用户没有生成邀请码的权限
// 	116：邀请码有效，但此账号不能使用
//
// Attributes:
//  - Code
//  - Message
type InviteCodeResult_ struct {
	Code    int32  `thrift:"code,1" json:"code"`
	Message string `thrift:"message,2" json:"message"`
}

func NewInviteCodeResult_() *InviteCodeResult_ {
	return &InviteCodeResult_{}
}

func (p *InviteCodeResult_) GetCode() int32 {
	return p.Code
}

func (p *InviteCodeResult_) GetMessage() string {
	return p.Message
}
func (p *InviteCodeResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InviteCodeResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *InviteCodeResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InviteCodeResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InviteCodeResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InviteCodeResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *InviteCodeResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *InviteCodeResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteCodeResult_(%+v)", *p)
}

// Attributes:
//  - VrvID
//  - Type
//  - NetUserID
//  - NodeID
type NetInfoBean struct {
	VrvID     *int64  `thrift:"vrvID,1" json:"vrvID,omitempty"`
	Type      *int32  `thrift:"type,2" json:"type,omitempty"`
	NetUserID *string `thrift:"netUserID,3" json:"netUserID,omitempty"`
	NodeID    *string `thrift:"nodeID,4" json:"nodeID,omitempty"`
}

func NewNetInfoBean() *NetInfoBean {
	return &NetInfoBean{}
}

var NetInfoBean_VrvID_DEFAULT int64

func (p *NetInfoBean) GetVrvID() int64 {
	if !p.IsSetVrvID() {
		return NetInfoBean_VrvID_DEFAULT
	}
	return *p.VrvID
}

var NetInfoBean_Type_DEFAULT int32

func (p *NetInfoBean) GetType() int32 {
	if !p.IsSetType() {
		return NetInfoBean_Type_DEFAULT
	}
	return *p.Type
}

var NetInfoBean_NetUserID_DEFAULT string

func (p *NetInfoBean) GetNetUserID() string {
	if !p.IsSetNetUserID() {
		return NetInfoBean_NetUserID_DEFAULT
	}
	return *p.NetUserID
}

var NetInfoBean_NodeID_DEFAULT string

func (p *NetInfoBean) GetNodeID() string {
	if !p.IsSetNodeID() {
		return NetInfoBean_NodeID_DEFAULT
	}
	return *p.NodeID
}
func (p *NetInfoBean) IsSetVrvID() bool {
	return p.VrvID != nil
}

func (p *NetInfoBean) IsSetType() bool {
	return p.Type != nil
}

func (p *NetInfoBean) IsSetNetUserID() bool {
	return p.NetUserID != nil
}

func (p *NetInfoBean) IsSetNodeID() bool {
	return p.NodeID != nil
}

func (p *NetInfoBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NetInfoBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.VrvID = &v
	}
	return nil
}

func (p *NetInfoBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = &v
	}
	return nil
}

func (p *NetInfoBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NetUserID = &v
	}
	return nil
}

func (p *NetInfoBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NodeID = &v
	}
	return nil
}

func (p *NetInfoBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NetInfoBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NetInfoBean) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVrvID() {
		if err := oprot.WriteFieldBegin("vrvID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vrvID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.VrvID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vrvID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vrvID: ", p), err)
		}
	}
	return err
}

func (p *NetInfoBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *NetInfoBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNetUserID() {
		if err := oprot.WriteFieldBegin("netUserID", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:netUserID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NetUserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.netUserID (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:netUserID: ", p), err)
		}
	}
	return err
}

func (p *NetInfoBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeID() {
		if err := oprot.WriteFieldBegin("nodeID", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nodeID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NodeID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nodeID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nodeID: ", p), err)
		}
	}
	return err
}

func (p *NetInfoBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NetInfoBean(%+v)", *p)
}

// **
//
// 意见反馈对象
//
//
// Attributes:
//  - ID
//  - QuestionID
//  - QuestionName
//  - QuestionDescription
//  - IsNecessary
//  - OperatingSystem
//  - ClientVersion
//  - FeedbackPersonID
//  - FeedbackPersonName
//  - FeedbackPersonOrg
//  - CreateDate
//  - ScreenPic
//  - LogUrl
//  - OperatingSystemVersion
type Feedback struct {
	ID                     int32   `thrift:"id,1" json:"id"`
	QuestionID             int32   `thrift:"questionID,2" json:"questionID"`
	QuestionName           string  `thrift:"questionName,3" json:"questionName"`
	QuestionDescription    string  `thrift:"questionDescription,4" json:"questionDescription"`
	IsNecessary            int32   `thrift:"isNecessary,5" json:"isNecessary"`
	OperatingSystem        string  `thrift:"operatingSystem,6" json:"operatingSystem"`
	ClientVersion          string  `thrift:"clientVersion,7" json:"clientVersion"`
	FeedbackPersonID       int64   `thrift:"feedbackPersonID,8" json:"feedbackPersonID"`
	FeedbackPersonName     *string `thrift:"feedbackPersonName,9" json:"feedbackPersonName,omitempty"`
	FeedbackPersonOrg      *string `thrift:"feedbackPersonOrg,10" json:"feedbackPersonOrg,omitempty"`
	CreateDate             string  `thrift:"createDate,11" json:"createDate"`
	ScreenPic              *string `thrift:"screenPic,12" json:"screenPic,omitempty"`
	LogUrl                 *string `thrift:"logUrl,13" json:"logUrl,omitempty"`
	OperatingSystemVersion string  `thrift:"operatingSystemVersion,14" json:"operatingSystemVersion"`
}

func NewFeedback() *Feedback {
	return &Feedback{}
}

func (p *Feedback) GetID() int32 {
	return p.ID
}

func (p *Feedback) GetQuestionID() int32 {
	return p.QuestionID
}

func (p *Feedback) GetQuestionName() string {
	return p.QuestionName
}

func (p *Feedback) GetQuestionDescription() string {
	return p.QuestionDescription
}

func (p *Feedback) GetIsNecessary() int32 {
	return p.IsNecessary
}

func (p *Feedback) GetOperatingSystem() string {
	return p.OperatingSystem
}

func (p *Feedback) GetClientVersion() string {
	return p.ClientVersion
}

func (p *Feedback) GetFeedbackPersonID() int64 {
	return p.FeedbackPersonID
}

var Feedback_FeedbackPersonName_DEFAULT string

func (p *Feedback) GetFeedbackPersonName() string {
	if !p.IsSetFeedbackPersonName() {
		return Feedback_FeedbackPersonName_DEFAULT
	}
	return *p.FeedbackPersonName
}

var Feedback_FeedbackPersonOrg_DEFAULT string

func (p *Feedback) GetFeedbackPersonOrg() string {
	if !p.IsSetFeedbackPersonOrg() {
		return Feedback_FeedbackPersonOrg_DEFAULT
	}
	return *p.FeedbackPersonOrg
}

func (p *Feedback) GetCreateDate() string {
	return p.CreateDate
}

var Feedback_ScreenPic_DEFAULT string

func (p *Feedback) GetScreenPic() string {
	if !p.IsSetScreenPic() {
		return Feedback_ScreenPic_DEFAULT
	}
	return *p.ScreenPic
}

var Feedback_LogUrl_DEFAULT string

func (p *Feedback) GetLogUrl() string {
	if !p.IsSetLogUrl() {
		return Feedback_LogUrl_DEFAULT
	}
	return *p.LogUrl
}

func (p *Feedback) GetOperatingSystemVersion() string {
	return p.OperatingSystemVersion
}
func (p *Feedback) IsSetFeedbackPersonName() bool {
	return p.FeedbackPersonName != nil
}

func (p *Feedback) IsSetFeedbackPersonOrg() bool {
	return p.FeedbackPersonOrg != nil
}

func (p *Feedback) IsSetScreenPic() bool {
	return p.ScreenPic != nil
}

func (p *Feedback) IsSetLogUrl() bool {
	return p.LogUrl != nil
}

func (p *Feedback) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Feedback) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Feedback) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.QuestionID = v
	}
	return nil
}

func (p *Feedback) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.QuestionName = v
	}
	return nil
}

func (p *Feedback) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.QuestionDescription = v
	}
	return nil
}

func (p *Feedback) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsNecessary = v
	}
	return nil
}

func (p *Feedback) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.OperatingSystem = v
	}
	return nil
}

func (p *Feedback) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ClientVersion = v
	}
	return nil
}

func (p *Feedback) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FeedbackPersonID = v
	}
	return nil
}

func (p *Feedback) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.FeedbackPersonName = &v
	}
	return nil
}

func (p *Feedback) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.FeedbackPersonOrg = &v
	}
	return nil
}

func (p *Feedback) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.CreateDate = v
	}
	return nil
}

func (p *Feedback) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ScreenPic = &v
	}
	return nil
}

func (p *Feedback) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.LogUrl = &v
	}
	return nil
}

func (p *Feedback) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.OperatingSystemVersion = v
	}
	return nil
}

func (p *Feedback) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Feedback"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Feedback) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Feedback) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("questionID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:questionID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.QuestionID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.questionID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:questionID: ", p), err)
	}
	return err
}

func (p *Feedback) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("questionName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:questionName: ", p), err)
	}
	if err := oprot.WriteString(string(p.QuestionName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.questionName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:questionName: ", p), err)
	}
	return err
}

func (p *Feedback) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("questionDescription", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:questionDescription: ", p), err)
	}
	if err := oprot.WriteString(string(p.QuestionDescription)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.questionDescription (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:questionDescription: ", p), err)
	}
	return err
}

func (p *Feedback) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isNecessary", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isNecessary: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsNecessary)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isNecessary (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isNecessary: ", p), err)
	}
	return err
}

func (p *Feedback) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatingSystem", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:operatingSystem: ", p), err)
	}
	if err := oprot.WriteString(string(p.OperatingSystem)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operatingSystem (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:operatingSystem: ", p), err)
	}
	return err
}

func (p *Feedback) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientVersion", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:clientVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clientVersion (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:clientVersion: ", p), err)
	}
	return err
}

func (p *Feedback) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("feedbackPersonID", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:feedbackPersonID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FeedbackPersonID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.feedbackPersonID (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:feedbackPersonID: ", p), err)
	}
	return err
}

func (p *Feedback) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeedbackPersonName() {
		if err := oprot.WriteFieldBegin("feedbackPersonName", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:feedbackPersonName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FeedbackPersonName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.feedbackPersonName (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:feedbackPersonName: ", p), err)
		}
	}
	return err
}

func (p *Feedback) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeedbackPersonOrg() {
		if err := oprot.WriteFieldBegin("feedbackPersonOrg", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:feedbackPersonOrg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FeedbackPersonOrg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.feedbackPersonOrg (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:feedbackPersonOrg: ", p), err)
		}
	}
	return err
}

func (p *Feedback) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createDate", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:createDate: ", p), err)
	}
	if err := oprot.WriteString(string(p.CreateDate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createDate (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:createDate: ", p), err)
	}
	return err
}

func (p *Feedback) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetScreenPic() {
		if err := oprot.WriteFieldBegin("screenPic", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:screenPic: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ScreenPic)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.screenPic (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:screenPic: ", p), err)
		}
	}
	return err
}

func (p *Feedback) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogUrl() {
		if err := oprot.WriteFieldBegin("logUrl", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:logUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LogUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.logUrl (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:logUrl: ", p), err)
		}
	}
	return err
}

func (p *Feedback) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("operatingSystemVersion", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:operatingSystemVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.OperatingSystemVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.operatingSystemVersion (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:operatingSystemVersion: ", p), err)
	}
	return err
}

func (p *Feedback) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Feedback(%+v)", *p)
}

// 收藏bean
//
// Attributes:
//  - CollectionID
//  - FileName
//  - Message
//  - MessageType
//  - MsgProperties
//  - GroupID
//  - CollectUserId
//  - MessageUserId
//  - Devicetype
//  - CreateTime
//  - Exts
//  - SDKID
type CollectionBean struct {
	CollectionID  int64  `thrift:"collectionID,1" json:"collectionID"`
	FileName      string `thrift:"fileName,2" json:"fileName"`
	Message       string `thrift:"message,3" json:"message"`
	MessageType   int8   `thrift:"messageType,4" json:"messageType"`
	MsgProperties string `thrift:"msgProperties,5" json:"msgProperties"`
	GroupID       int64  `thrift:"groupID,6" json:"groupID"`
	CollectUserId int64  `thrift:"collectUserId,7" json:"collectUserId"`
	MessageUserId int64  `thrift:"messageUserId,8" json:"messageUserId"`
	Devicetype    int8   `thrift:"devicetype,9" json:"devicetype"`
	CreateTime    int64  `thrift:"createTime,10" json:"createTime"`
	Exts          string `thrift:"exts,11" json:"exts"`
	SDKID         int64  `thrift:"SDKID,12" json:"SDKID"`
}

func NewCollectionBean() *CollectionBean {
	return &CollectionBean{}
}

func (p *CollectionBean) GetCollectionID() int64 {
	return p.CollectionID
}

func (p *CollectionBean) GetFileName() string {
	return p.FileName
}

func (p *CollectionBean) GetMessage() string {
	return p.Message
}

func (p *CollectionBean) GetMessageType() int8 {
	return p.MessageType
}

func (p *CollectionBean) GetMsgProperties() string {
	return p.MsgProperties
}

func (p *CollectionBean) GetGroupID() int64 {
	return p.GroupID
}

func (p *CollectionBean) GetCollectUserId() int64 {
	return p.CollectUserId
}

func (p *CollectionBean) GetMessageUserId() int64 {
	return p.MessageUserId
}

func (p *CollectionBean) GetDevicetype() int8 {
	return p.Devicetype
}

func (p *CollectionBean) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *CollectionBean) GetExts() string {
	return p.Exts
}

func (p *CollectionBean) GetSDKID() int64 {
	return p.SDKID
}
func (p *CollectionBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectionBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CollectionID = v
	}
	return nil
}

func (p *CollectionBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FileName = v
	}
	return nil
}

func (p *CollectionBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *CollectionBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.MessageType = temp
	}
	return nil
}

func (p *CollectionBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MsgProperties = v
	}
	return nil
}

func (p *CollectionBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.GroupID = v
	}
	return nil
}

func (p *CollectionBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CollectUserId = v
	}
	return nil
}

func (p *CollectionBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.MessageUserId = v
	}
	return nil
}

func (p *CollectionBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.Devicetype = temp
	}
	return nil
}

func (p *CollectionBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *CollectionBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Exts = v
	}
	return nil
}

func (p *CollectionBean) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *CollectionBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CollectionBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectionBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("collectionID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:collectionID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CollectionID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.collectionID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:collectionID: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fileName: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fileName: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageType", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:messageType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.MessageType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:messageType: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgProperties", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:msgProperties: ", p), err)
	}
	if err := oprot.WriteString(string(p.MsgProperties)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msgProperties (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:msgProperties: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:groupID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:groupID: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("collectUserId", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:collectUserId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CollectUserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.collectUserId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:collectUserId: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageUserId", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:messageUserId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MessageUserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageUserId (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:messageUserId: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("devicetype", thrift.BYTE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:devicetype: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Devicetype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.devicetype (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:devicetype: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:createTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createTime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:createTime: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exts", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:exts: ", p), err)
	}
	if err := oprot.WriteString(string(p.Exts)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exts (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:exts: ", p), err)
	}
	return err
}

func (p *CollectionBean) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:SDKID: ", p), err)
	}
	return err
}

func (p *CollectionBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectionBean(%+v)", *p)
}

// Attributes:
//  - ResultCode:   	* 0;//成功
//    * 100022001;//参数错误
// * 100022002;//收藏用户id不能为空
// * 100022003;//保存文件到云盘失败
// * 100022004;//保存数据失败
// * 100022005;//删除数据失败
// * 100022006;//该收藏信息不存在
// * 100022007;//该收藏id不能为空
//  - ResultMessage
type CollectionResultBean struct {
	ResultCode    int32   `thrift:"resultCode,1" json:"resultCode"`
	ResultMessage *string `thrift:"resultMessage,2" json:"resultMessage,omitempty"`
}

func NewCollectionResultBean() *CollectionResultBean {
	return &CollectionResultBean{}
}

func (p *CollectionResultBean) GetResultCode() int32 {
	return p.ResultCode
}

var CollectionResultBean_ResultMessage_DEFAULT string

func (p *CollectionResultBean) GetResultMessage() string {
	if !p.IsSetResultMessage() {
		return CollectionResultBean_ResultMessage_DEFAULT
	}
	return *p.ResultMessage
}
func (p *CollectionResultBean) IsSetResultMessage() bool {
	return p.ResultMessage != nil
}

func (p *CollectionResultBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectionResultBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ResultCode = v
	}
	return nil
}

func (p *CollectionResultBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ResultMessage = &v
	}
	return nil
}

func (p *CollectionResultBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CollectionResultBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectionResultBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResultCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resultCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultCode: ", p), err)
	}
	return err
}

func (p *CollectionResultBean) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultMessage() {
		if err := oprot.WriteFieldBegin("resultMessage", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resultMessage: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ResultMessage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resultMessage (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resultMessage: ", p), err)
		}
	}
	return err
}

func (p *CollectionResultBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectionResultBean(%+v)", *p)
}

// 收藏分页返回
//
// Attributes:
//  - Collects
//  - Total
//  - TotalPage
//  - Result_
type CollectionBeanStruct struct {
	Collects  []*CollectionBean     `thrift:"collects,1" json:"collects"`
	Total     int64                 `thrift:"total,2" json:"total"`
	TotalPage int64                 `thrift:"totalPage,3" json:"totalPage"`
	Result_   *CollectionResultBean `thrift:"result,4" json:"result,omitempty"`
}

func NewCollectionBeanStruct() *CollectionBeanStruct {
	return &CollectionBeanStruct{}
}

func (p *CollectionBeanStruct) GetCollects() []*CollectionBean {
	return p.Collects
}

func (p *CollectionBeanStruct) GetTotal() int64 {
	return p.Total
}

func (p *CollectionBeanStruct) GetTotalPage() int64 {
	return p.TotalPage
}

var CollectionBeanStruct_Result__DEFAULT *CollectionResultBean

func (p *CollectionBeanStruct) GetResult_() *CollectionResultBean {
	if !p.IsSetResult_() {
		return CollectionBeanStruct_Result__DEFAULT
	}
	return p.Result_
}
func (p *CollectionBeanStruct) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *CollectionBeanStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectionBeanStruct) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*CollectionBean, 0, size)
	p.Collects = tSlice
	for i := 0; i < size; i++ {
		_elem72 := &CollectionBean{}
		if err := _elem72.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem72), err)
		}
		p.Collects = append(p.Collects, _elem72)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CollectionBeanStruct) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *CollectionBeanStruct) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *CollectionBeanStruct) readField4(iprot thrift.TProtocol) error {
	p.Result_ = &CollectionResultBean{}
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *CollectionBeanStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CollectionBeanStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectionBeanStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("collects", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:collects: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Collects)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Collects {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:collects: ", p), err)
	}
	return err
}

func (p *CollectionBeanStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total: ", p), err)
	}
	return err
}

func (p *CollectionBeanStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPage: ", p), err)
	}
	return err
}

func (p *CollectionBeanStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:result: ", p), err)
		}
		if err := p.Result_.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:result: ", p), err)
		}
	}
	return err
}

func (p *CollectionBeanStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectionBeanStruct(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Collection
type OperateCollectionResult_ struct {
	Result_    *CollectionResultBean `thrift:"result,1" json:"result"`
	Collection *CollectionBean       `thrift:"collection,2" json:"collection,omitempty"`
}

func NewOperateCollectionResult_() *OperateCollectionResult_ {
	return &OperateCollectionResult_{}
}

var OperateCollectionResult__Result__DEFAULT *CollectionResultBean

func (p *OperateCollectionResult_) GetResult_() *CollectionResultBean {
	if !p.IsSetResult_() {
		return OperateCollectionResult__Result__DEFAULT
	}
	return p.Result_
}

var OperateCollectionResult__Collection_DEFAULT *CollectionBean

func (p *OperateCollectionResult_) GetCollection() *CollectionBean {
	if !p.IsSetCollection() {
		return OperateCollectionResult__Collection_DEFAULT
	}
	return p.Collection
}
func (p *OperateCollectionResult_) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *OperateCollectionResult_) IsSetCollection() bool {
	return p.Collection != nil
}

func (p *OperateCollectionResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OperateCollectionResult_) readField1(iprot thrift.TProtocol) error {
	p.Result_ = &CollectionResultBean{}
	if err := p.Result_.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
	}
	return nil
}

func (p *OperateCollectionResult_) readField2(iprot thrift.TProtocol) error {
	p.Collection = &CollectionBean{}
	if err := p.Collection.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Collection), err)
	}
	return nil
}

func (p *OperateCollectionResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OperateCollectionResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OperateCollectionResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err)
	}
	if err := p.Result_.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err)
	}
	return err
}

func (p *OperateCollectionResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCollection() {
		if err := oprot.WriteFieldBegin("collection", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:collection: ", p), err)
		}
		if err := p.Collection.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Collection), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:collection: ", p), err)
		}
	}
	return err
}

func (p *OperateCollectionResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperateCollectionResult_(%+v)", *p)
}

// 工作台轮播图实体 返回类型
//
//
// Attributes:
//  - ID
//  - Title
//  - Cover
//  - Type
//  - DisplayType
//  - DisplayStatus
//  - LinkUrl
//  - DetailUrl
//  - Content
//  - SortNum
//  - CreateTime
//  - UpdateTime
type WorkBenchBanner struct {
	ID            string `thrift:"id,1" json:"id"`
	Title         string `thrift:"title,2" json:"title"`
	Cover         string `thrift:"cover,3" json:"cover"`
	Type          int32  `thrift:"type,4" json:"type"`
	DisplayType   string `thrift:"displayType,5" json:"displayType"`
	DisplayStatus int32  `thrift:"displayStatus,6" json:"displayStatus"`
	LinkUrl       string `thrift:"linkUrl,7" json:"linkUrl"`
	DetailUrl     string `thrift:"detailUrl,8" json:"detailUrl"`
	Content       string `thrift:"content,9" json:"content"`
	SortNum       int32  `thrift:"sortNum,10" json:"sortNum"`
	CreateTime    int64  `thrift:"createTime,11" json:"createTime"`
	UpdateTime    int64  `thrift:"updateTime,12" json:"updateTime"`
}

func NewWorkBenchBanner() *WorkBenchBanner {
	return &WorkBenchBanner{}
}

func (p *WorkBenchBanner) GetID() string {
	return p.ID
}

func (p *WorkBenchBanner) GetTitle() string {
	return p.Title
}

func (p *WorkBenchBanner) GetCover() string {
	return p.Cover
}

func (p *WorkBenchBanner) GetType() int32 {
	return p.Type
}

func (p *WorkBenchBanner) GetDisplayType() string {
	return p.DisplayType
}

func (p *WorkBenchBanner) GetDisplayStatus() int32 {
	return p.DisplayStatus
}

func (p *WorkBenchBanner) GetLinkUrl() string {
	return p.LinkUrl
}

func (p *WorkBenchBanner) GetDetailUrl() string {
	return p.DetailUrl
}

func (p *WorkBenchBanner) GetContent() string {
	return p.Content
}

func (p *WorkBenchBanner) GetSortNum() int32 {
	return p.SortNum
}

func (p *WorkBenchBanner) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *WorkBenchBanner) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *WorkBenchBanner) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkBenchBanner) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *WorkBenchBanner) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *WorkBenchBanner) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Cover = v
	}
	return nil
}

func (p *WorkBenchBanner) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *WorkBenchBanner) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DisplayType = v
	}
	return nil
}

func (p *WorkBenchBanner) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DisplayStatus = v
	}
	return nil
}

func (p *WorkBenchBanner) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LinkUrl = v
	}
	return nil
}

func (p *WorkBenchBanner) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.DetailUrl = v
	}
	return nil
}

func (p *WorkBenchBanner) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *WorkBenchBanner) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SortNum = v
	}
	return nil
}

func (p *WorkBenchBanner) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *WorkBenchBanner) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *WorkBenchBanner) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WorkBenchBanner"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkBenchBanner) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cover", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cover: ", p), err)
	}
	if err := oprot.WriteString(string(p.Cover)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cover (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cover: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayType", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:displayType: ", p), err)
	}
	if err := oprot.WriteString(string(p.DisplayType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:displayType: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayStatus", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:displayStatus: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DisplayStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayStatus (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:displayStatus: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkUrl", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:linkUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.LinkUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkUrl (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:linkUrl: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detailUrl", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:detailUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.DetailUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.detailUrl (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:detailUrl: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.content (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:content: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sortNum", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:sortNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sortNum (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:sortNum: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:createTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createTime (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:createTime: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:updateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateTime (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:updateTime: ", p), err)
	}
	return err
}

func (p *WorkBenchBanner) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkBenchBanner(%+v)", *p)
}

// 官网轮播图实体 返回类型
//
//
// Attributes:
//  - ID
//  - Title
//  - Content
//  - URL
//  - DisplayStatus
//  - Type
//  - LinkUrl
//  - SortNum
//  - CreateTime
//  - UpdateTime
type HomeConfigBanner struct {
	ID            string `thrift:"id,1" json:"id"`
	Title         string `thrift:"title,2" json:"title"`
	Content       string `thrift:"content,3" json:"content"`
	URL           string `thrift:"url,4" json:"url"`
	DisplayStatus int32  `thrift:"displayStatus,5" json:"displayStatus"`
	Type          int32  `thrift:"type,6" json:"type"`
	LinkUrl       string `thrift:"linkUrl,7" json:"linkUrl"`
	SortNum       int32  `thrift:"sortNum,8" json:"sortNum"`
	CreateTime    int64  `thrift:"createTime,9" json:"createTime"`
	UpdateTime    int64  `thrift:"updateTime,10" json:"updateTime"`
}

func NewHomeConfigBanner() *HomeConfigBanner {
	return &HomeConfigBanner{}
}

func (p *HomeConfigBanner) GetID() string {
	return p.ID
}

func (p *HomeConfigBanner) GetTitle() string {
	return p.Title
}

func (p *HomeConfigBanner) GetContent() string {
	return p.Content
}

func (p *HomeConfigBanner) GetURL() string {
	return p.URL
}

func (p *HomeConfigBanner) GetDisplayStatus() int32 {
	return p.DisplayStatus
}

func (p *HomeConfigBanner) GetType() int32 {
	return p.Type
}

func (p *HomeConfigBanner) GetLinkUrl() string {
	return p.LinkUrl
}

func (p *HomeConfigBanner) GetSortNum() int32 {
	return p.SortNum
}

func (p *HomeConfigBanner) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *HomeConfigBanner) GetUpdateTime() int64 {
	return p.UpdateTime
}
func (p *HomeConfigBanner) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HomeConfigBanner) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *HomeConfigBanner) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *HomeConfigBanner) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *HomeConfigBanner) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *HomeConfigBanner) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DisplayStatus = v
	}
	return nil
}

func (p *HomeConfigBanner) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *HomeConfigBanner) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LinkUrl = v
	}
	return nil
}

func (p *HomeConfigBanner) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.SortNum = v
	}
	return nil
}

func (p *HomeConfigBanner) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *HomeConfigBanner) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *HomeConfigBanner) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HomeConfigBanner"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HomeConfigBanner) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.content (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:content: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:url: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayStatus", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:displayStatus: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DisplayStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayStatus (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:displayStatus: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkUrl", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:linkUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.LinkUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkUrl (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:linkUrl: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sortNum", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sortNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sortNum (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sortNum: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:createTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createTime (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:createTime: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateTime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updateTime: ", p), err)
	}
	return err
}

func (p *HomeConfigBanner) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HomeConfigBanner(%+v)", *p)
}

// 消息未读数实体
//
// Attributes:
//  - MessageID
//  - UnreadCount
//  - MaxUnreadCount
//  - SnapshotID
type MsgUnreadCounter struct {
	MessageID      *int64 `thrift:"messageID,1" json:"messageID,omitempty"`
	UnreadCount    *int32 `thrift:"unreadCount,2" json:"unreadCount,omitempty"`
	MaxUnreadCount *int32 `thrift:"maxUnreadCount,3" json:"maxUnreadCount,omitempty"`
	SnapshotID     *int64 `thrift:"snapshotID,4" json:"snapshotID,omitempty"`
}

func NewMsgUnreadCounter() *MsgUnreadCounter {
	return &MsgUnreadCounter{}
}

var MsgUnreadCounter_MessageID_DEFAULT int64

func (p *MsgUnreadCounter) GetMessageID() int64 {
	if !p.IsSetMessageID() {
		return MsgUnreadCounter_MessageID_DEFAULT
	}
	return *p.MessageID
}

var MsgUnreadCounter_UnreadCount_DEFAULT int32

func (p *MsgUnreadCounter) GetUnreadCount() int32 {
	if !p.IsSetUnreadCount() {
		return MsgUnreadCounter_UnreadCount_DEFAULT
	}
	return *p.UnreadCount
}

var MsgUnreadCounter_MaxUnreadCount_DEFAULT int32

func (p *MsgUnreadCounter) GetMaxUnreadCount() int32 {
	if !p.IsSetMaxUnreadCount() {
		return MsgUnreadCounter_MaxUnreadCount_DEFAULT
	}
	return *p.MaxUnreadCount
}

var MsgUnreadCounter_SnapshotID_DEFAULT int64

func (p *MsgUnreadCounter) GetSnapshotID() int64 {
	if !p.IsSetSnapshotID() {
		return MsgUnreadCounter_SnapshotID_DEFAULT
	}
	return *p.SnapshotID
}
func (p *MsgUnreadCounter) IsSetMessageID() bool {
	return p.MessageID != nil
}

func (p *MsgUnreadCounter) IsSetUnreadCount() bool {
	return p.UnreadCount != nil
}

func (p *MsgUnreadCounter) IsSetMaxUnreadCount() bool {
	return p.MaxUnreadCount != nil
}

func (p *MsgUnreadCounter) IsSetSnapshotID() bool {
	return p.SnapshotID != nil
}

func (p *MsgUnreadCounter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MsgUnreadCounter) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MessageID = &v
	}
	return nil
}

func (p *MsgUnreadCounter) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UnreadCount = &v
	}
	return nil
}

func (p *MsgUnreadCounter) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxUnreadCount = &v
	}
	return nil
}

func (p *MsgUnreadCounter) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SnapshotID = &v
	}
	return nil
}

func (p *MsgUnreadCounter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MsgUnreadCounter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MsgUnreadCounter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageID() {
		if err := oprot.WriteFieldBegin("messageID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.MessageID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.messageID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageID: ", p), err)
		}
	}
	return err
}

func (p *MsgUnreadCounter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnreadCount() {
		if err := oprot.WriteFieldBegin("unreadCount", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unreadCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UnreadCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unreadCount (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unreadCount: ", p), err)
		}
	}
	return err
}

func (p *MsgUnreadCounter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxUnreadCount() {
		if err := oprot.WriteFieldBegin("maxUnreadCount", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxUnreadCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxUnreadCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxUnreadCount (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxUnreadCount: ", p), err)
		}
	}
	return err
}

func (p *MsgUnreadCounter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotID() {
		if err := oprot.WriteFieldBegin("snapshotID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:snapshotID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SnapshotID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:snapshotID: ", p), err)
		}
	}
	return err
}

func (p *MsgUnreadCounter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MsgUnreadCounter(%+v)", *p)
}

// 快照
//
// Attributes:
//  - SnapshotID
//  - SnapshotInfo
//  - CreatAt
//  - SDKID
//  - UserIds
type Snapshot struct {
	SnapshotID   *int64  `thrift:"snapshotID,1" json:"snapshotID,omitempty"`
	SnapshotInfo *string `thrift:"snapshotInfo,2" json:"snapshotInfo,omitempty"`
	CreatAt      *int64  `thrift:"creatAt,3" json:"creatAt,omitempty"`
	SDKID        *int64  `thrift:"SDKID,4" json:"SDKID,omitempty"`
	UserIds      []int64 `thrift:"userIds,5" json:"userIds,omitempty"`
}

func NewSnapshot() *Snapshot {
	return &Snapshot{}
}

var Snapshot_SnapshotID_DEFAULT int64

func (p *Snapshot) GetSnapshotID() int64 {
	if !p.IsSetSnapshotID() {
		return Snapshot_SnapshotID_DEFAULT
	}
	return *p.SnapshotID
}

var Snapshot_SnapshotInfo_DEFAULT string

func (p *Snapshot) GetSnapshotInfo() string {
	if !p.IsSetSnapshotInfo() {
		return Snapshot_SnapshotInfo_DEFAULT
	}
	return *p.SnapshotInfo
}

var Snapshot_CreatAt_DEFAULT int64

func (p *Snapshot) GetCreatAt() int64 {
	if !p.IsSetCreatAt() {
		return Snapshot_CreatAt_DEFAULT
	}
	return *p.CreatAt
}

var Snapshot_SDKID_DEFAULT int64

func (p *Snapshot) GetSDKID() int64 {
	if !p.IsSetSDKID() {
		return Snapshot_SDKID_DEFAULT
	}
	return *p.SDKID
}

var Snapshot_UserIds_DEFAULT []int64

func (p *Snapshot) GetUserIds() []int64 {
	return p.UserIds
}
func (p *Snapshot) IsSetSnapshotID() bool {
	return p.SnapshotID != nil
}

func (p *Snapshot) IsSetSnapshotInfo() bool {
	return p.SnapshotInfo != nil
}

func (p *Snapshot) IsSetCreatAt() bool {
	return p.CreatAt != nil
}

func (p *Snapshot) IsSetSDKID() bool {
	return p.SDKID != nil
}

func (p *Snapshot) IsSetUserIds() bool {
	return p.UserIds != nil
}

func (p *Snapshot) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Snapshot) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SnapshotID = &v
	}
	return nil
}

func (p *Snapshot) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SnapshotInfo = &v
	}
	return nil
}

func (p *Snapshot) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CreatAt = &v
	}
	return nil
}

func (p *Snapshot) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SDKID = &v
	}
	return nil
}

func (p *Snapshot) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.UserIds = tSlice
	for i := 0; i < size; i++ {
		var _elem73 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem73 = v
		}
		p.UserIds = append(p.UserIds, _elem73)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Snapshot) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Snapshot"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Snapshot) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotID() {
		if err := oprot.WriteFieldBegin("snapshotID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:snapshotID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SnapshotID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:snapshotID: ", p), err)
		}
	}
	return err
}

func (p *Snapshot) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotInfo() {
		if err := oprot.WriteFieldBegin("snapshotInfo", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snapshotInfo: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SnapshotInfo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotInfo (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snapshotInfo: ", p), err)
		}
	}
	return err
}

func (p *Snapshot) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatAt() {
		if err := oprot.WriteFieldBegin("creatAt", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creatAt: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreatAt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creatAt (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creatAt: ", p), err)
		}
	}
	return err
}

func (p *Snapshot) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSDKID() {
		if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SDKID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SDKID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.SDKID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SDKID: ", p), err)
		}
	}
	return err
}

func (p *Snapshot) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserIds() {
		if err := oprot.WriteFieldBegin("userIds", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.UserIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.UserIds {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userIds: ", p), err)
		}
	}
	return err
}

func (p *Snapshot) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Snapshot(%+v)", *p)
}

// 工作台轮播图分页实体 返回类型
//
//
// Attributes:
//  - TotalCount
//  - TotalPage
//  - BannerList
type WorkBenchBannerPage struct {
	TotalCount int64              `thrift:"totalCount,1" json:"totalCount"`
	TotalPage  int64              `thrift:"totalPage,2" json:"totalPage"`
	BannerList []*WorkBenchBanner `thrift:"bannerList,3" json:"bannerList"`
}

func NewWorkBenchBannerPage() *WorkBenchBannerPage {
	return &WorkBenchBannerPage{}
}

func (p *WorkBenchBannerPage) GetTotalCount() int64 {
	return p.TotalCount
}

func (p *WorkBenchBannerPage) GetTotalPage() int64 {
	return p.TotalPage
}

func (p *WorkBenchBannerPage) GetBannerList() []*WorkBenchBanner {
	return p.BannerList
}
func (p *WorkBenchBannerPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkBenchBannerPage) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *WorkBenchBannerPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalPage = v
	}
	return nil
}

func (p *WorkBenchBannerPage) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*WorkBenchBanner, 0, size)
	p.BannerList = tSlice
	for i := 0; i < size; i++ {
		_elem74 := &WorkBenchBanner{}
		if err := _elem74.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem74), err)
		}
		p.BannerList = append(p.BannerList, _elem74)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *WorkBenchBannerPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WorkBenchBannerPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkBenchBannerPage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalCount", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalCount (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalCount: ", p), err)
	}
	return err
}

func (p *WorkBenchBannerPage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPage", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalPage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPage (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalPage: ", p), err)
	}
	return err
}

func (p *WorkBenchBannerPage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bannerList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bannerList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BannerList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BannerList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bannerList: ", p), err)
	}
	return err
}

func (p *WorkBenchBannerPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkBenchBannerPage(%+v)", *p)
}

// 帮助系统
//
// Attributes:
//  - ID
//  - Title
//  - ParentId
//  - HelpType
//  - LinkType
//  - ClientType
//  - DisplayStatus
//  - LinkUrl
//  - DetailUrl
//  - Content
//  - SortNum
//  - CreateTime
//  - UpdateTime
//  - Status
type SystemHelp struct {
	ID            int64   `thrift:"id,1" json:"id"`
	Title         *string `thrift:"title,2" json:"title,omitempty"`
	ParentId      int32   `thrift:"parentId,3" json:"parentId"`
	HelpType      int32   `thrift:"helpType,4" json:"helpType"`
	LinkType      int32   `thrift:"linkType,5" json:"linkType"`
	ClientType    *string `thrift:"clientType,6" json:"clientType,omitempty"`
	DisplayStatus int32   `thrift:"displayStatus,7" json:"displayStatus"`
	LinkUrl       *string `thrift:"linkUrl,8" json:"linkUrl,omitempty"`
	DetailUrl     *string `thrift:"detailUrl,9" json:"detailUrl,omitempty"`
	Content       *string `thrift:"content,10" json:"content,omitempty"`
	SortNum       int32   `thrift:"sortNum,11" json:"sortNum"`
	CreateTime    int64   `thrift:"createTime,12" json:"createTime"`
	UpdateTime    int64   `thrift:"updateTime,13" json:"updateTime"`
	Status        int32   `thrift:"status,14" json:"status"`
}

func NewSystemHelp() *SystemHelp {
	return &SystemHelp{}
}

func (p *SystemHelp) GetID() int64 {
	return p.ID
}

var SystemHelp_Title_DEFAULT string

func (p *SystemHelp) GetTitle() string {
	if !p.IsSetTitle() {
		return SystemHelp_Title_DEFAULT
	}
	return *p.Title
}

func (p *SystemHelp) GetParentId() int32 {
	return p.ParentId
}

func (p *SystemHelp) GetHelpType() int32 {
	return p.HelpType
}

func (p *SystemHelp) GetLinkType() int32 {
	return p.LinkType
}

var SystemHelp_ClientType_DEFAULT string

func (p *SystemHelp) GetClientType() string {
	if !p.IsSetClientType() {
		return SystemHelp_ClientType_DEFAULT
	}
	return *p.ClientType
}

func (p *SystemHelp) GetDisplayStatus() int32 {
	return p.DisplayStatus
}

var SystemHelp_LinkUrl_DEFAULT string

func (p *SystemHelp) GetLinkUrl() string {
	if !p.IsSetLinkUrl() {
		return SystemHelp_LinkUrl_DEFAULT
	}
	return *p.LinkUrl
}

var SystemHelp_DetailUrl_DEFAULT string

func (p *SystemHelp) GetDetailUrl() string {
	if !p.IsSetDetailUrl() {
		return SystemHelp_DetailUrl_DEFAULT
	}
	return *p.DetailUrl
}

var SystemHelp_Content_DEFAULT string

func (p *SystemHelp) GetContent() string {
	if !p.IsSetContent() {
		return SystemHelp_Content_DEFAULT
	}
	return *p.Content
}

func (p *SystemHelp) GetSortNum() int32 {
	return p.SortNum
}

func (p *SystemHelp) GetCreateTime() int64 {
	return p.CreateTime
}

func (p *SystemHelp) GetUpdateTime() int64 {
	return p.UpdateTime
}

func (p *SystemHelp) GetStatus() int32 {
	return p.Status
}
func (p *SystemHelp) IsSetTitle() bool {
	return p.Title != nil
}

func (p *SystemHelp) IsSetClientType() bool {
	return p.ClientType != nil
}

func (p *SystemHelp) IsSetLinkUrl() bool {
	return p.LinkUrl != nil
}

func (p *SystemHelp) IsSetDetailUrl() bool {
	return p.DetailUrl != nil
}

func (p *SystemHelp) IsSetContent() bool {
	return p.Content != nil
}

func (p *SystemHelp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SystemHelp) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SystemHelp) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *SystemHelp) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ParentId = v
	}
	return nil
}

func (p *SystemHelp) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HelpType = v
	}
	return nil
}

func (p *SystemHelp) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LinkType = v
	}
	return nil
}

func (p *SystemHelp) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ClientType = &v
	}
	return nil
}

func (p *SystemHelp) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DisplayStatus = v
	}
	return nil
}

func (p *SystemHelp) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.LinkUrl = &v
	}
	return nil
}

func (p *SystemHelp) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DetailUrl = &v
	}
	return nil
}

func (p *SystemHelp) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Content = &v
	}
	return nil
}

func (p *SystemHelp) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.SortNum = v
	}
	return nil
}

func (p *SystemHelp) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *SystemHelp) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *SystemHelp) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *SystemHelp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SystemHelp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SystemHelp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *SystemHelp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
		}
	}
	return err
}

func (p *SystemHelp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parentId", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parentId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ParentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parentId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parentId: ", p), err)
	}
	return err
}

func (p *SystemHelp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("helpType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:helpType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.HelpType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.helpType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:helpType: ", p), err)
	}
	return err
}

func (p *SystemHelp) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:linkType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LinkType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:linkType: ", p), err)
	}
	return err
}

func (p *SystemHelp) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientType() {
		if err := oprot.WriteFieldBegin("clientType", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:clientType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ClientType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clientType (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:clientType: ", p), err)
		}
	}
	return err
}

func (p *SystemHelp) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("displayStatus", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:displayStatus: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DisplayStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.displayStatus (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:displayStatus: ", p), err)
	}
	return err
}

func (p *SystemHelp) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLinkUrl() {
		if err := oprot.WriteFieldBegin("linkUrl", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:linkUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LinkUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.linkUrl (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:linkUrl: ", p), err)
		}
	}
	return err
}

func (p *SystemHelp) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetailUrl() {
		if err := oprot.WriteFieldBegin("detailUrl", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:detailUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DetailUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.detailUrl (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:detailUrl: ", p), err)
		}
	}
	return err
}

func (p *SystemHelp) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err := oprot.WriteFieldBegin("content", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:content: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Content)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.content (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:content: ", p), err)
		}
	}
	return err
}

func (p *SystemHelp) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sortNum", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sortNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sortNum (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sortNum: ", p), err)
	}
	return err
}

func (p *SystemHelp) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:createTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createTime (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:createTime: ", p), err)
	}
	return err
}

func (p *SystemHelp) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateTime", thrift.I64, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:updateTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateTime (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:updateTime: ", p), err)
	}
	return err
}

func (p *SystemHelp) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:status: ", p), err)
	}
	return err
}

func (p *SystemHelp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemHelp(%+v)", *p)
}

// 用户行为
//
//
// Attributes:
//  - UserID
//  - Name
//  - OperateType
//  - TargetID
//  - TargetName
//  - OperateResult_
//  - Extend
//  - OperateAt
type UserBehavior struct {
	UserID         *int64  `thrift:"userID,1" json:"userID,omitempty"`
	Name           *string `thrift:"name,2" json:"name,omitempty"`
	OperateType    *int8   `thrift:"operateType,3" json:"operateType,omitempty"`
	TargetID       *int64  `thrift:"targetID,4" json:"targetID,omitempty"`
	TargetName     *string `thrift:"targetName,5" json:"targetName,omitempty"`
	OperateResult_ *int8   `thrift:"operateResult,6" json:"operateResult,omitempty"`
	Extend         *string `thrift:"extend,7" json:"extend,omitempty"`
	OperateAt      *int64  `thrift:"operateAt,8" json:"operateAt,omitempty"`
}

func NewUserBehavior() *UserBehavior {
	return &UserBehavior{}
}

var UserBehavior_UserID_DEFAULT int64

func (p *UserBehavior) GetUserID() int64 {
	if !p.IsSetUserID() {
		return UserBehavior_UserID_DEFAULT
	}
	return *p.UserID
}

var UserBehavior_Name_DEFAULT string

func (p *UserBehavior) GetName() string {
	if !p.IsSetName() {
		return UserBehavior_Name_DEFAULT
	}
	return *p.Name
}

var UserBehavior_OperateType_DEFAULT int8

func (p *UserBehavior) GetOperateType() int8 {
	if !p.IsSetOperateType() {
		return UserBehavior_OperateType_DEFAULT
	}
	return *p.OperateType
}

var UserBehavior_TargetID_DEFAULT int64

func (p *UserBehavior) GetTargetID() int64 {
	if !p.IsSetTargetID() {
		return UserBehavior_TargetID_DEFAULT
	}
	return *p.TargetID
}

var UserBehavior_TargetName_DEFAULT string

func (p *UserBehavior) GetTargetName() string {
	if !p.IsSetTargetName() {
		return UserBehavior_TargetName_DEFAULT
	}
	return *p.TargetName
}

var UserBehavior_OperateResult__DEFAULT int8

func (p *UserBehavior) GetOperateResult_() int8 {
	if !p.IsSetOperateResult_() {
		return UserBehavior_OperateResult__DEFAULT
	}
	return *p.OperateResult_
}

var UserBehavior_Extend_DEFAULT string

func (p *UserBehavior) GetExtend() string {
	if !p.IsSetExtend() {
		return UserBehavior_Extend_DEFAULT
	}
	return *p.Extend
}

var UserBehavior_OperateAt_DEFAULT int64

func (p *UserBehavior) GetOperateAt() int64 {
	if !p.IsSetOperateAt() {
		return UserBehavior_OperateAt_DEFAULT
	}
	return *p.OperateAt
}
func (p *UserBehavior) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserBehavior) IsSetName() bool {
	return p.Name != nil
}

func (p *UserBehavior) IsSetOperateType() bool {
	return p.OperateType != nil
}

func (p *UserBehavior) IsSetTargetID() bool {
	return p.TargetID != nil
}

func (p *UserBehavior) IsSetTargetName() bool {
	return p.TargetName != nil
}

func (p *UserBehavior) IsSetOperateResult_() bool {
	return p.OperateResult_ != nil
}

func (p *UserBehavior) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *UserBehavior) IsSetOperateAt() bool {
	return p.OperateAt != nil
}

func (p *UserBehavior) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserBehavior) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *UserBehavior) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *UserBehavior) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.OperateType = &temp
	}
	return nil
}

func (p *UserBehavior) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TargetID = &v
	}
	return nil
}

func (p *UserBehavior) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TargetName = &v
	}
	return nil
}

func (p *UserBehavior) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.OperateResult_ = &temp
	}
	return nil
}

func (p *UserBehavior) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *UserBehavior) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OperateAt = &v
	}
	return nil
}

func (p *UserBehavior) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserBehavior"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserBehavior) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
		}
	}
	return err
}

func (p *UserBehavior) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *UserBehavior) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperateType() {
		if err := oprot.WriteFieldBegin("operateType", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:operateType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.OperateType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.operateType (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:operateType: ", p), err)
		}
	}
	return err
}

func (p *UserBehavior) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetID() {
		if err := oprot.WriteFieldBegin("targetID", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TargetID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.targetID (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetID: ", p), err)
		}
	}
	return err
}

func (p *UserBehavior) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetName() {
		if err := oprot.WriteFieldBegin("targetName", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:targetName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TargetName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.targetName (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:targetName: ", p), err)
		}
	}
	return err
}

func (p *UserBehavior) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperateResult_() {
		if err := oprot.WriteFieldBegin("operateResult", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:operateResult: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.OperateResult_)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.operateResult (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:operateResult: ", p), err)
		}
	}
	return err
}

func (p *UserBehavior) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extend: ", p), err)
		}
	}
	return err
}

func (p *UserBehavior) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperateAt() {
		if err := oprot.WriteFieldBegin("operateAt", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:operateAt: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OperateAt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.operateAt (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:operateAt: ", p), err)
		}
	}
	return err
}

func (p *UserBehavior) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserBehavior(%+v)", *p)
}

// 好友请求
//
// Attributes:
//  - UserId
//  - SDKID
//  - BuddyId
//  - Message
//  - RequestType
//  - SubMsgType
//  - DeviceType
type BuddyVerifyRequest struct {
	UserId      int64   `thrift:"userId,1" json:"userId"`
	SDKID       int64   `thrift:"SDKID,2" json:"SDKID"`
	BuddyId     int64   `thrift:"buddyId,3" json:"buddyId"`
	Message     *string `thrift:"message,4" json:"message,omitempty"`
	RequestType int32   `thrift:"requestType,5" json:"requestType"`
	SubMsgType  int32   `thrift:"subMsgType,6" json:"subMsgType"`
	DeviceType  int8    `thrift:"deviceType,7" json:"deviceType"`
}

func NewBuddyVerifyRequest() *BuddyVerifyRequest {
	return &BuddyVerifyRequest{}
}

func (p *BuddyVerifyRequest) GetUserId() int64 {
	return p.UserId
}

func (p *BuddyVerifyRequest) GetSDKID() int64 {
	return p.SDKID
}

func (p *BuddyVerifyRequest) GetBuddyId() int64 {
	return p.BuddyId
}

var BuddyVerifyRequest_Message_DEFAULT string

func (p *BuddyVerifyRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return BuddyVerifyRequest_Message_DEFAULT
	}
	return *p.Message
}

func (p *BuddyVerifyRequest) GetRequestType() int32 {
	return p.RequestType
}

func (p *BuddyVerifyRequest) GetSubMsgType() int32 {
	return p.SubMsgType
}

func (p *BuddyVerifyRequest) GetDeviceType() int8 {
	return p.DeviceType
}
func (p *BuddyVerifyRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *BuddyVerifyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BuddyVerifyRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *BuddyVerifyRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *BuddyVerifyRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BuddyId = v
	}
	return nil
}

func (p *BuddyVerifyRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *BuddyVerifyRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RequestType = v
	}
	return nil
}

func (p *BuddyVerifyRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *BuddyVerifyRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *BuddyVerifyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BuddyVerifyRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BuddyVerifyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *BuddyVerifyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:SDKID: ", p), err)
	}
	return err
}

func (p *BuddyVerifyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buddyId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:buddyId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BuddyId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buddyId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:buddyId: ", p), err)
	}
	return err
}

func (p *BuddyVerifyRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
		}
	}
	return err
}

func (p *BuddyVerifyRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:requestType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RequestType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:requestType: ", p), err)
	}
	return err
}

func (p *BuddyVerifyRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:subMsgType: ", p), err)
	}
	return err
}

func (p *BuddyVerifyRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceType: ", p), err)
	}
	return err
}

func (p *BuddyVerifyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuddyVerifyRequest(%+v)", *p)
}

// 好友响应
//
// Attributes:
//  - UserId
//  - ApplicationId
//  - Message
//  - RequestType
//  - SubMsgType
//  - InviteMark
//  - SDKID
//  - DeviceType
//  - BuddyId
type BuddyVerifyResponse struct {
	UserId        int64   `thrift:"userId,1" json:"userId"`
	ApplicationId int64   `thrift:"applicationId,2" json:"applicationId"`
	Message       *string `thrift:"message,3" json:"message,omitempty"`
	RequestType   int32   `thrift:"requestType,4" json:"requestType"`
	SubMsgType    int32   `thrift:"subMsgType,5" json:"subMsgType"`
	InviteMark    *int8   `thrift:"inviteMark,6" json:"inviteMark,omitempty"`
	SDKID         int64   `thrift:"SDKID,7" json:"SDKID"`
	DeviceType    int8    `thrift:"deviceType,8" json:"deviceType"`
	BuddyId       *int64  `thrift:"buddyId,9" json:"buddyId,omitempty"`
}

func NewBuddyVerifyResponse() *BuddyVerifyResponse {
	return &BuddyVerifyResponse{}
}

func (p *BuddyVerifyResponse) GetUserId() int64 {
	return p.UserId
}

func (p *BuddyVerifyResponse) GetApplicationId() int64 {
	return p.ApplicationId
}

var BuddyVerifyResponse_Message_DEFAULT string

func (p *BuddyVerifyResponse) GetMessage() string {
	if !p.IsSetMessage() {
		return BuddyVerifyResponse_Message_DEFAULT
	}
	return *p.Message
}

func (p *BuddyVerifyResponse) GetRequestType() int32 {
	return p.RequestType
}

func (p *BuddyVerifyResponse) GetSubMsgType() int32 {
	return p.SubMsgType
}

var BuddyVerifyResponse_InviteMark_DEFAULT int8

func (p *BuddyVerifyResponse) GetInviteMark() int8 {
	if !p.IsSetInviteMark() {
		return BuddyVerifyResponse_InviteMark_DEFAULT
	}
	return *p.InviteMark
}

func (p *BuddyVerifyResponse) GetSDKID() int64 {
	return p.SDKID
}

func (p *BuddyVerifyResponse) GetDeviceType() int8 {
	return p.DeviceType
}

var BuddyVerifyResponse_BuddyId_DEFAULT int64

func (p *BuddyVerifyResponse) GetBuddyId() int64 {
	if !p.IsSetBuddyId() {
		return BuddyVerifyResponse_BuddyId_DEFAULT
	}
	return *p.BuddyId
}
func (p *BuddyVerifyResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *BuddyVerifyResponse) IsSetInviteMark() bool {
	return p.InviteMark != nil
}

func (p *BuddyVerifyResponse) IsSetBuddyId() bool {
	return p.BuddyId != nil
}

func (p *BuddyVerifyResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BuddyVerifyResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *BuddyVerifyResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ApplicationId = v
	}
	return nil
}

func (p *BuddyVerifyResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *BuddyVerifyResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RequestType = v
	}
	return nil
}

func (p *BuddyVerifyResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *BuddyVerifyResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.InviteMark = &temp
	}
	return nil
}

func (p *BuddyVerifyResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *BuddyVerifyResponse) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *BuddyVerifyResponse) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.BuddyId = &v
	}
	return nil
}

func (p *BuddyVerifyResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BuddyVerifyResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BuddyVerifyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *BuddyVerifyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ApplicationId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationId: ", p), err)
	}
	return err
}

func (p *BuddyVerifyResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
		}
	}
	return err
}

func (p *BuddyVerifyResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:requestType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RequestType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:requestType: ", p), err)
	}
	return err
}

func (p *BuddyVerifyResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:subMsgType: ", p), err)
	}
	return err
}

func (p *BuddyVerifyResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteMark() {
		if err := oprot.WriteFieldBegin("inviteMark", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:inviteMark: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.InviteMark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.inviteMark (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:inviteMark: ", p), err)
		}
	}
	return err
}

func (p *BuddyVerifyResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SDKID: ", p), err)
	}
	return err
}

func (p *BuddyVerifyResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deviceType: ", p), err)
	}
	return err
}

func (p *BuddyVerifyResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuddyId() {
		if err := oprot.WriteFieldBegin("buddyId", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:buddyId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.BuddyId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.buddyId (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:buddyId: ", p), err)
		}
	}
	return err
}

func (p *BuddyVerifyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuddyVerifyResponse(%+v)", *p)
}

// 好友返回
//
// 状态码：
// 	100 参数错误
// 	132 对方不允许陌生人加好友
// 	134 你们已经是好友关系
// 	135 你已经关注了他
// 	136 请求已发出,等待对方处理
// 	142 添加好友成功
// 	143 关注成功
// 	144 请求已被处理
// 	146 拒绝你的好友请求
// 	162 已经把此用户拉入黑名单
// 	163 已经被此用户拉入黑名单
// 	164 添加好友失败
// 	165 关注失败
// 	170 请求记录不存在
//
//
// Attributes:
//  - Code
//  - Message
//  - Pagetimestamp
//  - Page
type BuddyResult_ struct {
	Code          int32   `thrift:"code,1" json:"code"`
	Message       *string `thrift:"message,2" json:"message,omitempty"`
	Pagetimestamp int64   `thrift:"pagetimestamp,3" json:"pagetimestamp"`
	Page          int16   `thrift:"page,4" json:"page"`
}

func NewBuddyResult_() *BuddyResult_ {
	return &BuddyResult_{}
}

func (p *BuddyResult_) GetCode() int32 {
	return p.Code
}

var BuddyResult__Message_DEFAULT string

func (p *BuddyResult_) GetMessage() string {
	if !p.IsSetMessage() {
		return BuddyResult__Message_DEFAULT
	}
	return *p.Message
}

func (p *BuddyResult_) GetPagetimestamp() int64 {
	return p.Pagetimestamp
}

func (p *BuddyResult_) GetPage() int16 {
	return p.Page
}
func (p *BuddyResult_) IsSetMessage() bool {
	return p.Message != nil
}

func (p *BuddyResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BuddyResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *BuddyResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *BuddyResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pagetimestamp = v
	}
	return nil
}

func (p *BuddyResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Page = v
	}
	return nil
}

func (p *BuddyResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BuddyResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BuddyResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *BuddyResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *BuddyResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pagetimestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pagetimestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Pagetimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pagetimestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pagetimestamp: ", p), err)
	}
	return err
}

func (p *BuddyResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:page: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Page)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.page (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:page: ", p), err)
	}
	return err
}

func (p *BuddyResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BuddyResult_(%+v)", *p)
}

// 群申请
//
// Attributes:
//  - UserId
//  - GroupId
//  - Message
//  - SubMsgType
//  - SDKID
//  - DeviceType
type GroupVerifyRequest struct {
	UserId     int64   `thrift:"userId,1" json:"userId"`
	GroupId    int64   `thrift:"groupId,2" json:"groupId"`
	Message    *string `thrift:"message,3" json:"message,omitempty"`
	SubMsgType int32   `thrift:"subMsgType,4" json:"subMsgType"`
	SDKID      int64   `thrift:"SDKID,5" json:"SDKID"`
	DeviceType int8    `thrift:"deviceType,6" json:"deviceType"`
}

func NewGroupVerifyRequest() *GroupVerifyRequest {
	return &GroupVerifyRequest{}
}

func (p *GroupVerifyRequest) GetUserId() int64 {
	return p.UserId
}

func (p *GroupVerifyRequest) GetGroupId() int64 {
	return p.GroupId
}

var GroupVerifyRequest_Message_DEFAULT string

func (p *GroupVerifyRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return GroupVerifyRequest_Message_DEFAULT
	}
	return *p.Message
}

func (p *GroupVerifyRequest) GetSubMsgType() int32 {
	return p.SubMsgType
}

func (p *GroupVerifyRequest) GetSDKID() int64 {
	return p.SDKID
}

func (p *GroupVerifyRequest) GetDeviceType() int8 {
	return p.DeviceType
}
func (p *GroupVerifyRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GroupVerifyRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupVerifyRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GroupVerifyRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupVerifyRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *GroupVerifyRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *GroupVerifyRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *GroupVerifyRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *GroupVerifyRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupVerifyRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupVerifyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *GroupVerifyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *GroupVerifyRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
		}
	}
	return err
}

func (p *GroupVerifyRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subMsgType: ", p), err)
	}
	return err
}

func (p *GroupVerifyRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SDKID: ", p), err)
	}
	return err
}

func (p *GroupVerifyRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceType: ", p), err)
	}
	return err
}

func (p *GroupVerifyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupVerifyRequest(%+v)", *p)
}

// 群响应
//
// Attributes:
//  - UserId
//  - GroupId
//  - ApplicationId
//  - Message
//  - SubMsgType
//  - SDKID
//  - DeviceType
type GroupVerifyResponse struct {
	UserId        int64   `thrift:"userId,1" json:"userId"`
	GroupId       int64   `thrift:"groupId,2" json:"groupId"`
	ApplicationId int64   `thrift:"applicationId,3" json:"applicationId"`
	Message       *string `thrift:"message,4" json:"message,omitempty"`
	SubMsgType    int32   `thrift:"subMsgType,5" json:"subMsgType"`
	SDKID         int64   `thrift:"SDKID,6" json:"SDKID"`
	DeviceType    int8    `thrift:"deviceType,7" json:"deviceType"`
}

func NewGroupVerifyResponse() *GroupVerifyResponse {
	return &GroupVerifyResponse{}
}

func (p *GroupVerifyResponse) GetUserId() int64 {
	return p.UserId
}

func (p *GroupVerifyResponse) GetGroupId() int64 {
	return p.GroupId
}

func (p *GroupVerifyResponse) GetApplicationId() int64 {
	return p.ApplicationId
}

var GroupVerifyResponse_Message_DEFAULT string

func (p *GroupVerifyResponse) GetMessage() string {
	if !p.IsSetMessage() {
		return GroupVerifyResponse_Message_DEFAULT
	}
	return *p.Message
}

func (p *GroupVerifyResponse) GetSubMsgType() int32 {
	return p.SubMsgType
}

func (p *GroupVerifyResponse) GetSDKID() int64 {
	return p.SDKID
}

func (p *GroupVerifyResponse) GetDeviceType() int8 {
	return p.DeviceType
}
func (p *GroupVerifyResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GroupVerifyResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupVerifyResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GroupVerifyResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupVerifyResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ApplicationId = v
	}
	return nil
}

func (p *GroupVerifyResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *GroupVerifyResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *GroupVerifyResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *GroupVerifyResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *GroupVerifyResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupVerifyResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupVerifyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *GroupVerifyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *GroupVerifyResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ApplicationId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationId: ", p), err)
	}
	return err
}

func (p *GroupVerifyResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
		}
	}
	return err
}

func (p *GroupVerifyResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:subMsgType: ", p), err)
	}
	return err
}

func (p *GroupVerifyResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SDKID: ", p), err)
	}
	return err
}

func (p *GroupVerifyResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceType: ", p), err)
	}
	return err
}

func (p *GroupVerifyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupVerifyResponse(%+v)", *p)
}

// 邀请进群请求
//
// Attributes:
//  - UserId
//  - GroupId
//  - InviteUserIds
//  - Message
//  - SubMsgType
//  - SDKID
//  - DeviceType
type GroupInviteRequest struct {
	UserId        int64          `thrift:"userId,1" json:"userId"`
	GroupId       int64          `thrift:"groupId,2" json:"groupId"`
	InviteUserIds map[int64]bool `thrift:"inviteUserIds,3" json:"inviteUserIds"`
	Message       *string        `thrift:"message,4" json:"message,omitempty"`
	SubMsgType    int32          `thrift:"subMsgType,5" json:"subMsgType"`
	SDKID         int64          `thrift:"SDKID,6" json:"SDKID"`
	DeviceType    int8           `thrift:"deviceType,7" json:"deviceType"`
}

func NewGroupInviteRequest() *GroupInviteRequest {
	return &GroupInviteRequest{}
}

func (p *GroupInviteRequest) GetUserId() int64 {
	return p.UserId
}

func (p *GroupInviteRequest) GetGroupId() int64 {
	return p.GroupId
}

func (p *GroupInviteRequest) GetInviteUserIds() map[int64]bool {
	return p.InviteUserIds
}

var GroupInviteRequest_Message_DEFAULT string

func (p *GroupInviteRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return GroupInviteRequest_Message_DEFAULT
	}
	return *p.Message
}

func (p *GroupInviteRequest) GetSubMsgType() int32 {
	return p.SubMsgType
}

func (p *GroupInviteRequest) GetSDKID() int64 {
	return p.SDKID
}

func (p *GroupInviteRequest) GetDeviceType() int8 {
	return p.DeviceType
}
func (p *GroupInviteRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GroupInviteRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupInviteRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GroupInviteRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupInviteRequest) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int64]bool, size)
	p.InviteUserIds = tSet
	for i := 0; i < size; i++ {
		var _elem75 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem75 = v
		}
		p.InviteUserIds[_elem75] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *GroupInviteRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *GroupInviteRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *GroupInviteRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *GroupInviteRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *GroupInviteRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupInviteRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupInviteRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *GroupInviteRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *GroupInviteRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inviteUserIds", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inviteUserIds: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I64, len(p.InviteUserIds)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.InviteUserIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inviteUserIds: ", p), err)
	}
	return err
}

func (p *GroupInviteRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
		}
	}
	return err
}

func (p *GroupInviteRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:subMsgType: ", p), err)
	}
	return err
}

func (p *GroupInviteRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SDKID: ", p), err)
	}
	return err
}

func (p *GroupInviteRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceType: ", p), err)
	}
	return err
}

func (p *GroupInviteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupInviteRequest(%+v)", *p)
}

// 邀请进群响应
//
// Attributes:
//  - UserId
//  - GroupId
//  - ApplicationId
//  - Message
//  - SubMsgType
//  - SDKID
//  - DeviceType
type GroupInviteResponse struct {
	UserId        int64   `thrift:"userId,1" json:"userId"`
	GroupId       int64   `thrift:"groupId,2" json:"groupId"`
	ApplicationId int64   `thrift:"applicationId,3" json:"applicationId"`
	Message       *string `thrift:"message,4" json:"message,omitempty"`
	SubMsgType    int32   `thrift:"subMsgType,5" json:"subMsgType"`
	SDKID         int64   `thrift:"SDKID,6" json:"SDKID"`
	DeviceType    int8    `thrift:"deviceType,7" json:"deviceType"`
}

func NewGroupInviteResponse() *GroupInviteResponse {
	return &GroupInviteResponse{}
}

func (p *GroupInviteResponse) GetUserId() int64 {
	return p.UserId
}

func (p *GroupInviteResponse) GetGroupId() int64 {
	return p.GroupId
}

func (p *GroupInviteResponse) GetApplicationId() int64 {
	return p.ApplicationId
}

var GroupInviteResponse_Message_DEFAULT string

func (p *GroupInviteResponse) GetMessage() string {
	if !p.IsSetMessage() {
		return GroupInviteResponse_Message_DEFAULT
	}
	return *p.Message
}

func (p *GroupInviteResponse) GetSubMsgType() int32 {
	return p.SubMsgType
}

func (p *GroupInviteResponse) GetSDKID() int64 {
	return p.SDKID
}

func (p *GroupInviteResponse) GetDeviceType() int8 {
	return p.DeviceType
}
func (p *GroupInviteResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GroupInviteResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupInviteResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GroupInviteResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupInviteResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ApplicationId = v
	}
	return nil
}

func (p *GroupInviteResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *GroupInviteResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *GroupInviteResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *GroupInviteResponse) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *GroupInviteResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupInviteResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupInviteResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *GroupInviteResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *GroupInviteResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("applicationId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ApplicationId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.applicationId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationId: ", p), err)
	}
	return err
}

func (p *GroupInviteResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
		}
	}
	return err
}

func (p *GroupInviteResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:subMsgType: ", p), err)
	}
	return err
}

func (p *GroupInviteResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SDKID: ", p), err)
	}
	return err
}

func (p *GroupInviteResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceType: ", p), err)
	}
	return err
}

func (p *GroupInviteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupInviteResponse(%+v)", *p)
}

// 群解散
//
// Attributes:
//  - UserId
//  - GroupId
//  - Message
//  - SubMsgType
//  - SDKID
//  - DeviceType
//  - GroupName
//  - NoticeUserIds
type GroupDissolveRequest struct {
	UserId        int64          `thrift:"userId,1" json:"userId"`
	GroupId       int64          `thrift:"groupId,2" json:"groupId"`
	Message       *string        `thrift:"message,3" json:"message,omitempty"`
	SubMsgType    int32          `thrift:"subMsgType,4" json:"subMsgType"`
	SDKID         int64          `thrift:"SDKID,5" json:"SDKID"`
	DeviceType    int8           `thrift:"deviceType,6" json:"deviceType"`
	GroupName     string         `thrift:"groupName,7" json:"groupName"`
	NoticeUserIds map[int64]bool `thrift:"noticeUserIds,8" json:"noticeUserIds"`
}

func NewGroupDissolveRequest() *GroupDissolveRequest {
	return &GroupDissolveRequest{}
}

func (p *GroupDissolveRequest) GetUserId() int64 {
	return p.UserId
}

func (p *GroupDissolveRequest) GetGroupId() int64 {
	return p.GroupId
}

var GroupDissolveRequest_Message_DEFAULT string

func (p *GroupDissolveRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return GroupDissolveRequest_Message_DEFAULT
	}
	return *p.Message
}

func (p *GroupDissolveRequest) GetSubMsgType() int32 {
	return p.SubMsgType
}

func (p *GroupDissolveRequest) GetSDKID() int64 {
	return p.SDKID
}

func (p *GroupDissolveRequest) GetDeviceType() int8 {
	return p.DeviceType
}

func (p *GroupDissolveRequest) GetGroupName() string {
	return p.GroupName
}

func (p *GroupDissolveRequest) GetNoticeUserIds() map[int64]bool {
	return p.NoticeUserIds
}
func (p *GroupDissolveRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GroupDissolveRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupDissolveRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GroupDissolveRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupDissolveRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *GroupDissolveRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *GroupDissolveRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *GroupDissolveRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *GroupDissolveRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *GroupDissolveRequest) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int64]bool, size)
	p.NoticeUserIds = tSet
	for i := 0; i < size; i++ {
		var _elem76 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem76 = v
		}
		p.NoticeUserIds[_elem76] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *GroupDissolveRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupDissolveRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupDissolveRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *GroupDissolveRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *GroupDissolveRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
		}
	}
	return err
}

func (p *GroupDissolveRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subMsgType: ", p), err)
	}
	return err
}

func (p *GroupDissolveRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SDKID: ", p), err)
	}
	return err
}

func (p *GroupDissolveRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceType: ", p), err)
	}
	return err
}

func (p *GroupDissolveRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:groupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupName (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:groupName: ", p), err)
	}
	return err
}

func (p *GroupDissolveRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noticeUserIds", thrift.SET, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:noticeUserIds: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I64, len(p.NoticeUserIds)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.NoticeUserIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:noticeUserIds: ", p), err)
	}
	return err
}

func (p *GroupDissolveRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupDissolveRequest(%+v)", *p)
}

// 退出群
//
// Attributes:
//  - UserId
//  - GroupId
//  - Message
//  - SubMsgType
//  - SDKID
//  - DeviceType
type GroupMemberExitRequest struct {
	UserId     int64   `thrift:"userId,1" json:"userId"`
	GroupId    int64   `thrift:"groupId,2" json:"groupId"`
	Message    *string `thrift:"message,3" json:"message,omitempty"`
	SubMsgType int32   `thrift:"subMsgType,4" json:"subMsgType"`
	SDKID      int64   `thrift:"SDKID,5" json:"SDKID"`
	DeviceType int8    `thrift:"deviceType,6" json:"deviceType"`
}

func NewGroupMemberExitRequest() *GroupMemberExitRequest {
	return &GroupMemberExitRequest{}
}

func (p *GroupMemberExitRequest) GetUserId() int64 {
	return p.UserId
}

func (p *GroupMemberExitRequest) GetGroupId() int64 {
	return p.GroupId
}

var GroupMemberExitRequest_Message_DEFAULT string

func (p *GroupMemberExitRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return GroupMemberExitRequest_Message_DEFAULT
	}
	return *p.Message
}

func (p *GroupMemberExitRequest) GetSubMsgType() int32 {
	return p.SubMsgType
}

func (p *GroupMemberExitRequest) GetSDKID() int64 {
	return p.SDKID
}

func (p *GroupMemberExitRequest) GetDeviceType() int8 {
	return p.DeviceType
}
func (p *GroupMemberExitRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GroupMemberExitRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupMemberExitRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GroupMemberExitRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupMemberExitRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *GroupMemberExitRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *GroupMemberExitRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *GroupMemberExitRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *GroupMemberExitRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupMemberExitRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupMemberExitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *GroupMemberExitRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *GroupMemberExitRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberExitRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subMsgType: ", p), err)
	}
	return err
}

func (p *GroupMemberExitRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SDKID: ", p), err)
	}
	return err
}

func (p *GroupMemberExitRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceType: ", p), err)
	}
	return err
}

func (p *GroupMemberExitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupMemberExitRequest(%+v)", *p)
}

// 踢出群
//
// Attributes:
//  - UserId
//  - GroupId
//  - KickoutUserIds
//  - Message
//  - SubMsgType
//  - SDKID
//  - DeviceType
type GroupMemberKickoutRequest struct {
	UserId         int64          `thrift:"userId,1" json:"userId"`
	GroupId        int64          `thrift:"groupId,2" json:"groupId"`
	KickoutUserIds map[int64]bool `thrift:"kickoutUserIds,3" json:"kickoutUserIds"`
	Message        *string        `thrift:"message,4" json:"message,omitempty"`
	SubMsgType     int32          `thrift:"subMsgType,5" json:"subMsgType"`
	SDKID          int64          `thrift:"SDKID,6" json:"SDKID"`
	DeviceType     int8           `thrift:"deviceType,7" json:"deviceType"`
}

func NewGroupMemberKickoutRequest() *GroupMemberKickoutRequest {
	return &GroupMemberKickoutRequest{}
}

func (p *GroupMemberKickoutRequest) GetUserId() int64 {
	return p.UserId
}

func (p *GroupMemberKickoutRequest) GetGroupId() int64 {
	return p.GroupId
}

func (p *GroupMemberKickoutRequest) GetKickoutUserIds() map[int64]bool {
	return p.KickoutUserIds
}

var GroupMemberKickoutRequest_Message_DEFAULT string

func (p *GroupMemberKickoutRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return GroupMemberKickoutRequest_Message_DEFAULT
	}
	return *p.Message
}

func (p *GroupMemberKickoutRequest) GetSubMsgType() int32 {
	return p.SubMsgType
}

func (p *GroupMemberKickoutRequest) GetSDKID() int64 {
	return p.SDKID
}

func (p *GroupMemberKickoutRequest) GetDeviceType() int8 {
	return p.DeviceType
}
func (p *GroupMemberKickoutRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GroupMemberKickoutRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupMemberKickoutRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GroupMemberKickoutRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupMemberKickoutRequest) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[int64]bool, size)
	p.KickoutUserIds = tSet
	for i := 0; i < size; i++ {
		var _elem77 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem77 = v
		}
		p.KickoutUserIds[_elem77] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *GroupMemberKickoutRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *GroupMemberKickoutRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SubMsgType = v
	}
	return nil
}

func (p *GroupMemberKickoutRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *GroupMemberKickoutRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *GroupMemberKickoutRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupMemberKickoutRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupMemberKickoutRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *GroupMemberKickoutRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err)
	}
	return err
}

func (p *GroupMemberKickoutRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kickoutUserIds", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:kickoutUserIds: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I64, len(p.KickoutUserIds)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.KickoutUserIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:kickoutUserIds: ", p), err)
	}
	return err
}

func (p *GroupMemberKickoutRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
		}
	}
	return err
}

func (p *GroupMemberKickoutRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMsgType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:subMsgType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMsgType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMsgType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:subMsgType: ", p), err)
	}
	return err
}

func (p *GroupMemberKickoutRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:SDKID: ", p), err)
	}
	return err
}

func (p *GroupMemberKickoutRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceType: ", p), err)
	}
	return err
}

func (p *GroupMemberKickoutRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupMemberKickoutRequest(%+v)", *p)
}

//  群返回
// 0:操作成功
// 301:没有权限创建群
// 302:有权限创建群
// 303:该用户创建该级别的群已经超过数量限制。
// 304:没有权限修改群信息
// 305:没有权限删除群信息
// 306:该群存在
// 307:该群不存在
// 308:没有权限激活该群
// 309:该用户不是该群成员
// 310:该群级别，群成员已满
// 311:该群级别，群成员未满
// 312:不是超级管理员不能解散该群
// 313:不是管理员不能删除群成员
// 314:不能删除群超级管理员
// 315:超级管理员不能主动退出群，必须先指定超级管理员
// 316:非管理员不能，添加群成员。
// 317:该用户不是该群成员，不能发出邀请
// 318:该群不允许普通人员，邀请。
// 319:该群已经满员，不能再发邀请
// 320:不存在该邀请信息！
// 321:存在该邀请信息，但已经处理！
// 322:邀请人已经不在该群里面，邀请信息处理失效！
// 323:该群不允许任何人添加！
// 324:提示验证请求信息不存在编码！
// 325:验证请求已经处理！
// 326:邀请请求处理成功，请需要发送验证请求！
// 327:处理人已经不在该群里面！
// 328:不是群管理员，不能处理验证请求！
// 329:不是管理员，不能修改其他人群名片!
// 330:不是群成员，不能查看其他人群名片!
// 331:不是群超级管理员，不能转让该群!
// 332:不是群成员，不能转让该群给他!
// 333:您已经在群里面，不能再发验证请求!
// 334:非临时群不允许普通用户邀请。
// 335:不是群超级管理员，不能设置群管理员。
//
// Attributes:
//  - Code
//  - Message
//  - GroupPageTimestampMap
//  - JoinMemberIds
//  - UserID
//  - InviteVerifyUserList
//  - InviteNotAllowUserList
//  - InviteAddUserList
//  - InviteAdminVerifyUserList
type GroupResult_ struct {
	Code                      int32           `thrift:"code,1" json:"code"`
	Message                   *string         `thrift:"message,2" json:"message,omitempty"`
	GroupPageTimestampMap     map[int16]int64 `thrift:"groupPageTimestampMap,3" json:"groupPageTimestampMap,omitempty"`
	JoinMemberIds             []int64         `thrift:"joinMemberIds,4" json:"joinMemberIds,omitempty"`
	UserID                    *int64          `thrift:"userID,5" json:"userID,omitempty"`
	InviteVerifyUserList      []*TinyUserBean `thrift:"inviteVerifyUserList,6" json:"inviteVerifyUserList,omitempty"`
	InviteNotAllowUserList    []*TinyUserBean `thrift:"inviteNotAllowUserList,7" json:"inviteNotAllowUserList,omitempty"`
	InviteAddUserList         []*TinyUserBean `thrift:"inviteAddUserList,8" json:"inviteAddUserList,omitempty"`
	InviteAdminVerifyUserList []*TinyUserBean `thrift:"inviteAdminVerifyUserList,9" json:"inviteAdminVerifyUserList,omitempty"`
}

func NewGroupResult_() *GroupResult_ {
	return &GroupResult_{}
}

func (p *GroupResult_) GetCode() int32 {
	return p.Code
}

var GroupResult__Message_DEFAULT string

func (p *GroupResult_) GetMessage() string {
	if !p.IsSetMessage() {
		return GroupResult__Message_DEFAULT
	}
	return *p.Message
}

var GroupResult__GroupPageTimestampMap_DEFAULT map[int16]int64

func (p *GroupResult_) GetGroupPageTimestampMap() map[int16]int64 {
	return p.GroupPageTimestampMap
}

var GroupResult__JoinMemberIds_DEFAULT []int64

func (p *GroupResult_) GetJoinMemberIds() []int64 {
	return p.JoinMemberIds
}

var GroupResult__UserID_DEFAULT int64

func (p *GroupResult_) GetUserID() int64 {
	if !p.IsSetUserID() {
		return GroupResult__UserID_DEFAULT
	}
	return *p.UserID
}

var GroupResult__InviteVerifyUserList_DEFAULT []*TinyUserBean

func (p *GroupResult_) GetInviteVerifyUserList() []*TinyUserBean {
	return p.InviteVerifyUserList
}

var GroupResult__InviteNotAllowUserList_DEFAULT []*TinyUserBean

func (p *GroupResult_) GetInviteNotAllowUserList() []*TinyUserBean {
	return p.InviteNotAllowUserList
}

var GroupResult__InviteAddUserList_DEFAULT []*TinyUserBean

func (p *GroupResult_) GetInviteAddUserList() []*TinyUserBean {
	return p.InviteAddUserList
}

var GroupResult__InviteAdminVerifyUserList_DEFAULT []*TinyUserBean

func (p *GroupResult_) GetInviteAdminVerifyUserList() []*TinyUserBean {
	return p.InviteAdminVerifyUserList
}
func (p *GroupResult_) IsSetMessage() bool {
	return p.Message != nil
}

func (p *GroupResult_) IsSetGroupPageTimestampMap() bool {
	return p.GroupPageTimestampMap != nil
}

func (p *GroupResult_) IsSetJoinMemberIds() bool {
	return p.JoinMemberIds != nil
}

func (p *GroupResult_) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *GroupResult_) IsSetInviteVerifyUserList() bool {
	return p.InviteVerifyUserList != nil
}

func (p *GroupResult_) IsSetInviteNotAllowUserList() bool {
	return p.InviteNotAllowUserList != nil
}

func (p *GroupResult_) IsSetInviteAddUserList() bool {
	return p.InviteAddUserList != nil
}

func (p *GroupResult_) IsSetInviteAdminVerifyUserList() bool {
	return p.InviteAdminVerifyUserList != nil
}

func (p *GroupResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *GroupResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *GroupResult_) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int16]int64, size)
	p.GroupPageTimestampMap = tMap
	for i := 0; i < size; i++ {
		var _key78 int16
		if v, err := iprot.ReadI16(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key78 = v
		}
		var _val79 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val79 = v
		}
		p.GroupPageTimestampMap[_key78] = _val79
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GroupResult_) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.JoinMemberIds = tSlice
	for i := 0; i < size; i++ {
		var _elem80 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem80 = v
		}
		p.JoinMemberIds = append(p.JoinMemberIds, _elem80)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UserID = &v
	}
	return nil
}

func (p *GroupResult_) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TinyUserBean, 0, size)
	p.InviteVerifyUserList = tSlice
	for i := 0; i < size; i++ {
		_elem81 := &TinyUserBean{}
		if err := _elem81.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem81), err)
		}
		p.InviteVerifyUserList = append(p.InviteVerifyUserList, _elem81)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupResult_) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TinyUserBean, 0, size)
	p.InviteNotAllowUserList = tSlice
	for i := 0; i < size; i++ {
		_elem82 := &TinyUserBean{}
		if err := _elem82.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem82), err)
		}
		p.InviteNotAllowUserList = append(p.InviteNotAllowUserList, _elem82)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupResult_) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TinyUserBean, 0, size)
	p.InviteAddUserList = tSlice
	for i := 0; i < size; i++ {
		_elem83 := &TinyUserBean{}
		if err := _elem83.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem83), err)
		}
		p.InviteAddUserList = append(p.InviteAddUserList, _elem83)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupResult_) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TinyUserBean, 0, size)
	p.InviteAdminVerifyUserList = tSlice
	for i := 0; i < size; i++ {
		_elem84 := &TinyUserBean{}
		if err := _elem84.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem84), err)
		}
		p.InviteAdminVerifyUserList = append(p.InviteAdminVerifyUserList, _elem84)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GroupResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *GroupResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *GroupResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupPageTimestampMap() {
		if err := oprot.WriteFieldBegin("groupPageTimestampMap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupPageTimestampMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I16, thrift.I64, len(p.GroupPageTimestampMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.GroupPageTimestampMap {
			if err := oprot.WriteI16(int16(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupPageTimestampMap: ", p), err)
		}
	}
	return err
}

func (p *GroupResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetJoinMemberIds() {
		if err := oprot.WriteFieldBegin("joinMemberIds", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:joinMemberIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.JoinMemberIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.JoinMemberIds {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:joinMemberIds: ", p), err)
		}
	}
	return err
}

func (p *GroupResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err := oprot.WriteFieldBegin("userID", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UserID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userID (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userID: ", p), err)
		}
	}
	return err
}

func (p *GroupResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteVerifyUserList() {
		if err := oprot.WriteFieldBegin("inviteVerifyUserList", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:inviteVerifyUserList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InviteVerifyUserList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InviteVerifyUserList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:inviteVerifyUserList: ", p), err)
		}
	}
	return err
}

func (p *GroupResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteNotAllowUserList() {
		if err := oprot.WriteFieldBegin("inviteNotAllowUserList", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:inviteNotAllowUserList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InviteNotAllowUserList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InviteNotAllowUserList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:inviteNotAllowUserList: ", p), err)
		}
	}
	return err
}

func (p *GroupResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteAddUserList() {
		if err := oprot.WriteFieldBegin("inviteAddUserList", thrift.LIST, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:inviteAddUserList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InviteAddUserList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InviteAddUserList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:inviteAddUserList: ", p), err)
		}
	}
	return err
}

func (p *GroupResult_) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetInviteAdminVerifyUserList() {
		if err := oprot.WriteFieldBegin("inviteAdminVerifyUserList", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:inviteAdminVerifyUserList: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InviteAdminVerifyUserList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.InviteAdminVerifyUserList {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:inviteAdminVerifyUserList: ", p), err)
		}
	}
	return err
}

func (p *GroupResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupResult_(%+v)", *p)
}

// Attributes:
//  - Word
//  - Oper
//  - ID
//  - Sid
type Words struct {
	Word *string `thrift:"word,1" json:"word,omitempty"`
	Oper *int8   `thrift:"oper,2" json:"oper,omitempty"`
	ID   *int64  `thrift:"id,3" json:"id,omitempty"`
	Sid  *int64  `thrift:"sid,4" json:"sid,omitempty"`
}

func NewWords() *Words {
	return &Words{}
}

var Words_Word_DEFAULT string

func (p *Words) GetWord() string {
	if !p.IsSetWord() {
		return Words_Word_DEFAULT
	}
	return *p.Word
}

var Words_Oper_DEFAULT int8

func (p *Words) GetOper() int8 {
	if !p.IsSetOper() {
		return Words_Oper_DEFAULT
	}
	return *p.Oper
}

var Words_ID_DEFAULT int64

func (p *Words) GetID() int64 {
	if !p.IsSetID() {
		return Words_ID_DEFAULT
	}
	return *p.ID
}

var Words_Sid_DEFAULT int64

func (p *Words) GetSid() int64 {
	if !p.IsSetSid() {
		return Words_Sid_DEFAULT
	}
	return *p.Sid
}
func (p *Words) IsSetWord() bool {
	return p.Word != nil
}

func (p *Words) IsSetOper() bool {
	return p.Oper != nil
}

func (p *Words) IsSetID() bool {
	return p.ID != nil
}

func (p *Words) IsSetSid() bool {
	return p.Sid != nil
}

func (p *Words) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Words) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Word = &v
	}
	return nil
}

func (p *Words) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Oper = &temp
	}
	return nil
}

func (p *Words) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *Words) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Sid = &v
	}
	return nil
}

func (p *Words) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Words"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Words) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWord() {
		if err := oprot.WriteFieldBegin("word", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:word: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Word)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.word (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:word: ", p), err)
		}
	}
	return err
}

func (p *Words) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOper() {
		if err := oprot.WriteFieldBegin("oper", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oper: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Oper)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.oper (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oper: ", p), err)
		}
	}
	return err
}

func (p *Words) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err)
		}
	}
	return err
}

func (p *Words) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSid() {
		if err := oprot.WriteFieldBegin("sid", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sid: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Sid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sid (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sid: ", p), err)
		}
	}
	return err
}

func (p *Words) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Words(%+v)", *p)
}

// Attributes:
//  - ResultCode
//  - AuthCode
//  - AppName
//  - AppIcon
//  - Scope
//  - SilentAuth
type AuthCodeResult_ struct {
	ResultCode int32  `thrift:"resultCode,1" json:"resultCode"`
	AuthCode   string `thrift:"authCode,2" json:"authCode"`
	AppName    string `thrift:"appName,3" json:"appName"`
	AppIcon    string `thrift:"appIcon,4" json:"appIcon"`
	Scope      int32  `thrift:"scope,5" json:"scope"`
	SilentAuth *int8  `thrift:"silentAuth,6" json:"silentAuth,omitempty"`
}

func NewAuthCodeResult_() *AuthCodeResult_ {
	return &AuthCodeResult_{}
}

func (p *AuthCodeResult_) GetResultCode() int32 {
	return p.ResultCode
}

func (p *AuthCodeResult_) GetAuthCode() string {
	return p.AuthCode
}

func (p *AuthCodeResult_) GetAppName() string {
	return p.AppName
}

func (p *AuthCodeResult_) GetAppIcon() string {
	return p.AppIcon
}

func (p *AuthCodeResult_) GetScope() int32 {
	return p.Scope
}

var AuthCodeResult__SilentAuth_DEFAULT int8

func (p *AuthCodeResult_) GetSilentAuth() int8 {
	if !p.IsSetSilentAuth() {
		return AuthCodeResult__SilentAuth_DEFAULT
	}
	return *p.SilentAuth
}
func (p *AuthCodeResult_) IsSetSilentAuth() bool {
	return p.SilentAuth != nil
}

func (p *AuthCodeResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthCodeResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ResultCode = v
	}
	return nil
}

func (p *AuthCodeResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AuthCode = v
	}
	return nil
}

func (p *AuthCodeResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *AuthCodeResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppIcon = v
	}
	return nil
}

func (p *AuthCodeResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Scope = v
	}
	return nil
}

func (p *AuthCodeResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.SilentAuth = &temp
	}
	return nil
}

func (p *AuthCodeResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthCodeResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthCodeResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResultCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resultCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultCode: ", p), err)
	}
	return err
}

func (p *AuthCodeResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authCode", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authCode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authCode: ", p), err)
	}
	return err
}

func (p *AuthCodeResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appName: ", p), err)
	}
	return err
}

func (p *AuthCodeResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appIcon", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appIcon: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppIcon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appIcon (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appIcon: ", p), err)
	}
	return err
}

func (p *AuthCodeResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scope", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:scope: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Scope)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scope (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:scope: ", p), err)
	}
	return err
}

func (p *AuthCodeResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSilentAuth() {
		if err := oprot.WriteFieldBegin("silentAuth", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:silentAuth: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.SilentAuth)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.silentAuth (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:silentAuth: ", p), err)
		}
	}
	return err
}

func (p *AuthCodeResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthCodeResult_(%+v)", *p)
}

// Attributes:
//  - AppID
//  - UserID
//  - ClientType: 客户端类型：2（android），3（ios）*
//  - PackAge
type AuthCodeParam struct {
	AppID      int64  `thrift:"appID,1" json:"appID"`
	UserID     int64  `thrift:"userID,2" json:"userID"`
	ClientType int8   `thrift:"clientType,3" json:"clientType"`
	PackAge    string `thrift:"packAge,4" json:"packAge"`
}

func NewAuthCodeParam() *AuthCodeParam {
	return &AuthCodeParam{}
}

func (p *AuthCodeParam) GetAppID() int64 {
	return p.AppID
}

func (p *AuthCodeParam) GetUserID() int64 {
	return p.UserID
}

func (p *AuthCodeParam) GetClientType() int8 {
	return p.ClientType
}

func (p *AuthCodeParam) GetPackAge() string {
	return p.PackAge
}
func (p *AuthCodeParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthCodeParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *AuthCodeParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *AuthCodeParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.ClientType = temp
	}
	return nil
}

func (p *AuthCodeParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PackAge = v
	}
	return nil
}

func (p *AuthCodeParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthCodeParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthCodeParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appID: ", p), err)
	}
	return err
}

func (p *AuthCodeParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
	}
	return err
}

func (p *AuthCodeParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientType", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.ClientType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clientType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientType: ", p), err)
	}
	return err
}

func (p *AuthCodeParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("packAge", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:packAge: ", p), err)
	}
	if err := oprot.WriteString(string(p.PackAge)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.packAge (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:packAge: ", p), err)
	}
	return err
}

func (p *AuthCodeParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthCodeParam(%+v)", *p)
}

// Attributes:
//  - UserID
//  - ID
//  - Qrcode
//  - AccountType
type QrcodeValidateParam struct {
	UserID      int64  `thrift:"userID,1" json:"userID"`
	ID          int64  `thrift:"id,2" json:"id"`
	Qrcode      string `thrift:"qrcode,3" json:"qrcode"`
	AccountType int8   `thrift:"accountType,4" json:"accountType"`
}

func NewQrcodeValidateParam() *QrcodeValidateParam {
	return &QrcodeValidateParam{}
}

func (p *QrcodeValidateParam) GetUserID() int64 {
	return p.UserID
}

func (p *QrcodeValidateParam) GetID() int64 {
	return p.ID
}

func (p *QrcodeValidateParam) GetQrcode() string {
	return p.Qrcode
}

func (p *QrcodeValidateParam) GetAccountType() int8 {
	return p.AccountType
}
func (p *QrcodeValidateParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QrcodeValidateParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *QrcodeValidateParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *QrcodeValidateParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Qrcode = v
	}
	return nil
}

func (p *QrcodeValidateParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.AccountType = temp
	}
	return nil
}

func (p *QrcodeValidateParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QrcodeValidateParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QrcodeValidateParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *QrcodeValidateParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err)
	}
	return err
}

func (p *QrcodeValidateParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qrcode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:qrcode: ", p), err)
	}
	if err := oprot.WriteString(string(p.Qrcode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.qrcode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:qrcode: ", p), err)
	}
	return err
}

func (p *QrcodeValidateParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accountType", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:accountType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.AccountType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accountType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:accountType: ", p), err)
	}
	return err
}

func (p *QrcodeValidateParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrcodeValidateParam(%+v)", *p)
}

// resultCode:
// 100008000 ->服务异常
// 100008001 ->公众号不合法
// 100008003 ->二维码失效
// 0         ->成功
//
//
// Attributes:
//  - ResultCode
//  - AppName
//  - AppIcon
//  - Scope
type QrcodeValidateResult_ struct {
	ResultCode int32  `thrift:"resultCode,1" json:"resultCode"`
	AppName    string `thrift:"appName,2" json:"appName"`
	AppIcon    string `thrift:"appIcon,3" json:"appIcon"`
	Scope      int32  `thrift:"scope,4" json:"scope"`
}

func NewQrcodeValidateResult_() *QrcodeValidateResult_ {
	return &QrcodeValidateResult_{}
}

func (p *QrcodeValidateResult_) GetResultCode() int32 {
	return p.ResultCode
}

func (p *QrcodeValidateResult_) GetAppName() string {
	return p.AppName
}

func (p *QrcodeValidateResult_) GetAppIcon() string {
	return p.AppIcon
}

func (p *QrcodeValidateResult_) GetScope() int32 {
	return p.Scope
}
func (p *QrcodeValidateResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QrcodeValidateResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ResultCode = v
	}
	return nil
}

func (p *QrcodeValidateResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *QrcodeValidateResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppIcon = v
	}
	return nil
}

func (p *QrcodeValidateResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Scope = v
	}
	return nil
}

func (p *QrcodeValidateResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QrcodeValidateResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QrcodeValidateResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResultCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resultCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultCode: ", p), err)
	}
	return err
}

func (p *QrcodeValidateResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appName: ", p), err)
	}
	return err
}

func (p *QrcodeValidateResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appIcon", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appIcon: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppIcon)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appIcon (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appIcon: ", p), err)
	}
	return err
}

func (p *QrcodeValidateResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scope", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:scope: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Scope)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scope (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:scope: ", p), err)
	}
	return err
}

func (p *QrcodeValidateResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrcodeValidateResult_(%+v)", *p)
}

// SDK白名用户结构体
//
// Attributes:
//  - SDKID
//  - UserID
//  - CommonID
type SdkWhiteUser struct {
	SDKID    int64  `thrift:"SDKID,1" json:"SDKID"`
	UserID   int64  `thrift:"userID,2" json:"userID"`
	CommonID string `thrift:"commonID,3" json:"commonID"`
}

func NewSdkWhiteUser() *SdkWhiteUser {
	return &SdkWhiteUser{}
}

func (p *SdkWhiteUser) GetSDKID() int64 {
	return p.SDKID
}

func (p *SdkWhiteUser) GetUserID() int64 {
	return p.UserID
}

func (p *SdkWhiteUser) GetCommonID() string {
	return p.CommonID
}
func (p *SdkWhiteUser) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SdkWhiteUser) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *SdkWhiteUser) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *SdkWhiteUser) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CommonID = v
	}
	return nil
}

func (p *SdkWhiteUser) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SdkWhiteUser"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SdkWhiteUser) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:SDKID: ", p), err)
	}
	return err
}

func (p *SdkWhiteUser) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userID: ", p), err)
	}
	return err
}

func (p *SdkWhiteUser) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commonID", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:commonID: ", p), err)
	}
	if err := oprot.WriteString(string(p.CommonID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commonID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:commonID: ", p), err)
	}
	return err
}

func (p *SdkWhiteUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SdkWhiteUser(%+v)", *p)
}

// 二维码扫描结果集
// 100011002 扫码成功
// 100011003 登录成功
// 100011004 超时
// 100011005 未知错误
// 100011006 缺少参数
// 100011007 用户ID不一致
// 100011008 二维码被占用
//
// Attributes:
//  - Code
//  - Msg
type QrCodeResultBean struct {
	Code int64  `thrift:"code,1" json:"code"`
	Msg  string `thrift:"msg,2" json:"msg"`
}

func NewQrCodeResultBean() *QrCodeResultBean {
	return &QrCodeResultBean{}
}

func (p *QrCodeResultBean) GetCode() int64 {
	return p.Code
}

func (p *QrCodeResultBean) GetMsg() string {
	return p.Msg
}
func (p *QrCodeResultBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QrCodeResultBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *QrCodeResultBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *QrCodeResultBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QrCodeResultBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QrCodeResultBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *QrCodeResultBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *QrCodeResultBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QrCodeResultBean(%+v)", *p)
}

// Attributes:
//  - UserId
//  - DeviceType
type SignalProtocolAddress struct {
	UserId     int64 `thrift:"userId,1" json:"userId"`
	DeviceType int32 `thrift:"deviceType,2" json:"deviceType"`
}

func NewSignalProtocolAddress() *SignalProtocolAddress {
	return &SignalProtocolAddress{}
}

func (p *SignalProtocolAddress) GetUserId() int64 {
	return p.UserId
}

func (p *SignalProtocolAddress) GetDeviceType() int32 {
	return p.DeviceType
}
func (p *SignalProtocolAddress) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SignalProtocolAddress) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *SignalProtocolAddress) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DeviceType = v
	}
	return nil
}

func (p *SignalProtocolAddress) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SignalProtocolAddress"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SignalProtocolAddress) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *SignalProtocolAddress) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceType: ", p), err)
	}
	return err
}

func (p *SignalProtocolAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignalProtocolAddress(%+v)", *p)
}

// 身份公钥
//
// Attributes:
//  - DevAddress
//  - IdentityPubPreKey
//  - IdentityPubPreKeyLen
//  - IdentityKeyID
//  - IdentityPubPreKeySwitch
type IdentityKey struct {
	DevAddress              *SignalProtocolAddress `thrift:"devAddress,1" json:"devAddress"`
	IdentityPubPreKey       string                 `thrift:"identityPubPreKey,2" json:"identityPubPreKey"`
	IdentityPubPreKeyLen    int32                  `thrift:"identityPubPreKeyLen,3" json:"identityPubPreKeyLen"`
	IdentityKeyID           int64                  `thrift:"identityKeyID,4" json:"identityKeyID"`
	IdentityPubPreKeySwitch string                 `thrift:"identityPubPreKeySwitch,5" json:"identityPubPreKeySwitch"`
}

func NewIdentityKey() *IdentityKey {
	return &IdentityKey{}
}

var IdentityKey_DevAddress_DEFAULT *SignalProtocolAddress

func (p *IdentityKey) GetDevAddress() *SignalProtocolAddress {
	if !p.IsSetDevAddress() {
		return IdentityKey_DevAddress_DEFAULT
	}
	return p.DevAddress
}

func (p *IdentityKey) GetIdentityPubPreKey() string {
	return p.IdentityPubPreKey
}

func (p *IdentityKey) GetIdentityPubPreKeyLen() int32 {
	return p.IdentityPubPreKeyLen
}

func (p *IdentityKey) GetIdentityKeyID() int64 {
	return p.IdentityKeyID
}

func (p *IdentityKey) GetIdentityPubPreKeySwitch() string {
	return p.IdentityPubPreKeySwitch
}
func (p *IdentityKey) IsSetDevAddress() bool {
	return p.DevAddress != nil
}

func (p *IdentityKey) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdentityKey) readField1(iprot thrift.TProtocol) error {
	p.DevAddress = &SignalProtocolAddress{}
	if err := p.DevAddress.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DevAddress), err)
	}
	return nil
}

func (p *IdentityKey) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IdentityPubPreKey = v
	}
	return nil
}

func (p *IdentityKey) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IdentityPubPreKeyLen = v
	}
	return nil
}

func (p *IdentityKey) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IdentityKeyID = v
	}
	return nil
}

func (p *IdentityKey) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IdentityPubPreKeySwitch = v
	}
	return nil
}

func (p *IdentityKey) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentityKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdentityKey) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("devAddress", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:devAddress: ", p), err)
	}
	if err := p.DevAddress.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DevAddress), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:devAddress: ", p), err)
	}
	return err
}

func (p *IdentityKey) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityPubPreKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityPubPreKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdentityPubPreKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityPubPreKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityPubPreKey: ", p), err)
	}
	return err
}

func (p *IdentityKey) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityPubPreKeyLen", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identityPubPreKeyLen: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IdentityPubPreKeyLen)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityPubPreKeyLen (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identityPubPreKeyLen: ", p), err)
	}
	return err
}

func (p *IdentityKey) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityKeyID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:identityKeyID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.IdentityKeyID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityKeyID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:identityKeyID: ", p), err)
	}
	return err
}

func (p *IdentityKey) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityPubPreKeySwitch", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:identityPubPreKeySwitch: ", p), err)
	}
	if err := oprot.WriteString(string(p.IdentityPubPreKeySwitch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.identityPubPreKeySwitch (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:identityPubPreKeySwitch: ", p), err)
	}
	return err
}

func (p *IdentityKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentityKey(%+v)", *p)
}

// 获取身份公钥结果集
//
// Attributes:
//  - IdentityKey
//  - ServerPubPreKeySwitch
type IdentityKeyResult_ struct {
	IdentityKey           []*IdentityKey `thrift:"identityKey,1" json:"identityKey"`
	ServerPubPreKeySwitch string         `thrift:"serverPubPreKeySwitch,2" json:"serverPubPreKeySwitch"`
}

func NewIdentityKeyResult_() *IdentityKeyResult_ {
	return &IdentityKeyResult_{}
}

func (p *IdentityKeyResult_) GetIdentityKey() []*IdentityKey {
	return p.IdentityKey
}

func (p *IdentityKeyResult_) GetServerPubPreKeySwitch() string {
	return p.ServerPubPreKeySwitch
}
func (p *IdentityKeyResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdentityKeyResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IdentityKey, 0, size)
	p.IdentityKey = tSlice
	for i := 0; i < size; i++ {
		_elem85 := &IdentityKey{}
		if err := _elem85.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem85), err)
		}
		p.IdentityKey = append(p.IdentityKey, _elem85)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *IdentityKeyResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ServerPubPreKeySwitch = v
	}
	return nil
}

func (p *IdentityKeyResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentityKeyResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdentityKeyResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("identityKey", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:identityKey: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.IdentityKey)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.IdentityKey {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:identityKey: ", p), err)
	}
	return err
}

func (p *IdentityKeyResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverPubPreKeySwitch", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverPubPreKeySwitch: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServerPubPreKeySwitch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serverPubPreKeySwitch (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverPubPreKeySwitch: ", p), err)
	}
	return err
}

func (p *IdentityKeyResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentityKeyResult_(%+v)", *p)
}

// 端到端开关
//
//
// Attributes:
//  - UserId
//  - TargetId
//  - DeviceType
//  - SwitchVal
type EndToEndSwitch struct {
	UserId     int64 `thrift:"userId,1" json:"userId"`
	TargetId   int64 `thrift:"targetId,2" json:"targetId"`
	DeviceType int32 `thrift:"deviceType,3" json:"deviceType"`
	SwitchVal  int32 `thrift:"switchVal,4" json:"switchVal"`
}

func NewEndToEndSwitch() *EndToEndSwitch {
	return &EndToEndSwitch{}
}

func (p *EndToEndSwitch) GetUserId() int64 {
	return p.UserId
}

func (p *EndToEndSwitch) GetTargetId() int64 {
	return p.TargetId
}

func (p *EndToEndSwitch) GetDeviceType() int32 {
	return p.DeviceType
}

func (p *EndToEndSwitch) GetSwitchVal() int32 {
	return p.SwitchVal
}
func (p *EndToEndSwitch) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EndToEndSwitch) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *EndToEndSwitch) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TargetId = v
	}
	return nil
}

func (p *EndToEndSwitch) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DeviceType = v
	}
	return nil
}

func (p *EndToEndSwitch) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SwitchVal = v
	}
	return nil
}

func (p *EndToEndSwitch) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EndToEndSwitch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EndToEndSwitch) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *EndToEndSwitch) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targetId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TargetId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targetId: ", p), err)
	}
	return err
}

func (p *EndToEndSwitch) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceType: ", p), err)
	}
	return err
}

func (p *EndToEndSwitch) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("switchVal", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:switchVal: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SwitchVal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.switchVal (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:switchVal: ", p), err)
	}
	return err
}

func (p *EndToEndSwitch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EndToEndSwitch(%+v)", *p)
}

// 预签名公钥
//
// Attributes:
//  - DevAddress
//  - SignedpreKey
//  - SignedpreKeyLen
//  - Signature
//  - SignatureLen
//  - SignedpreKeyID
//  - SignedpreKeyTimestamp
type SignedPreKey struct {
	DevAddress            *SignalProtocolAddress `thrift:"devAddress,1" json:"devAddress"`
	SignedpreKey          string                 `thrift:"signedpreKey,2" json:"signedpreKey"`
	SignedpreKeyLen       int32                  `thrift:"signedpreKeyLen,3" json:"signedpreKeyLen"`
	Signature             string                 `thrift:"signature,4" json:"signature"`
	SignatureLen          int32                  `thrift:"signatureLen,5" json:"signatureLen"`
	SignedpreKeyID        int64                  `thrift:"signedpreKeyID,6" json:"signedpreKeyID"`
	SignedpreKeyTimestamp int64                  `thrift:"signedpreKeyTimestamp,7" json:"signedpreKeyTimestamp"`
}

func NewSignedPreKey() *SignedPreKey {
	return &SignedPreKey{}
}

var SignedPreKey_DevAddress_DEFAULT *SignalProtocolAddress

func (p *SignedPreKey) GetDevAddress() *SignalProtocolAddress {
	if !p.IsSetDevAddress() {
		return SignedPreKey_DevAddress_DEFAULT
	}
	return p.DevAddress
}

func (p *SignedPreKey) GetSignedpreKey() string {
	return p.SignedpreKey
}

func (p *SignedPreKey) GetSignedpreKeyLen() int32 {
	return p.SignedpreKeyLen
}

func (p *SignedPreKey) GetSignature() string {
	return p.Signature
}

func (p *SignedPreKey) GetSignatureLen() int32 {
	return p.SignatureLen
}

func (p *SignedPreKey) GetSignedpreKeyID() int64 {
	return p.SignedpreKeyID
}

func (p *SignedPreKey) GetSignedpreKeyTimestamp() int64 {
	return p.SignedpreKeyTimestamp
}
func (p *SignedPreKey) IsSetDevAddress() bool {
	return p.DevAddress != nil
}

func (p *SignedPreKey) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SignedPreKey) readField1(iprot thrift.TProtocol) error {
	p.DevAddress = &SignalProtocolAddress{}
	if err := p.DevAddress.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DevAddress), err)
	}
	return nil
}

func (p *SignedPreKey) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SignedpreKey = v
	}
	return nil
}

func (p *SignedPreKey) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SignedpreKeyLen = v
	}
	return nil
}

func (p *SignedPreKey) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Signature = v
	}
	return nil
}

func (p *SignedPreKey) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SignatureLen = v
	}
	return nil
}

func (p *SignedPreKey) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SignedpreKeyID = v
	}
	return nil
}

func (p *SignedPreKey) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SignedpreKeyTimestamp = v
	}
	return nil
}

func (p *SignedPreKey) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SignedPreKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SignedPreKey) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("devAddress", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:devAddress: ", p), err)
	}
	if err := p.DevAddress.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DevAddress), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:devAddress: ", p), err)
	}
	return err
}

func (p *SignedPreKey) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signedpreKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:signedpreKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.SignedpreKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.signedpreKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:signedpreKey: ", p), err)
	}
	return err
}

func (p *SignedPreKey) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signedpreKeyLen", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:signedpreKeyLen: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SignedpreKeyLen)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.signedpreKeyLen (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:signedpreKeyLen: ", p), err)
	}
	return err
}

func (p *SignedPreKey) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signature", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:signature: ", p), err)
	}
	if err := oprot.WriteString(string(p.Signature)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.signature (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:signature: ", p), err)
	}
	return err
}

func (p *SignedPreKey) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signatureLen", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:signatureLen: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SignatureLen)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.signatureLen (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:signatureLen: ", p), err)
	}
	return err
}

func (p *SignedPreKey) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signedpreKeyID", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:signedpreKeyID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SignedpreKeyID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.signedpreKeyID (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:signedpreKeyID: ", p), err)
	}
	return err
}

func (p *SignedPreKey) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signedpreKeyTimestamp", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:signedpreKeyTimestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SignedpreKeyTimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.signedpreKeyTimestamp (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:signedpreKeyTimestamp: ", p), err)
	}
	return err
}

func (p *SignedPreKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignedPreKey(%+v)", *p)
}

// 一次性秘钥
//
// Attributes:
//  - DevAddress
//  - PubPreKey
//  - PubPreKeyLen
//  - PreKeyIDS
type PreKey struct {
	DevAddress   *SignalProtocolAddress `thrift:"devAddress,1" json:"devAddress"`
	PubPreKey    string                 `thrift:"pubPreKey,2" json:"pubPreKey"`
	PubPreKeyLen int32                  `thrift:"pubPreKeyLen,3" json:"pubPreKeyLen"`
	PreKeyIDS    int64                  `thrift:"preKeyIDS,4" json:"preKeyIDS"`
}

func NewPreKey() *PreKey {
	return &PreKey{}
}

var PreKey_DevAddress_DEFAULT *SignalProtocolAddress

func (p *PreKey) GetDevAddress() *SignalProtocolAddress {
	if !p.IsSetDevAddress() {
		return PreKey_DevAddress_DEFAULT
	}
	return p.DevAddress
}

func (p *PreKey) GetPubPreKey() string {
	return p.PubPreKey
}

func (p *PreKey) GetPubPreKeyLen() int32 {
	return p.PubPreKeyLen
}

func (p *PreKey) GetPreKeyIDS() int64 {
	return p.PreKeyIDS
}
func (p *PreKey) IsSetDevAddress() bool {
	return p.DevAddress != nil
}

func (p *PreKey) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PreKey) readField1(iprot thrift.TProtocol) error {
	p.DevAddress = &SignalProtocolAddress{}
	if err := p.DevAddress.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DevAddress), err)
	}
	return nil
}

func (p *PreKey) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PubPreKey = v
	}
	return nil
}

func (p *PreKey) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PubPreKeyLen = v
	}
	return nil
}

func (p *PreKey) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PreKeyIDS = v
	}
	return nil
}

func (p *PreKey) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PreKey"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PreKey) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("devAddress", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:devAddress: ", p), err)
	}
	if err := p.DevAddress.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DevAddress), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:devAddress: ", p), err)
	}
	return err
}

func (p *PreKey) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pubPreKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pubPreKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.PubPreKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pubPreKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pubPreKey: ", p), err)
	}
	return err
}

func (p *PreKey) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pubPreKeyLen", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pubPreKeyLen: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PubPreKeyLen)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pubPreKeyLen (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pubPreKeyLen: ", p), err)
	}
	return err
}

func (p *PreKey) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preKeyIDS", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:preKeyIDS: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PreKeyIDS)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.preKeyIDS (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:preKeyIDS: ", p), err)
	}
	return err
}

func (p *PreKey) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PreKey(%+v)", *p)
}

// 秘钥（包含身份秘钥、预签名秘钥、一次性秘钥）
//
// Attributes:
//  - IdKey
//  - SignedKey
//  - PreKeyList
type SignalProtocolKeys struct {
	IdKey      *IdentityKey  `thrift:"idKey,1" json:"idKey"`
	SignedKey  *SignedPreKey `thrift:"signedKey,2" json:"signedKey"`
	PreKeyList []*PreKey     `thrift:"preKeyList,3" json:"preKeyList"`
}

func NewSignalProtocolKeys() *SignalProtocolKeys {
	return &SignalProtocolKeys{}
}

var SignalProtocolKeys_IdKey_DEFAULT *IdentityKey

func (p *SignalProtocolKeys) GetIdKey() *IdentityKey {
	if !p.IsSetIdKey() {
		return SignalProtocolKeys_IdKey_DEFAULT
	}
	return p.IdKey
}

var SignalProtocolKeys_SignedKey_DEFAULT *SignedPreKey

func (p *SignalProtocolKeys) GetSignedKey() *SignedPreKey {
	if !p.IsSetSignedKey() {
		return SignalProtocolKeys_SignedKey_DEFAULT
	}
	return p.SignedKey
}

func (p *SignalProtocolKeys) GetPreKeyList() []*PreKey {
	return p.PreKeyList
}
func (p *SignalProtocolKeys) IsSetIdKey() bool {
	return p.IdKey != nil
}

func (p *SignalProtocolKeys) IsSetSignedKey() bool {
	return p.SignedKey != nil
}

func (p *SignalProtocolKeys) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SignalProtocolKeys) readField1(iprot thrift.TProtocol) error {
	p.IdKey = &IdentityKey{}
	if err := p.IdKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdKey), err)
	}
	return nil
}

func (p *SignalProtocolKeys) readField2(iprot thrift.TProtocol) error {
	p.SignedKey = &SignedPreKey{}
	if err := p.SignedKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SignedKey), err)
	}
	return nil
}

func (p *SignalProtocolKeys) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PreKey, 0, size)
	p.PreKeyList = tSlice
	for i := 0; i < size; i++ {
		_elem86 := &PreKey{}
		if err := _elem86.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem86), err)
		}
		p.PreKeyList = append(p.PreKeyList, _elem86)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SignalProtocolKeys) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SignalProtocolKeys"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SignalProtocolKeys) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idKey", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:idKey: ", p), err)
	}
	if err := p.IdKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:idKey: ", p), err)
	}
	return err
}

func (p *SignalProtocolKeys) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signedKey", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:signedKey: ", p), err)
	}
	if err := p.SignedKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SignedKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:signedKey: ", p), err)
	}
	return err
}

func (p *SignalProtocolKeys) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("preKeyList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:preKeyList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PreKeyList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PreKeyList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:preKeyList: ", p), err)
	}
	return err
}

func (p *SignalProtocolKeys) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignalProtocolKeys(%+v)", *p)
}

// 一套秘钥
//
// Attributes:
//  - DevAddress
//  - Idkey
//  - SignedKey
//  - PreKey
type SignalBundle struct {
	DevAddress *SignalProtocolAddress `thrift:"devAddress,1" json:"devAddress"`
	Idkey      *IdentityKey           `thrift:"idkey,2" json:"idkey"`
	SignedKey  *SignedPreKey          `thrift:"signedKey,3" json:"signedKey"`
	PreKey     *PreKey                `thrift:"preKey,4" json:"preKey,omitempty"`
}

func NewSignalBundle() *SignalBundle {
	return &SignalBundle{}
}

var SignalBundle_DevAddress_DEFAULT *SignalProtocolAddress

func (p *SignalBundle) GetDevAddress() *SignalProtocolAddress {
	if !p.IsSetDevAddress() {
		return SignalBundle_DevAddress_DEFAULT
	}
	return p.DevAddress
}

var SignalBundle_Idkey_DEFAULT *IdentityKey

func (p *SignalBundle) GetIdkey() *IdentityKey {
	if !p.IsSetIdkey() {
		return SignalBundle_Idkey_DEFAULT
	}
	return p.Idkey
}

var SignalBundle_SignedKey_DEFAULT *SignedPreKey

func (p *SignalBundle) GetSignedKey() *SignedPreKey {
	if !p.IsSetSignedKey() {
		return SignalBundle_SignedKey_DEFAULT
	}
	return p.SignedKey
}

var SignalBundle_PreKey_DEFAULT *PreKey

func (p *SignalBundle) GetPreKey() *PreKey {
	if !p.IsSetPreKey() {
		return SignalBundle_PreKey_DEFAULT
	}
	return p.PreKey
}
func (p *SignalBundle) IsSetDevAddress() bool {
	return p.DevAddress != nil
}

func (p *SignalBundle) IsSetIdkey() bool {
	return p.Idkey != nil
}

func (p *SignalBundle) IsSetSignedKey() bool {
	return p.SignedKey != nil
}

func (p *SignalBundle) IsSetPreKey() bool {
	return p.PreKey != nil
}

func (p *SignalBundle) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SignalBundle) readField1(iprot thrift.TProtocol) error {
	p.DevAddress = &SignalProtocolAddress{}
	if err := p.DevAddress.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DevAddress), err)
	}
	return nil
}

func (p *SignalBundle) readField2(iprot thrift.TProtocol) error {
	p.Idkey = &IdentityKey{}
	if err := p.Idkey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Idkey), err)
	}
	return nil
}

func (p *SignalBundle) readField3(iprot thrift.TProtocol) error {
	p.SignedKey = &SignedPreKey{}
	if err := p.SignedKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SignedKey), err)
	}
	return nil
}

func (p *SignalBundle) readField4(iprot thrift.TProtocol) error {
	p.PreKey = &PreKey{}
	if err := p.PreKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PreKey), err)
	}
	return nil
}

func (p *SignalBundle) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SignalBundle"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SignalBundle) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("devAddress", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:devAddress: ", p), err)
	}
	if err := p.DevAddress.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DevAddress), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:devAddress: ", p), err)
	}
	return err
}

func (p *SignalBundle) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idkey", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idkey: ", p), err)
	}
	if err := p.Idkey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Idkey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idkey: ", p), err)
	}
	return err
}

func (p *SignalBundle) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("signedKey", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:signedKey: ", p), err)
	}
	if err := p.SignedKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SignedKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:signedKey: ", p), err)
	}
	return err
}

func (p *SignalBundle) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreKey() {
		if err := oprot.WriteFieldBegin("preKey", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:preKey: ", p), err)
		}
		if err := p.PreKey.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PreKey), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:preKey: ", p), err)
		}
	}
	return err
}

func (p *SignalBundle) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SignalBundle(%+v)", *p)
}

// 群公告信息
//
// Attributes:
//  - AnnouncementID
//  - GroupID
//  - CreateUserID
//  - CreateDt
//  - Content
type GroupAnnouncement struct {
	AnnouncementID int64  `thrift:"announcementID,1" json:"announcementID"`
	GroupID        int64  `thrift:"groupID,2" json:"groupID"`
	CreateUserID   int64  `thrift:"createUserID,3" json:"createUserID"`
	CreateDt       int64  `thrift:"createDt,4" json:"createDt"`
	Content        string `thrift:"content,5" json:"content"`
}

func NewGroupAnnouncement() *GroupAnnouncement {
	return &GroupAnnouncement{}
}

func (p *GroupAnnouncement) GetAnnouncementID() int64 {
	return p.AnnouncementID
}

func (p *GroupAnnouncement) GetGroupID() int64 {
	return p.GroupID
}

func (p *GroupAnnouncement) GetCreateUserID() int64 {
	return p.CreateUserID
}

func (p *GroupAnnouncement) GetCreateDt() int64 {
	return p.CreateDt
}

func (p *GroupAnnouncement) GetContent() string {
	return p.Content
}
func (p *GroupAnnouncement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupAnnouncement) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AnnouncementID = v
	}
	return nil
}

func (p *GroupAnnouncement) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupID = v
	}
	return nil
}

func (p *GroupAnnouncement) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CreateUserID = v
	}
	return nil
}

func (p *GroupAnnouncement) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CreateDt = v
	}
	return nil
}

func (p *GroupAnnouncement) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *GroupAnnouncement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupAnnouncement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupAnnouncement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("announcementID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:announcementID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AnnouncementID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.announcementID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:announcementID: ", p), err)
	}
	return err
}

func (p *GroupAnnouncement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupID: ", p), err)
	}
	return err
}

func (p *GroupAnnouncement) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createUserID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createUserID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createUserID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createUserID: ", p), err)
	}
	return err
}

func (p *GroupAnnouncement) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createDt", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createDt: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateDt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createDt (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createDt: ", p), err)
	}
	return err
}

func (p *GroupAnnouncement) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.content (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:content: ", p), err)
	}
	return err
}

func (p *GroupAnnouncement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupAnnouncement(%+v)", *p)
}

// 群公告分页查询
//
// Attributes:
//  - LastSourceID: 已拉取到的最终群公告id*
//  - GroupID: 群id*
//  - UserID: 用户id*
//  - PageSize: 每页大小 默认20*
type GroupAnnouncementParam struct {
	LastSourceID int64 `thrift:"lastSourceID,1" json:"lastSourceID"`
	GroupID      int64 `thrift:"groupID,2" json:"groupID"`
	UserID       int64 `thrift:"userID,3" json:"userID"`
	PageSize     int32 `thrift:"pageSize,4" json:"pageSize"`
}

func NewGroupAnnouncementParam() *GroupAnnouncementParam {
	return &GroupAnnouncementParam{}
}

func (p *GroupAnnouncementParam) GetLastSourceID() int64 {
	return p.LastSourceID
}

func (p *GroupAnnouncementParam) GetGroupID() int64 {
	return p.GroupID
}

func (p *GroupAnnouncementParam) GetUserID() int64 {
	return p.UserID
}

func (p *GroupAnnouncementParam) GetPageSize() int32 {
	return p.PageSize
}
func (p *GroupAnnouncementParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupAnnouncementParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LastSourceID = v
	}
	return nil
}

func (p *GroupAnnouncementParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupID = v
	}
	return nil
}

func (p *GroupAnnouncementParam) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *GroupAnnouncementParam) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *GroupAnnouncementParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GroupAnnouncementParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupAnnouncementParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastSourceID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lastSourceID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastSourceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSourceID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lastSourceID: ", p), err)
	}
	return err
}

func (p *GroupAnnouncementParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.GroupID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupID: ", p), err)
	}
	return err
}

func (p *GroupAnnouncementParam) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userID: ", p), err)
	}
	return err
}

func (p *GroupAnnouncementParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageSize: ", p), err)
	}
	return err
}

func (p *GroupAnnouncementParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupAnnouncementParam(%+v)", *p)
}

// Attributes:
//  - CSID: 客服id*
//  - AppID: 公众号id*
//  - CustomerID: 客服的用户id*
//  - OnlineStatus: 在线状态1:在线，2:离线*
//  - MaxReception: 当前最大可接待数*
//  - TotalReception: 总接待数*
//  - PortraitUrl: 客服头像*
//  - Nickname: 客服昵称*
//  - ExtJson: 扩展信息*
//  - CreateDt: 创建时间*
//  - UpdateDt: 修改时间*
type AppCustomerServiceInfo struct {
	CSID           int64  `thrift:"CSID,1" json:"CSID"`
	AppID          int64  `thrift:"appID,2" json:"appID"`
	CustomerID     int64  `thrift:"customerID,3" json:"customerID"`
	OnlineStatus   int8   `thrift:"onlineStatus,4" json:"onlineStatus"`
	MaxReception   int32  `thrift:"maxReception,5" json:"maxReception"`
	TotalReception int32  `thrift:"totalReception,6" json:"totalReception"`
	PortraitUrl    string `thrift:"portraitUrl,7" json:"portraitUrl"`
	Nickname       string `thrift:"nickname,8" json:"nickname"`
	ExtJson        string `thrift:"extJson,9" json:"extJson"`
	CreateDt       int64  `thrift:"createDt,10" json:"createDt"`
	UpdateDt       int64  `thrift:"updateDt,11" json:"updateDt"`
}

func NewAppCustomerServiceInfo() *AppCustomerServiceInfo {
	return &AppCustomerServiceInfo{}
}

func (p *AppCustomerServiceInfo) GetCSID() int64 {
	return p.CSID
}

func (p *AppCustomerServiceInfo) GetAppID() int64 {
	return p.AppID
}

func (p *AppCustomerServiceInfo) GetCustomerID() int64 {
	return p.CustomerID
}

func (p *AppCustomerServiceInfo) GetOnlineStatus() int8 {
	return p.OnlineStatus
}

func (p *AppCustomerServiceInfo) GetMaxReception() int32 {
	return p.MaxReception
}

func (p *AppCustomerServiceInfo) GetTotalReception() int32 {
	return p.TotalReception
}

func (p *AppCustomerServiceInfo) GetPortraitUrl() string {
	return p.PortraitUrl
}

func (p *AppCustomerServiceInfo) GetNickname() string {
	return p.Nickname
}

func (p *AppCustomerServiceInfo) GetExtJson() string {
	return p.ExtJson
}

func (p *AppCustomerServiceInfo) GetCreateDt() int64 {
	return p.CreateDt
}

func (p *AppCustomerServiceInfo) GetUpdateDt() int64 {
	return p.UpdateDt
}
func (p *AppCustomerServiceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CSID = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CustomerID = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.OnlineStatus = temp
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MaxReception = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TotalReception = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PortraitUrl = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Nickname = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ExtJson = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.CreateDt = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.UpdateDt = v
	}
	return nil
}

func (p *AppCustomerServiceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AppCustomerServiceInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AppCustomerServiceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CSID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:CSID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CSID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CSID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:CSID: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appID: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("customerID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:customerID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CustomerID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.customerID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:customerID: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("onlineStatus", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:onlineStatus: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.OnlineStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.onlineStatus (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:onlineStatus: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxReception", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxReception: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxReception)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxReception (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxReception: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalReception", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:totalReception: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalReception)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalReception (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:totalReception: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("portraitUrl", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:portraitUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.PortraitUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.portraitUrl (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:portraitUrl: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nickname", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:nickname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Nickname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nickname (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:nickname: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extJson", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extJson: ", p), err)
	}
	if err := oprot.WriteString(string(p.ExtJson)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.extJson (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extJson: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createDt", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:createDt: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreateDt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createDt (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:createDt: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateDt", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updateDt: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateDt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateDt (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updateDt: ", p), err)
	}
	return err
}

func (p *AppCustomerServiceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppCustomerServiceInfo(%+v)", *p)
}

// Attributes:
//  - UserID: 客户id*
//  - Name: 客户昵称*
//  - PortraitURL: 客户头像*
//  - Message: 最后一条消息*
type CustomerPoolBean struct {
	UserID      int64        `thrift:"userID,1" json:"userID"`
	Name        string       `thrift:"name,2" json:"name"`
	PortraitURL string       `thrift:"portraitURL,3" json:"portraitURL"`
	Message     *MessageBean `thrift:"message,4" json:"message"`
}

func NewCustomerPoolBean() *CustomerPoolBean {
	return &CustomerPoolBean{}
}

func (p *CustomerPoolBean) GetUserID() int64 {
	return p.UserID
}

func (p *CustomerPoolBean) GetName() string {
	return p.Name
}

func (p *CustomerPoolBean) GetPortraitURL() string {
	return p.PortraitURL
}

var CustomerPoolBean_Message_DEFAULT *MessageBean

func (p *CustomerPoolBean) GetMessage() *MessageBean {
	if !p.IsSetMessage() {
		return CustomerPoolBean_Message_DEFAULT
	}
	return p.Message
}
func (p *CustomerPoolBean) IsSetMessage() bool {
	return p.Message != nil
}

func (p *CustomerPoolBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CustomerPoolBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *CustomerPoolBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CustomerPoolBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PortraitURL = v
	}
	return nil
}

func (p *CustomerPoolBean) readField4(iprot thrift.TProtocol) error {
	p.Message = &MessageBean{}
	if err := p.Message.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *CustomerPoolBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CustomerPoolBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CustomerPoolBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *CustomerPoolBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *CustomerPoolBean) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("portraitURL", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:portraitURL: ", p), err)
	}
	if err := oprot.WriteString(string(p.PortraitURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.portraitURL (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:portraitURL: ", p), err)
	}
	return err
}

func (p *CustomerPoolBean) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err)
	}
	if err := p.Message.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err)
	}
	return err
}

func (p *CustomerPoolBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CustomerPoolBean(%+v)", *p)
}

// Attributes:
//  - ApplicationID
//  - SubMessagetype
//  - RequestID
//  - TargetID
//  - TargetType
//  - Expiretime
//  - HandlePerson
//  - Status
//  - GroupID
//  - Extend
type ApplicationForm struct {
	ApplicationID  *int64  `thrift:"applicationID,1" json:"applicationID,omitempty"`
	SubMessagetype int32   `thrift:"subMessagetype,2" json:"subMessagetype"`
	RequestID      int64   `thrift:"requestID,3" json:"requestID"`
	TargetID       int64   `thrift:"targetID,4" json:"targetID"`
	TargetType     int32   `thrift:"targetType,5" json:"targetType"`
	Expiretime     *int64  `thrift:"expiretime,6" json:"expiretime,omitempty"`
	HandlePerson   *string `thrift:"handlePerson,7" json:"handlePerson,omitempty"`
	Status         int32   `thrift:"status,8" json:"status"`
	GroupID        *int64  `thrift:"groupID,9" json:"groupID,omitempty"`
	Extend         *string `thrift:"extend,10" json:"extend,omitempty"`
}

func NewApplicationForm() *ApplicationForm {
	return &ApplicationForm{}
}

var ApplicationForm_ApplicationID_DEFAULT int64

func (p *ApplicationForm) GetApplicationID() int64 {
	if !p.IsSetApplicationID() {
		return ApplicationForm_ApplicationID_DEFAULT
	}
	return *p.ApplicationID
}

func (p *ApplicationForm) GetSubMessagetype() int32 {
	return p.SubMessagetype
}

func (p *ApplicationForm) GetRequestID() int64 {
	return p.RequestID
}

func (p *ApplicationForm) GetTargetID() int64 {
	return p.TargetID
}

func (p *ApplicationForm) GetTargetType() int32 {
	return p.TargetType
}

var ApplicationForm_Expiretime_DEFAULT int64

func (p *ApplicationForm) GetExpiretime() int64 {
	if !p.IsSetExpiretime() {
		return ApplicationForm_Expiretime_DEFAULT
	}
	return *p.Expiretime
}

var ApplicationForm_HandlePerson_DEFAULT string

func (p *ApplicationForm) GetHandlePerson() string {
	if !p.IsSetHandlePerson() {
		return ApplicationForm_HandlePerson_DEFAULT
	}
	return *p.HandlePerson
}

func (p *ApplicationForm) GetStatus() int32 {
	return p.Status
}

var ApplicationForm_GroupID_DEFAULT int64

func (p *ApplicationForm) GetGroupID() int64 {
	if !p.IsSetGroupID() {
		return ApplicationForm_GroupID_DEFAULT
	}
	return *p.GroupID
}

var ApplicationForm_Extend_DEFAULT string

func (p *ApplicationForm) GetExtend() string {
	if !p.IsSetExtend() {
		return ApplicationForm_Extend_DEFAULT
	}
	return *p.Extend
}
func (p *ApplicationForm) IsSetApplicationID() bool {
	return p.ApplicationID != nil
}

func (p *ApplicationForm) IsSetExpiretime() bool {
	return p.Expiretime != nil
}

func (p *ApplicationForm) IsSetHandlePerson() bool {
	return p.HandlePerson != nil
}

func (p *ApplicationForm) IsSetGroupID() bool {
	return p.GroupID != nil
}

func (p *ApplicationForm) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *ApplicationForm) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ApplicationForm) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ApplicationID = &v
	}
	return nil
}

func (p *ApplicationForm) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SubMessagetype = v
	}
	return nil
}

func (p *ApplicationForm) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RequestID = v
	}
	return nil
}

func (p *ApplicationForm) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TargetID = v
	}
	return nil
}

func (p *ApplicationForm) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TargetType = v
	}
	return nil
}

func (p *ApplicationForm) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Expiretime = &v
	}
	return nil
}

func (p *ApplicationForm) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.HandlePerson = &v
	}
	return nil
}

func (p *ApplicationForm) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *ApplicationForm) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.GroupID = &v
	}
	return nil
}

func (p *ApplicationForm) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *ApplicationForm) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ApplicationForm"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ApplicationForm) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetApplicationID() {
		if err := oprot.WriteFieldBegin("applicationID", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:applicationID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ApplicationID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.applicationID (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:applicationID: ", p), err)
		}
	}
	return err
}

func (p *ApplicationForm) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subMessagetype", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:subMessagetype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SubMessagetype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subMessagetype (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:subMessagetype: ", p), err)
	}
	return err
}

func (p *ApplicationForm) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RequestID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestID: ", p), err)
	}
	return err
}

func (p *ApplicationForm) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TargetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetID: ", p), err)
	}
	return err
}

func (p *ApplicationForm) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:targetType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TargetType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:targetType: ", p), err)
	}
	return err
}

func (p *ApplicationForm) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpiretime() {
		if err := oprot.WriteFieldBegin("expiretime", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:expiretime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Expiretime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.expiretime (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:expiretime: ", p), err)
		}
	}
	return err
}

func (p *ApplicationForm) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetHandlePerson() {
		if err := oprot.WriteFieldBegin("handlePerson", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:handlePerson: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HandlePerson)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.handlePerson (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:handlePerson: ", p), err)
		}
	}
	return err
}

func (p *ApplicationForm) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
	}
	return err
}

func (p *ApplicationForm) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupID() {
		if err := oprot.WriteFieldBegin("groupID", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:groupID: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.GroupID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupID (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:groupID: ", p), err)
		}
	}
	return err
}

func (p *ApplicationForm) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extend: ", p), err)
		}
	}
	return err
}

func (p *ApplicationForm) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ApplicationForm(%+v)", *p)
}

// Attributes:
//  - Sound
type UserGroupSettingsExtend struct {
	Sound *string `thrift:"sound,1" json:"sound,omitempty"`
}

func NewUserGroupSettingsExtend() *UserGroupSettingsExtend {
	return &UserGroupSettingsExtend{}
}

var UserGroupSettingsExtend_Sound_DEFAULT string

func (p *UserGroupSettingsExtend) GetSound() string {
	if !p.IsSetSound() {
		return UserGroupSettingsExtend_Sound_DEFAULT
	}
	return *p.Sound
}
func (p *UserGroupSettingsExtend) IsSetSound() bool {
	return p.Sound != nil
}

func (p *UserGroupSettingsExtend) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserGroupSettingsExtend) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Sound = &v
	}
	return nil
}

func (p *UserGroupSettingsExtend) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserGroupSettingsExtend"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserGroupSettingsExtend) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSound() {
		if err := oprot.WriteFieldBegin("sound", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sound: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Sound)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sound (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sound: ", p), err)
		}
	}
	return err
}

func (p *UserGroupSettingsExtend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserGroupSettingsExtend(%+v)", *p)
}

// 会话详情
//
// Attributes:
//  - UserID
//  - TargetID
//  - SDKID
//  - SetTop
//  - SetNotDisturb
//  - SetDelete
type SessionInfo struct {
	UserID        int64 `thrift:"userID,1" json:"userID"`
	TargetID      int64 `thrift:"targetID,2" json:"targetID"`
	SDKID         int64 `thrift:"SDKID,3" json:"SDKID"`
	SetTop        int8  `thrift:"setTop,4" json:"setTop"`
	SetNotDisturb int8  `thrift:"setNotDisturb,5" json:"setNotDisturb"`
	SetDelete     int8  `thrift:"setDelete,6" json:"setDelete"`
}

func NewSessionInfo() *SessionInfo {
	return &SessionInfo{}
}

func (p *SessionInfo) GetUserID() int64 {
	return p.UserID
}

func (p *SessionInfo) GetTargetID() int64 {
	return p.TargetID
}

func (p *SessionInfo) GetSDKID() int64 {
	return p.SDKID
}

func (p *SessionInfo) GetSetTop() int8 {
	return p.SetTop
}

func (p *SessionInfo) GetSetNotDisturb() int8 {
	return p.SetNotDisturb
}

func (p *SessionInfo) GetSetDelete() int8 {
	return p.SetDelete
}
func (p *SessionInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SessionInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *SessionInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TargetID = v
	}
	return nil
}

func (p *SessionInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *SessionInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.SetTop = temp
	}
	return nil
}

func (p *SessionInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.SetNotDisturb = temp
	}
	return nil
}

func (p *SessionInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.SetDelete = temp
	}
	return nil
}

func (p *SessionInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SessionInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SessionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *SessionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetID", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:targetID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TargetID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:targetID: ", p), err)
	}
	return err
}

func (p *SessionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SDKID: ", p), err)
	}
	return err
}

func (p *SessionInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setTop", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:setTop: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.SetTop)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.setTop (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:setTop: ", p), err)
	}
	return err
}

func (p *SessionInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setNotDisturb", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:setNotDisturb: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.SetNotDisturb)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.setNotDisturb (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:setNotDisturb: ", p), err)
	}
	return err
}

func (p *SessionInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setDelete", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:setDelete: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.SetDelete)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.setDelete (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:setDelete: ", p), err)
	}
	return err
}

func (p *SessionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SessionInfo(%+v)", *p)
}

// 登录记录
//
// Attributes:
//  - UserID
//  - LoginTime
//  - DeviceType
//  - DeviceInfo
//  - MacCode
//  - LoginIP
//  - LoginCity
//  - SDKID
type LoginRecord struct {
	UserID     int64  `thrift:"userID,1" json:"userID"`
	LoginTime  int64  `thrift:"loginTime,2" json:"loginTime"`
	DeviceType int8   `thrift:"deviceType,3" json:"deviceType"`
	DeviceInfo string `thrift:"deviceInfo,4" json:"deviceInfo"`
	MacCode    string `thrift:"macCode,5" json:"macCode"`
	LoginIP    string `thrift:"loginIP,6" json:"loginIP"`
	LoginCity  string `thrift:"loginCity,7" json:"loginCity"`
	SDKID      int64  `thrift:"SDKID,8" json:"SDKID"`
}

func NewLoginRecord() *LoginRecord {
	return &LoginRecord{}
}

func (p *LoginRecord) GetUserID() int64 {
	return p.UserID
}

func (p *LoginRecord) GetLoginTime() int64 {
	return p.LoginTime
}

func (p *LoginRecord) GetDeviceType() int8 {
	return p.DeviceType
}

func (p *LoginRecord) GetDeviceInfo() string {
	return p.DeviceInfo
}

func (p *LoginRecord) GetMacCode() string {
	return p.MacCode
}

func (p *LoginRecord) GetLoginIP() string {
	return p.LoginIP
}

func (p *LoginRecord) GetLoginCity() string {
	return p.LoginCity
}

func (p *LoginRecord) GetSDKID() int64 {
	return p.SDKID
}
func (p *LoginRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LoginRecord) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *LoginRecord) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LoginTime = v
	}
	return nil
}

func (p *LoginRecord) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *LoginRecord) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DeviceInfo = v
	}
	return nil
}

func (p *LoginRecord) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MacCode = v
	}
	return nil
}

func (p *LoginRecord) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LoginIP = v
	}
	return nil
}

func (p *LoginRecord) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LoginCity = v
	}
	return nil
}

func (p *LoginRecord) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *LoginRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginRecord"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LoginRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *LoginRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("loginTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LoginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.loginTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginTime: ", p), err)
	}
	return err
}

func (p *LoginRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceType: ", p), err)
	}
	return err
}

func (p *LoginRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deviceInfo: ", p), err)
	}
	if err := oprot.WriteString(string(p.DeviceInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceInfo (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deviceInfo: ", p), err)
	}
	return err
}

func (p *LoginRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("macCode", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:macCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.MacCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.macCode (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:macCode: ", p), err)
	}
	return err
}

func (p *LoginRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("loginIP", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:loginIP: ", p), err)
	}
	if err := oprot.WriteString(string(p.LoginIP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.loginIP (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:loginIP: ", p), err)
	}
	return err
}

func (p *LoginRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("loginCity", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:loginCity: ", p), err)
	}
	if err := oprot.WriteString(string(p.LoginCity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.loginCity (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:loginCity: ", p), err)
	}
	return err
}

func (p *LoginRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:SDKID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:SDKID: ", p), err)
	}
	return err
}

func (p *LoginRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginRecord(%+v)", *p)
}

// 消息提醒实体
//
// Attributes:
//  - ID
//  - ReceiverUserId
//  - ReminderSendTime
//  - ReminderMsgId
//  - SourceId
//  - SourceMessage
type ReminderMsg struct {
	ID               int64               `thrift:"id,1" json:"id"`
	ReceiverUserId   int64               `thrift:"receiverUserId,2" json:"receiverUserId"`
	ReminderSendTime int64               `thrift:"reminderSendTime,3" json:"reminderSendTime"`
	ReminderMsgId    int64               `thrift:"reminderMsgId,4" json:"reminderMsgId"`
	SourceId         int64               `thrift:"sourceId,5" json:"sourceId"`
	SourceMessage    *MessageStorageBean `thrift:"sourceMessage,6" json:"sourceMessage"`
}

func NewReminderMsg() *ReminderMsg {
	return &ReminderMsg{}
}

func (p *ReminderMsg) GetID() int64 {
	return p.ID
}

func (p *ReminderMsg) GetReceiverUserId() int64 {
	return p.ReceiverUserId
}

func (p *ReminderMsg) GetReminderSendTime() int64 {
	return p.ReminderSendTime
}

func (p *ReminderMsg) GetReminderMsgId() int64 {
	return p.ReminderMsgId
}

func (p *ReminderMsg) GetSourceId() int64 {
	return p.SourceId
}

var ReminderMsg_SourceMessage_DEFAULT *MessageStorageBean

func (p *ReminderMsg) GetSourceMessage() *MessageStorageBean {
	if !p.IsSetSourceMessage() {
		return ReminderMsg_SourceMessage_DEFAULT
	}
	return p.SourceMessage
}
func (p *ReminderMsg) IsSetSourceMessage() bool {
	return p.SourceMessage != nil
}

func (p *ReminderMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReminderMsg) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ReminderMsg) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReceiverUserId = v
	}
	return nil
}

func (p *ReminderMsg) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ReminderSendTime = v
	}
	return nil
}

func (p *ReminderMsg) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReminderMsgId = v
	}
	return nil
}

func (p *ReminderMsg) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SourceId = v
	}
	return nil
}

func (p *ReminderMsg) readField6(iprot thrift.TProtocol) error {
	p.SourceMessage = &MessageStorageBean{}
	if err := p.SourceMessage.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceMessage), err)
	}
	return nil
}

func (p *ReminderMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReminderMsg"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReminderMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ReminderMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("receiverUserId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:receiverUserId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReceiverUserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.receiverUserId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:receiverUserId: ", p), err)
	}
	return err
}

func (p *ReminderMsg) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reminderSendTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reminderSendTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReminderSendTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reminderSendTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reminderSendTime: ", p), err)
	}
	return err
}

func (p *ReminderMsg) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reminderMsgId", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reminderMsgId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ReminderMsgId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reminderMsgId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reminderMsgId: ", p), err)
	}
	return err
}

func (p *ReminderMsg) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceId", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sourceId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SourceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sourceId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sourceId: ", p), err)
	}
	return err
}

func (p *ReminderMsg) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceMessage", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sourceMessage: ", p), err)
	}
	if err := p.SourceMessage.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceMessage), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sourceMessage: ", p), err)
	}
	return err
}

func (p *ReminderMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReminderMsg(%+v)", *p)
}

// 消息提醒实体
//
// Attributes:
//  - ReminderMsgList
//  - TotalCount
//  - TotalPageNo
type ReminderMsgPage struct {
	ReminderMsgList []*ReminderMsg `thrift:"reminderMsgList,1" json:"reminderMsgList"`
	TotalCount      int64          `thrift:"totalCount,2" json:"totalCount"`
	TotalPageNo     int64          `thrift:"totalPageNo,3" json:"totalPageNo"`
}

func NewReminderMsgPage() *ReminderMsgPage {
	return &ReminderMsgPage{}
}

func (p *ReminderMsgPage) GetReminderMsgList() []*ReminderMsg {
	return p.ReminderMsgList
}

func (p *ReminderMsgPage) GetTotalCount() int64 {
	return p.TotalCount
}

func (p *ReminderMsgPage) GetTotalPageNo() int64 {
	return p.TotalPageNo
}
func (p *ReminderMsgPage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReminderMsgPage) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ReminderMsg, 0, size)
	p.ReminderMsgList = tSlice
	for i := 0; i < size; i++ {
		_elem87 := &ReminderMsg{}
		if err := _elem87.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem87), err)
		}
		p.ReminderMsgList = append(p.ReminderMsgList, _elem87)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ReminderMsgPage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *ReminderMsgPage) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalPageNo = v
	}
	return nil
}

func (p *ReminderMsgPage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ReminderMsgPage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReminderMsgPage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reminderMsgList", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reminderMsgList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReminderMsgList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ReminderMsgList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reminderMsgList: ", p), err)
	}
	return err
}

func (p *ReminderMsgPage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalCount", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalCount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalCount: ", p), err)
	}
	return err
}

func (p *ReminderMsgPage) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalPageNo", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalPageNo: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalPageNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalPageNo (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalPageNo: ", p), err)
	}
	return err
}

func (p *ReminderMsgPage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReminderMsgPage(%+v)", *p)
}

// 应用帮助
//
// Attributes:
//  - ID
//  - AppId
//  - ParentId
//  - Title
//  - HelpType
//  - ArticleType
//  - LinkUrl
//  - FileUrl
//  - DetailUrl
//  - SortNum
type SmallAppHelp struct {
	ID          int64  `thrift:"id,1" json:"id"`
	AppId       int64  `thrift:"appId,2" json:"appId"`
	ParentId    int64  `thrift:"parentId,3" json:"parentId"`
	Title       string `thrift:"title,4" json:"title"`
	HelpType    int8   `thrift:"helpType,5" json:"helpType"`
	ArticleType int8   `thrift:"articleType,6" json:"articleType"`
	LinkUrl     string `thrift:"linkUrl,7" json:"linkUrl"`
	FileUrl     string `thrift:"fileUrl,8" json:"fileUrl"`
	DetailUrl   string `thrift:"detailUrl,9" json:"detailUrl"`
	SortNum     int32  `thrift:"sortNum,10" json:"sortNum"`
}

func NewSmallAppHelp() *SmallAppHelp {
	return &SmallAppHelp{}
}

func (p *SmallAppHelp) GetID() int64 {
	return p.ID
}

func (p *SmallAppHelp) GetAppId() int64 {
	return p.AppId
}

func (p *SmallAppHelp) GetParentId() int64 {
	return p.ParentId
}

func (p *SmallAppHelp) GetTitle() string {
	return p.Title
}

func (p *SmallAppHelp) GetHelpType() int8 {
	return p.HelpType
}

func (p *SmallAppHelp) GetArticleType() int8 {
	return p.ArticleType
}

func (p *SmallAppHelp) GetLinkUrl() string {
	return p.LinkUrl
}

func (p *SmallAppHelp) GetFileUrl() string {
	return p.FileUrl
}

func (p *SmallAppHelp) GetDetailUrl() string {
	return p.DetailUrl
}

func (p *SmallAppHelp) GetSortNum() int32 {
	return p.SortNum
}
func (p *SmallAppHelp) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallAppHelp) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *SmallAppHelp) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *SmallAppHelp) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ParentId = v
	}
	return nil
}

func (p *SmallAppHelp) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *SmallAppHelp) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.HelpType = temp
	}
	return nil
}

func (p *SmallAppHelp) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.ArticleType = temp
	}
	return nil
}

func (p *SmallAppHelp) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LinkUrl = v
	}
	return nil
}

func (p *SmallAppHelp) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FileUrl = v
	}
	return nil
}

func (p *SmallAppHelp) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DetailUrl = v
	}
	return nil
}

func (p *SmallAppHelp) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.SortNum = v
	}
	return nil
}

func (p *SmallAppHelp) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallAppHelp"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallAppHelp) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parentId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parentId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ParentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parentId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parentId: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("helpType", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:helpType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.HelpType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.helpType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:helpType: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("articleType", thrift.BYTE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:articleType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.ArticleType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.articleType (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:articleType: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkUrl", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:linkUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.LinkUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkUrl (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:linkUrl: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileUrl", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fileUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.FileUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileUrl (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fileUrl: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detailUrl", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:detailUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.DetailUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.detailUrl (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:detailUrl: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sortNum", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:sortNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SortNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sortNum (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:sortNum: ", p), err)
	}
	return err
}

func (p *SmallAppHelp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallAppHelp(%+v)", *p)
}

// 应用帮助查询结构体
//
// Attributes:
//  - ParentId
//  - AppId
type SmallAppHelpParam struct {
	ParentId int64 `thrift:"parentId,1" json:"parentId"`
	AppId    int64 `thrift:"appId,2" json:"appId"`
}

func NewSmallAppHelpParam() *SmallAppHelpParam {
	return &SmallAppHelpParam{}
}

func (p *SmallAppHelpParam) GetParentId() int64 {
	return p.ParentId
}

func (p *SmallAppHelpParam) GetAppId() int64 {
	return p.AppId
}
func (p *SmallAppHelpParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SmallAppHelpParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ParentId = v
	}
	return nil
}

func (p *SmallAppHelpParam) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *SmallAppHelpParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SmallAppHelpParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SmallAppHelpParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parentId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parentId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ParentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.parentId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parentId: ", p), err)
	}
	return err
}

func (p *SmallAppHelpParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err)
	}
	return err
}

func (p *SmallAppHelpParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SmallAppHelpParam(%+v)", *p)
}

// PC扫码返回结果
//
// Attributes:
//  - ResultCode
//  - ResultMsg
//  - QrCodeData
type PCLoginQrCodeResult_ struct {
	ResultCode *int32  `thrift:"resultCode,1" json:"resultCode,omitempty"`
	ResultMsg  *string `thrift:"resultMsg,2" json:"resultMsg,omitempty"`
	QrCodeData *string `thrift:"qrCodeData,3" json:"qrCodeData,omitempty"`
}

func NewPCLoginQrCodeResult_() *PCLoginQrCodeResult_ {
	return &PCLoginQrCodeResult_{}
}

var PCLoginQrCodeResult__ResultCode_DEFAULT int32

func (p *PCLoginQrCodeResult_) GetResultCode() int32 {
	if !p.IsSetResultCode() {
		return PCLoginQrCodeResult__ResultCode_DEFAULT
	}
	return *p.ResultCode
}

var PCLoginQrCodeResult__ResultMsg_DEFAULT string

func (p *PCLoginQrCodeResult_) GetResultMsg() string {
	if !p.IsSetResultMsg() {
		return PCLoginQrCodeResult__ResultMsg_DEFAULT
	}
	return *p.ResultMsg
}

var PCLoginQrCodeResult__QrCodeData_DEFAULT string

func (p *PCLoginQrCodeResult_) GetQrCodeData() string {
	if !p.IsSetQrCodeData() {
		return PCLoginQrCodeResult__QrCodeData_DEFAULT
	}
	return *p.QrCodeData
}
func (p *PCLoginQrCodeResult_) IsSetResultCode() bool {
	return p.ResultCode != nil
}

func (p *PCLoginQrCodeResult_) IsSetResultMsg() bool {
	return p.ResultMsg != nil
}

func (p *PCLoginQrCodeResult_) IsSetQrCodeData() bool {
	return p.QrCodeData != nil
}

func (p *PCLoginQrCodeResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PCLoginQrCodeResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ResultCode = &v
	}
	return nil
}

func (p *PCLoginQrCodeResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ResultMsg = &v
	}
	return nil
}

func (p *PCLoginQrCodeResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.QrCodeData = &v
	}
	return nil
}

func (p *PCLoginQrCodeResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PCLoginQrCodeResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PCLoginQrCodeResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultCode() {
		if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ResultCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resultCode (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultCode: ", p), err)
		}
	}
	return err
}

func (p *PCLoginQrCodeResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultMsg() {
		if err := oprot.WriteFieldBegin("resultMsg", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resultMsg: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ResultMsg)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resultMsg (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resultMsg: ", p), err)
		}
	}
	return err
}

func (p *PCLoginQrCodeResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQrCodeData() {
		if err := oprot.WriteFieldBegin("qrCodeData", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:qrCodeData: ", p), err)
		}
		if err := oprot.WriteString(string(*p.QrCodeData)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.qrCodeData (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:qrCodeData: ", p), err)
		}
	}
	return err
}

func (p *PCLoginQrCodeResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PCLoginQrCodeResult_(%+v)", *p)
}

// 登录设备信息及豆豆版本实体
//
// Attributes:
//  - UserID
//  - LoginTime
//  - DeviceType
//  - ClientType
//  - DeviceInfo
//  - ClientVersion
//  - SDKID
type LoginClientRecord struct {
	UserID        int64   `thrift:"userID,1" json:"userID"`
	LoginTime     int64   `thrift:"loginTime,2" json:"loginTime"`
	DeviceType    int8    `thrift:"deviceType,3" json:"deviceType"`
	ClientType    *int8   `thrift:"clientType,4" json:"clientType,omitempty"`
	DeviceInfo    *string `thrift:"deviceInfo,5" json:"deviceInfo,omitempty"`
	ClientVersion string  `thrift:"clientVersion,6" json:"clientVersion"`
	SDKID         string  `thrift:"SDKID,7" json:"SDKID"`
}

func NewLoginClientRecord() *LoginClientRecord {
	return &LoginClientRecord{}
}

func (p *LoginClientRecord) GetUserID() int64 {
	return p.UserID
}

func (p *LoginClientRecord) GetLoginTime() int64 {
	return p.LoginTime
}

func (p *LoginClientRecord) GetDeviceType() int8 {
	return p.DeviceType
}

var LoginClientRecord_ClientType_DEFAULT int8

func (p *LoginClientRecord) GetClientType() int8 {
	if !p.IsSetClientType() {
		return LoginClientRecord_ClientType_DEFAULT
	}
	return *p.ClientType
}

var LoginClientRecord_DeviceInfo_DEFAULT string

func (p *LoginClientRecord) GetDeviceInfo() string {
	if !p.IsSetDeviceInfo() {
		return LoginClientRecord_DeviceInfo_DEFAULT
	}
	return *p.DeviceInfo
}

func (p *LoginClientRecord) GetClientVersion() string {
	return p.ClientVersion
}

func (p *LoginClientRecord) GetSDKID() string {
	return p.SDKID
}
func (p *LoginClientRecord) IsSetClientType() bool {
	return p.ClientType != nil
}

func (p *LoginClientRecord) IsSetDeviceInfo() bool {
	return p.DeviceInfo != nil
}

func (p *LoginClientRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LoginClientRecord) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *LoginClientRecord) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LoginTime = v
	}
	return nil
}

func (p *LoginClientRecord) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.DeviceType = temp
	}
	return nil
}

func (p *LoginClientRecord) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.ClientType = &temp
	}
	return nil
}

func (p *LoginClientRecord) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DeviceInfo = &v
	}
	return nil
}

func (p *LoginClientRecord) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ClientVersion = v
	}
	return nil
}

func (p *LoginClientRecord) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.SDKID = v
	}
	return nil
}

func (p *LoginClientRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginClientRecord"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LoginClientRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *LoginClientRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("loginTime", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LoginTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.loginTime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginTime: ", p), err)
	}
	return err
}

func (p *LoginClientRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceType: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceType: ", p), err)
	}
	return err
}

func (p *LoginClientRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientType() {
		if err := oprot.WriteFieldBegin("clientType", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:clientType: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.ClientType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clientType (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:clientType: ", p), err)
		}
	}
	return err
}

func (p *LoginClientRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeviceInfo() {
		if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:deviceInfo: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DeviceInfo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deviceInfo (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:deviceInfo: ", p), err)
		}
	}
	return err
}

func (p *LoginClientRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientVersion", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:clientVersion: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClientVersion)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.clientVersion (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:clientVersion: ", p), err)
	}
	return err
}

func (p *LoginClientRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SDKID", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:SDKID: ", p), err)
	}
	if err := oprot.WriteString(string(p.SDKID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SDKID (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:SDKID: ", p), err)
	}
	return err
}

func (p *LoginClientRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginClientRecord(%+v)", *p)
}

// 待办事项
//
// Attributes:
//  - AppId: 公共号Id*
//  - UserId: 用户Id*
//  - AppName: 公共号名称*
//  - AgencyCount: 待办事项计数*
//  - AgencyContentZh: 中文消息模板*
//  - AgencyContentEn: 英文消息模板*
//  - AgencyUrl: 待办事项地址*
//  - AgencyExtendInfo: 待办事项拓展字段*
//  - AgencyStatus: 用户对应用的状态*
//  - UpdateAtTime: 更新时间*
type AgencyBean struct {
	AppId            int64   `thrift:"appId,1" json:"appId"`
	UserId           int64   `thrift:"userId,2" json:"userId"`
	AppName          *string `thrift:"appName,3" json:"appName,omitempty"`
	AgencyCount      *int32  `thrift:"agencyCount,4" json:"agencyCount,omitempty"`
	AgencyContentZh  *string `thrift:"agencyContentZh,5" json:"agencyContentZh,omitempty"`
	AgencyContentEn  *string `thrift:"agencyContentEn,6" json:"agencyContentEn,omitempty"`
	AgencyUrl        *string `thrift:"agencyUrl,7" json:"agencyUrl,omitempty"`
	AgencyExtendInfo *string `thrift:"agencyExtendInfo,8" json:"agencyExtendInfo,omitempty"`
	AgencyStatus     *int8   `thrift:"agencyStatus,9" json:"agencyStatus,omitempty"`
	UpdateAtTime     int64   `thrift:"updateAtTime,10" json:"updateAtTime"`
}

func NewAgencyBean() *AgencyBean {
	return &AgencyBean{}
}

func (p *AgencyBean) GetAppId() int64 {
	return p.AppId
}

func (p *AgencyBean) GetUserId() int64 {
	return p.UserId
}

var AgencyBean_AppName_DEFAULT string

func (p *AgencyBean) GetAppName() string {
	if !p.IsSetAppName() {
		return AgencyBean_AppName_DEFAULT
	}
	return *p.AppName
}

var AgencyBean_AgencyCount_DEFAULT int32

func (p *AgencyBean) GetAgencyCount() int32 {
	if !p.IsSetAgencyCount() {
		return AgencyBean_AgencyCount_DEFAULT
	}
	return *p.AgencyCount
}

var AgencyBean_AgencyContentZh_DEFAULT string

func (p *AgencyBean) GetAgencyContentZh() string {
	if !p.IsSetAgencyContentZh() {
		return AgencyBean_AgencyContentZh_DEFAULT
	}
	return *p.AgencyContentZh
}

var AgencyBean_AgencyContentEn_DEFAULT string

func (p *AgencyBean) GetAgencyContentEn() string {
	if !p.IsSetAgencyContentEn() {
		return AgencyBean_AgencyContentEn_DEFAULT
	}
	return *p.AgencyContentEn
}

var AgencyBean_AgencyUrl_DEFAULT string

func (p *AgencyBean) GetAgencyUrl() string {
	if !p.IsSetAgencyUrl() {
		return AgencyBean_AgencyUrl_DEFAULT
	}
	return *p.AgencyUrl
}

var AgencyBean_AgencyExtendInfo_DEFAULT string

func (p *AgencyBean) GetAgencyExtendInfo() string {
	if !p.IsSetAgencyExtendInfo() {
		return AgencyBean_AgencyExtendInfo_DEFAULT
	}
	return *p.AgencyExtendInfo
}

var AgencyBean_AgencyStatus_DEFAULT int8

func (p *AgencyBean) GetAgencyStatus() int8 {
	if !p.IsSetAgencyStatus() {
		return AgencyBean_AgencyStatus_DEFAULT
	}
	return *p.AgencyStatus
}

func (p *AgencyBean) GetUpdateAtTime() int64 {
	return p.UpdateAtTime
}
func (p *AgencyBean) IsSetAppName() bool {
	return p.AppName != nil
}

func (p *AgencyBean) IsSetAgencyCount() bool {
	return p.AgencyCount != nil
}

func (p *AgencyBean) IsSetAgencyContentZh() bool {
	return p.AgencyContentZh != nil
}

func (p *AgencyBean) IsSetAgencyContentEn() bool {
	return p.AgencyContentEn != nil
}

func (p *AgencyBean) IsSetAgencyUrl() bool {
	return p.AgencyUrl != nil
}

func (p *AgencyBean) IsSetAgencyExtendInfo() bool {
	return p.AgencyExtendInfo != nil
}

func (p *AgencyBean) IsSetAgencyStatus() bool {
	return p.AgencyStatus != nil
}

func (p *AgencyBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AgencyBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *AgencyBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserId = v
	}
	return nil
}

func (p *AgencyBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppName = &v
	}
	return nil
}

func (p *AgencyBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AgencyCount = &v
	}
	return nil
}

func (p *AgencyBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.AgencyContentZh = &v
	}
	return nil
}

func (p *AgencyBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.AgencyContentEn = &v
	}
	return nil
}

func (p *AgencyBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.AgencyUrl = &v
	}
	return nil
}

func (p *AgencyBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.AgencyExtendInfo = &v
	}
	return nil
}

func (p *AgencyBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := int8(v)
		p.AgencyStatus = &temp
	}
	return nil
}

func (p *AgencyBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.UpdateAtTime = v
	}
	return nil
}

func (p *AgencyBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AgencyBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AgencyBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err)
	}
	return err
}

func (p *AgencyBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err)
	}
	return err
}

func (p *AgencyBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppName() {
		if err := oprot.WriteFieldBegin("appName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appName: ", p), err)
		}
	}
	return err
}

func (p *AgencyBean) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAgencyCount() {
		if err := oprot.WriteFieldBegin("agencyCount", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:agencyCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.AgencyCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.agencyCount (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:agencyCount: ", p), err)
		}
	}
	return err
}

func (p *AgencyBean) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAgencyContentZh() {
		if err := oprot.WriteFieldBegin("agencyContentZh", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:agencyContentZh: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AgencyContentZh)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.agencyContentZh (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:agencyContentZh: ", p), err)
		}
	}
	return err
}

func (p *AgencyBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAgencyContentEn() {
		if err := oprot.WriteFieldBegin("agencyContentEn", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:agencyContentEn: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AgencyContentEn)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.agencyContentEn (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:agencyContentEn: ", p), err)
		}
	}
	return err
}

func (p *AgencyBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAgencyUrl() {
		if err := oprot.WriteFieldBegin("agencyUrl", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:agencyUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AgencyUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.agencyUrl (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:agencyUrl: ", p), err)
		}
	}
	return err
}

func (p *AgencyBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetAgencyExtendInfo() {
		if err := oprot.WriteFieldBegin("agencyExtendInfo", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:agencyExtendInfo: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AgencyExtendInfo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.agencyExtendInfo (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:agencyExtendInfo: ", p), err)
		}
	}
	return err
}

func (p *AgencyBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetAgencyStatus() {
		if err := oprot.WriteFieldBegin("agencyStatus", thrift.BYTE, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:agencyStatus: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.AgencyStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.agencyStatus (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:agencyStatus: ", p), err)
		}
	}
	return err
}

func (p *AgencyBean) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateAtTime", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updateAtTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UpdateAtTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateAtTime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updateAtTime: ", p), err)
	}
	return err
}

func (p *AgencyBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AgencyBean(%+v)", *p)
}

// 登录设备信息及豆豆版本返回结果实体
//
// Attributes:
//  - ResultCode
//  - ResultMsg
//  - ResultMap
type ResultLoginRecord struct {
	ResultCode int32                          `thrift:"resultCode,1" json:"resultCode"`
	ResultMsg  string                         `thrift:"resultMsg,2" json:"resultMsg"`
	ResultMap  map[int64][]*LoginClientRecord `thrift:"resultMap,3" json:"resultMap,omitempty"`
}

func NewResultLoginRecord() *ResultLoginRecord {
	return &ResultLoginRecord{}
}

func (p *ResultLoginRecord) GetResultCode() int32 {
	return p.ResultCode
}

func (p *ResultLoginRecord) GetResultMsg() string {
	return p.ResultMsg
}

var ResultLoginRecord_ResultMap_DEFAULT map[int64][]*LoginClientRecord

func (p *ResultLoginRecord) GetResultMap() map[int64][]*LoginClientRecord {
	return p.ResultMap
}
func (p *ResultLoginRecord) IsSetResultMap() bool {
	return p.ResultMap != nil
}

func (p *ResultLoginRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ResultLoginRecord) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ResultCode = v
	}
	return nil
}

func (p *ResultLoginRecord) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ResultMsg = v
	}
	return nil
}

func (p *ResultLoginRecord) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int64][]*LoginClientRecord, size)
	p.ResultMap = tMap
	for i := 0; i < size; i++ {
		var _key88 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key88 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*LoginClientRecord, 0, size)
		_val89 := tSlice
		for i := 0; i < size; i++ {
			_elem90 := &LoginClientRecord{}
			if err := _elem90.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem90), err)
			}
			_val89 = append(_val89, _elem90)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.ResultMap[_key88] = _val89
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ResultLoginRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResultLoginRecord"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResultLoginRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResultCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resultCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultCode: ", p), err)
	}
	return err
}

func (p *ResultLoginRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultMsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resultMsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.ResultMsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resultMsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resultMsg: ", p), err)
	}
	return err
}

func (p *ResultLoginRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetResultMap() {
		if err := oprot.WriteFieldBegin("resultMap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resultMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.LIST, len(p.ResultMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.ResultMap {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resultMap: ", p), err)
		}
	}
	return err
}

func (p *ResultLoginRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultLoginRecord(%+v)", *p)
}

// Attributes:
//  - UBean: **********用户实体**********
//  - OPower: oPower说明
// 绑定给被搜索到的用户的组织策略权限
// JSON格式字符串:{"allowChat":true,"contactVisiable":true}
// allowChat:	是否可聊天,
// contactVisiable:	是否可查看联系方式....
type OrgSearchUserInfo struct {
	UBean  *EnterpriseUserBean `thrift:"uBean,1" json:"uBean"`
	OPower string              `thrift:"oPower,2" json:"oPower"`
}

func NewOrgSearchUserInfo() *OrgSearchUserInfo {
	return &OrgSearchUserInfo{}
}

var OrgSearchUserInfo_UBean_DEFAULT *EnterpriseUserBean

func (p *OrgSearchUserInfo) GetUBean() *EnterpriseUserBean {
	if !p.IsSetUBean() {
		return OrgSearchUserInfo_UBean_DEFAULT
	}
	return p.UBean
}

func (p *OrgSearchUserInfo) GetOPower() string {
	return p.OPower
}
func (p *OrgSearchUserInfo) IsSetUBean() bool {
	return p.UBean != nil
}

func (p *OrgSearchUserInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OrgSearchUserInfo) readField1(iprot thrift.TProtocol) error {
	p.UBean = &EnterpriseUserBean{}
	if err := p.UBean.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UBean), err)
	}
	return nil
}

func (p *OrgSearchUserInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OPower = v
	}
	return nil
}

func (p *OrgSearchUserInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("OrgSearchUserInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OrgSearchUserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uBean", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uBean: ", p), err)
	}
	if err := p.UBean.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UBean), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uBean: ", p), err)
	}
	return err
}

func (p *OrgSearchUserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oPower", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oPower: ", p), err)
	}
	if err := oprot.WriteString(string(p.OPower)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.oPower (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oPower: ", p), err)
	}
	return err
}

func (p *OrgSearchUserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrgSearchUserInfo(%+v)", *p)
}

// Attributes:
//  - UBeans: ********** 用户集合 **********
//  - OBeans: ********** 组织集合 **********
type VisibleUserAndOrgResult_ struct {
	UBeans []*OrgSearchUserInfo `thrift:"uBeans,1" json:"uBeans,omitempty"`
	OBeans []*OrganizationBean  `thrift:"oBeans,2" json:"oBeans,omitempty"`
}

func NewVisibleUserAndOrgResult_() *VisibleUserAndOrgResult_ {
	return &VisibleUserAndOrgResult_{}
}

var VisibleUserAndOrgResult__UBeans_DEFAULT []*OrgSearchUserInfo

func (p *VisibleUserAndOrgResult_) GetUBeans() []*OrgSearchUserInfo {
	return p.UBeans
}

var VisibleUserAndOrgResult__OBeans_DEFAULT []*OrganizationBean

func (p *VisibleUserAndOrgResult_) GetOBeans() []*OrganizationBean {
	return p.OBeans
}
func (p *VisibleUserAndOrgResult_) IsSetUBeans() bool {
	return p.UBeans != nil
}

func (p *VisibleUserAndOrgResult_) IsSetOBeans() bool {
	return p.OBeans != nil
}

func (p *VisibleUserAndOrgResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VisibleUserAndOrgResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OrgSearchUserInfo, 0, size)
	p.UBeans = tSlice
	for i := 0; i < size; i++ {
		_elem91 := &OrgSearchUserInfo{}
		if err := _elem91.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem91), err)
		}
		p.UBeans = append(p.UBeans, _elem91)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VisibleUserAndOrgResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*OrganizationBean, 0, size)
	p.OBeans = tSlice
	for i := 0; i < size; i++ {
		_elem92 := &OrganizationBean{}
		if err := _elem92.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem92), err)
		}
		p.OBeans = append(p.OBeans, _elem92)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VisibleUserAndOrgResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VisibleUserAndOrgResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VisibleUserAndOrgResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUBeans() {
		if err := oprot.WriteFieldBegin("uBeans", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uBeans: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UBeans)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.UBeans {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uBeans: ", p), err)
		}
	}
	return err
}

func (p *VisibleUserAndOrgResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOBeans() {
		if err := oprot.WriteFieldBegin("oBeans", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oBeans: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OBeans)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.OBeans {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oBeans: ", p), err)
		}
	}
	return err
}

func (p *VisibleUserAndOrgResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VisibleUserAndOrgResult_(%+v)", *p)
}

// Attributes:
//  - Name: * 搜索的名称关键字(通用与用户名/组织名) **
//  - OrgIDs: * 选择的部门ID集合---该参数暂时未处理,默认搜索范围是全企业组织 **
type VisibleUserAndOrgParam struct {
	Name   *string `thrift:"name,1" json:"name,omitempty"`
	OrgIDs []int64 `thrift:"orgIDs,2" json:"orgIDs,omitempty"`
}

func NewVisibleUserAndOrgParam() *VisibleUserAndOrgParam {
	return &VisibleUserAndOrgParam{}
}

var VisibleUserAndOrgParam_Name_DEFAULT string

func (p *VisibleUserAndOrgParam) GetName() string {
	if !p.IsSetName() {
		return VisibleUserAndOrgParam_Name_DEFAULT
	}
	return *p.Name
}

var VisibleUserAndOrgParam_OrgIDs_DEFAULT []int64

func (p *VisibleUserAndOrgParam) GetOrgIDs() []int64 {
	return p.OrgIDs
}
func (p *VisibleUserAndOrgParam) IsSetName() bool {
	return p.Name != nil
}

func (p *VisibleUserAndOrgParam) IsSetOrgIDs() bool {
	return p.OrgIDs != nil
}

func (p *VisibleUserAndOrgParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VisibleUserAndOrgParam) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *VisibleUserAndOrgParam) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.OrgIDs = tSlice
	for i := 0; i < size; i++ {
		var _elem93 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem93 = v
		}
		p.OrgIDs = append(p.OrgIDs, _elem93)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VisibleUserAndOrgParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VisibleUserAndOrgParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VisibleUserAndOrgParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
		}
	}
	return err
}

func (p *VisibleUserAndOrgParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgIDs() {
		if err := oprot.WriteFieldBegin("orgIDs", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orgIDs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.OrgIDs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.OrgIDs {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orgIDs: ", p), err)
		}
	}
	return err
}

func (p *VisibleUserAndOrgParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VisibleUserAndOrgParam(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
//  - Description
//  - BadWordList
//  - IsEnable
type Thesaurus struct {
	ID          int64    `thrift:"id,1" json:"id"`
	Name        string   `thrift:"name,2" json:"name"`
	Description string   `thrift:"description,3" json:"description"`
	BadWordList []*Words `thrift:"badWordList,4" json:"badWordList"`
	IsEnable    int8     `thrift:"isEnable,5" json:"isEnable"`
}

func NewThesaurus() *Thesaurus {
	return &Thesaurus{}
}

func (p *Thesaurus) GetID() int64 {
	return p.ID
}

func (p *Thesaurus) GetName() string {
	return p.Name
}

func (p *Thesaurus) GetDescription() string {
	return p.Description
}

func (p *Thesaurus) GetBadWordList() []*Words {
	return p.BadWordList
}

func (p *Thesaurus) GetIsEnable() int8 {
	return p.IsEnable
}
func (p *Thesaurus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Thesaurus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Thesaurus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Thesaurus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Thesaurus) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Words, 0, size)
	p.BadWordList = tSlice
	for i := 0; i < size; i++ {
		_elem94 := &Words{}
		if err := _elem94.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem94), err)
		}
		p.BadWordList = append(p.BadWordList, _elem94)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Thesaurus) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.IsEnable = temp
	}
	return nil
}

func (p *Thesaurus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Thesaurus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Thesaurus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Thesaurus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *Thesaurus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err)
	}
	return err
}

func (p *Thesaurus) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("badWordList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:badWordList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BadWordList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BadWordList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:badWordList: ", p), err)
	}
	return err
}

func (p *Thesaurus) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isEnable", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isEnable: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.IsEnable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isEnable (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isEnable: ", p), err)
	}
	return err
}

func (p *Thesaurus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Thesaurus(%+v)", *p)
}

// Attributes:
//  - ID: id*
//  - Type: 客户端菜单类型 1.内置不可关闭菜单;2.内置可关闭菜单;3.用户自定义菜单*
//  - Code: 客户端菜单code 唯一*
//  - Name: 客户端菜单name JSON格式字符串 {"zh":"zhname","en":"enname"}*
//  - IsShow: 客户端菜单是否开启 1.是;2.否*
//  - IsDefaultPage: 客户端默认展示页 1.是;2.否*
//  - IsOriginIcon: 是否是原生内置图标*
//  - DefaultIcon: 客户端默认展示图标*
//  - ClickIcon: 客户端选中展示图标*
//  - Extend: 客户端菜单拓展字段*
//  - SortId: 客户端菜单排序字段*
type ClientMenu struct {
	ID            *int32  `thrift:"id,1" json:"id,omitempty"`
	Type          *int8   `thrift:"type,2" json:"type,omitempty"`
	Code          string  `thrift:"code,3" json:"code"`
	Name          *string `thrift:"name,4" json:"name,omitempty"`
	IsShow        *int8   `thrift:"isShow,5" json:"isShow,omitempty"`
	IsDefaultPage *int8   `thrift:"isDefaultPage,6" json:"isDefaultPage,omitempty"`
	IsOriginIcon  *int8   `thrift:"isOriginIcon,7" json:"isOriginIcon,omitempty"`
	DefaultIcon   *string `thrift:"defaultIcon,8" json:"defaultIcon,omitempty"`
	ClickIcon     *string `thrift:"clickIcon,9" json:"clickIcon,omitempty"`
	Extend        *string `thrift:"extend,10" json:"extend,omitempty"`
	SortId        *int32  `thrift:"sortId,11" json:"sortId,omitempty"`
}

func NewClientMenu() *ClientMenu {
	return &ClientMenu{}
}

var ClientMenu_ID_DEFAULT int32

func (p *ClientMenu) GetID() int32 {
	if !p.IsSetID() {
		return ClientMenu_ID_DEFAULT
	}
	return *p.ID
}

var ClientMenu_Type_DEFAULT int8

func (p *ClientMenu) GetType() int8 {
	if !p.IsSetType() {
		return ClientMenu_Type_DEFAULT
	}
	return *p.Type
}

func (p *ClientMenu) GetCode() string {
	return p.Code
}

var ClientMenu_Name_DEFAULT string

func (p *ClientMenu) GetName() string {
	if !p.IsSetName() {
		return ClientMenu_Name_DEFAULT
	}
	return *p.Name
}

var ClientMenu_IsShow_DEFAULT int8

func (p *ClientMenu) GetIsShow() int8 {
	if !p.IsSetIsShow() {
		return ClientMenu_IsShow_DEFAULT
	}
	return *p.IsShow
}

var ClientMenu_IsDefaultPage_DEFAULT int8

func (p *ClientMenu) GetIsDefaultPage() int8 {
	if !p.IsSetIsDefaultPage() {
		return ClientMenu_IsDefaultPage_DEFAULT
	}
	return *p.IsDefaultPage
}

var ClientMenu_IsOriginIcon_DEFAULT int8

func (p *ClientMenu) GetIsOriginIcon() int8 {
	if !p.IsSetIsOriginIcon() {
		return ClientMenu_IsOriginIcon_DEFAULT
	}
	return *p.IsOriginIcon
}

var ClientMenu_DefaultIcon_DEFAULT string

func (p *ClientMenu) GetDefaultIcon() string {
	if !p.IsSetDefaultIcon() {
		return ClientMenu_DefaultIcon_DEFAULT
	}
	return *p.DefaultIcon
}

var ClientMenu_ClickIcon_DEFAULT string

func (p *ClientMenu) GetClickIcon() string {
	if !p.IsSetClickIcon() {
		return ClientMenu_ClickIcon_DEFAULT
	}
	return *p.ClickIcon
}

var ClientMenu_Extend_DEFAULT string

func (p *ClientMenu) GetExtend() string {
	if !p.IsSetExtend() {
		return ClientMenu_Extend_DEFAULT
	}
	return *p.Extend
}

var ClientMenu_SortId_DEFAULT int32

func (p *ClientMenu) GetSortId() int32 {
	if !p.IsSetSortId() {
		return ClientMenu_SortId_DEFAULT
	}
	return *p.SortId
}
func (p *ClientMenu) IsSetID() bool {
	return p.ID != nil
}

func (p *ClientMenu) IsSetType() bool {
	return p.Type != nil
}

func (p *ClientMenu) IsSetName() bool {
	return p.Name != nil
}

func (p *ClientMenu) IsSetIsShow() bool {
	return p.IsShow != nil
}

func (p *ClientMenu) IsSetIsDefaultPage() bool {
	return p.IsDefaultPage != nil
}

func (p *ClientMenu) IsSetIsOriginIcon() bool {
	return p.IsOriginIcon != nil
}

func (p *ClientMenu) IsSetDefaultIcon() bool {
	return p.DefaultIcon != nil
}

func (p *ClientMenu) IsSetClickIcon() bool {
	return p.ClickIcon != nil
}

func (p *ClientMenu) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *ClientMenu) IsSetSortId() bool {
	return p.SortId != nil
}

func (p *ClientMenu) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ClientMenu) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *ClientMenu) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Type = &temp
	}
	return nil
}

func (p *ClientMenu) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *ClientMenu) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *ClientMenu) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.IsShow = &temp
	}
	return nil
}

func (p *ClientMenu) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.IsDefaultPage = &temp
	}
	return nil
}

func (p *ClientMenu) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := int8(v)
		p.IsOriginIcon = &temp
	}
	return nil
}

func (p *ClientMenu) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.DefaultIcon = &v
	}
	return nil
}

func (p *ClientMenu) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ClickIcon = &v
	}
	return nil
}

func (p *ClientMenu) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Extend = &v
	}
	return nil
}

func (p *ClientMenu) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.SortId = &v
	}
	return nil
}

func (p *ClientMenu) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClientMenu"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClientMenu) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err)
	}
	return err
}

func (p *ClientMenu) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsShow() {
		if err := oprot.WriteFieldBegin("isShow", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isShow: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.IsShow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isShow (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isShow: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDefaultPage() {
		if err := oprot.WriteFieldBegin("isDefaultPage", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isDefaultPage: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.IsDefaultPage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isDefaultPage (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isDefaultPage: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsOriginIcon() {
		if err := oprot.WriteFieldBegin("isOriginIcon", thrift.BYTE, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:isOriginIcon: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.IsOriginIcon)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isOriginIcon (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:isOriginIcon: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultIcon() {
		if err := oprot.WriteFieldBegin("defaultIcon", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:defaultIcon: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DefaultIcon)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultIcon (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:defaultIcon: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetClickIcon() {
		if err := oprot.WriteFieldBegin("clickIcon", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:clickIcon: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ClickIcon)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clickIcon (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:clickIcon: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extend: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Extend)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extend (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extend: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortId() {
		if err := oprot.WriteFieldBegin("sortId", thrift.I32, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sortId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SortId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sortId (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sortId: ", p), err)
		}
	}
	return err
}

func (p *ClientMenu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClientMenu(%+v)", *p)
}

// Attributes:
//  - ResultCode: 结果码
// 100008027 查询成功
// 100008028 entLogo与该服务器标识不符，查询失败
// 100008029 查询异常
//  - ClientMenus: 客户端菜单集合
type ClientMenuResult_ struct {
	ResultCode  int32         `thrift:"resultCode,1" json:"resultCode"`
	ClientMenus []*ClientMenu `thrift:"clientMenus,2" json:"clientMenus,omitempty"`
}

func NewClientMenuResult_() *ClientMenuResult_ {
	return &ClientMenuResult_{}
}

func (p *ClientMenuResult_) GetResultCode() int32 {
	return p.ResultCode
}

var ClientMenuResult__ClientMenus_DEFAULT []*ClientMenu

func (p *ClientMenuResult_) GetClientMenus() []*ClientMenu {
	return p.ClientMenus
}
func (p *ClientMenuResult_) IsSetClientMenus() bool {
	return p.ClientMenus != nil
}

func (p *ClientMenuResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ClientMenuResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ResultCode = v
	}
	return nil
}

func (p *ClientMenuResult_) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ClientMenu, 0, size)
	p.ClientMenus = tSlice
	for i := 0; i < size; i++ {
		_elem95 := &ClientMenu{}
		if err := _elem95.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem95), err)
		}
		p.ClientMenus = append(p.ClientMenus, _elem95)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ClientMenuResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ClientMenuResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ClientMenuResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resultCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResultCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.resultCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resultCode: ", p), err)
	}
	return err
}

func (p *ClientMenuResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientMenus() {
		if err := oprot.WriteFieldBegin("clientMenus", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientMenus: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ClientMenus)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ClientMenus {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientMenus: ", p), err)
		}
	}
	return err
}

func (p *ClientMenuResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClientMenuResult_(%+v)", *p)
}

// 用户标签策略返回结果
//
// Attributes:
//  - Code
//  - Message
//  - Data
type UserTagStrategy struct {
	Code    *int32  `thrift:"code,1" json:"code,omitempty"`
	Message *string `thrift:"message,2" json:"message,omitempty"`
	Data    *string `thrift:"data,3" json:"data,omitempty"`
}

func NewUserTagStrategy() *UserTagStrategy {
	return &UserTagStrategy{}
}

var UserTagStrategy_Code_DEFAULT int32

func (p *UserTagStrategy) GetCode() int32 {
	if !p.IsSetCode() {
		return UserTagStrategy_Code_DEFAULT
	}
	return *p.Code
}

var UserTagStrategy_Message_DEFAULT string

func (p *UserTagStrategy) GetMessage() string {
	if !p.IsSetMessage() {
		return UserTagStrategy_Message_DEFAULT
	}
	return *p.Message
}

var UserTagStrategy_Data_DEFAULT string

func (p *UserTagStrategy) GetData() string {
	if !p.IsSetData() {
		return UserTagStrategy_Data_DEFAULT
	}
	return *p.Data
}
func (p *UserTagStrategy) IsSetCode() bool {
	return p.Code != nil
}

func (p *UserTagStrategy) IsSetMessage() bool {
	return p.Message != nil
}

func (p *UserTagStrategy) IsSetData() bool {
	return p.Data != nil
}

func (p *UserTagStrategy) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTagStrategy) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = &v
	}
	return nil
}

func (p *UserTagStrategy) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *UserTagStrategy) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Data = &v
	}
	return nil
}

func (p *UserTagStrategy) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserTagStrategy"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTagStrategy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Code)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
		}
	}
	return err
}

func (p *UserTagStrategy) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *UserTagStrategy) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Data)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
		}
	}
	return err
}

func (p *UserTagStrategy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTagStrategy(%+v)", *p)
}

// 用户认证结构体
//
// Attributes:
//  - Password: 用户账号密码 *
//  - Type: 认证类型
// 1:注销用户密码认证
type UserAuthenticationBean struct {
	Password string `thrift:"password,1" json:"password"`
	Type     int8   `thrift:"type,2" json:"type"`
}

func NewUserAuthenticationBean() *UserAuthenticationBean {
	return &UserAuthenticationBean{}
}

func (p *UserAuthenticationBean) GetPassword() string {
	return p.Password
}

func (p *UserAuthenticationBean) GetType() int8 {
	return p.Type
}
func (p *UserAuthenticationBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAuthenticationBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *UserAuthenticationBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Type = temp
	}
	return nil
}

func (p *UserAuthenticationBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAuthenticationBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAuthenticationBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:password: ", p), err)
	}
	if err := oprot.WriteString(string(p.Password)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:password: ", p), err)
	}
	return err
}

func (p *UserAuthenticationBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *UserAuthenticationBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAuthenticationBean(%+v)", *p)
}

// 用户认证结构体
//
// Attributes:
//  - Code: 认证结果码 *
//  - Message: 结果说明 *
//  - AuthenticationCode: 验证成功 返回认证码 有效期5分钟*
type AuthenticationResult_ struct {
	Code               int32  `thrift:"code,1" json:"code"`
	Message            string `thrift:"message,2" json:"message"`
	AuthenticationCode string `thrift:"authenticationCode,3" json:"authenticationCode"`
}

func NewAuthenticationResult_() *AuthenticationResult_ {
	return &AuthenticationResult_{}
}

func (p *AuthenticationResult_) GetCode() int32 {
	return p.Code
}

func (p *AuthenticationResult_) GetMessage() string {
	return p.Message
}

func (p *AuthenticationResult_) GetAuthenticationCode() string {
	return p.AuthenticationCode
}
func (p *AuthenticationResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthenticationResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *AuthenticationResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *AuthenticationResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AuthenticationCode = v
	}
	return nil
}

func (p *AuthenticationResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthenticationResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthenticationResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *AuthenticationResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *AuthenticationResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationCode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authenticationCode: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationCode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authenticationCode: ", p), err)
	}
	return err
}

func (p *AuthenticationResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticationResult_(%+v)", *p)
}

// 新个人搜索配置开关
//
// Attributes:
//  - DicKey: 后台配置的dickey
//  - DicVal: 后台配置搜索名称
//  - SearchKey: 客户端key
//  - SwitchValue: 1开2关
type PersonalSearchDataSwitch struct {
	DicKey      *string `thrift:"dicKey,1" json:"dicKey,omitempty"`
	DicVal      *string `thrift:"dicVal,2" json:"dicVal,omitempty"`
	SearchKey   *string `thrift:"searchKey,3" json:"searchKey,omitempty"`
	SwitchValue int32   `thrift:"switchValue,4" json:"switchValue"`
}

func NewPersonalSearchDataSwitch() *PersonalSearchDataSwitch {
	return &PersonalSearchDataSwitch{}
}

var PersonalSearchDataSwitch_DicKey_DEFAULT string

func (p *PersonalSearchDataSwitch) GetDicKey() string {
	if !p.IsSetDicKey() {
		return PersonalSearchDataSwitch_DicKey_DEFAULT
	}
	return *p.DicKey
}

var PersonalSearchDataSwitch_DicVal_DEFAULT string

func (p *PersonalSearchDataSwitch) GetDicVal() string {
	if !p.IsSetDicVal() {
		return PersonalSearchDataSwitch_DicVal_DEFAULT
	}
	return *p.DicVal
}

var PersonalSearchDataSwitch_SearchKey_DEFAULT string

func (p *PersonalSearchDataSwitch) GetSearchKey() string {
	if !p.IsSetSearchKey() {
		return PersonalSearchDataSwitch_SearchKey_DEFAULT
	}
	return *p.SearchKey
}

func (p *PersonalSearchDataSwitch) GetSwitchValue() int32 {
	return p.SwitchValue
}
func (p *PersonalSearchDataSwitch) IsSetDicKey() bool {
	return p.DicKey != nil
}

func (p *PersonalSearchDataSwitch) IsSetDicVal() bool {
	return p.DicVal != nil
}

func (p *PersonalSearchDataSwitch) IsSetSearchKey() bool {
	return p.SearchKey != nil
}

func (p *PersonalSearchDataSwitch) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PersonalSearchDataSwitch) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DicKey = &v
	}
	return nil
}

func (p *PersonalSearchDataSwitch) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DicVal = &v
	}
	return nil
}

func (p *PersonalSearchDataSwitch) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SearchKey = &v
	}
	return nil
}

func (p *PersonalSearchDataSwitch) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SwitchValue = v
	}
	return nil
}

func (p *PersonalSearchDataSwitch) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PersonalSearchDataSwitch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PersonalSearchDataSwitch) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDicKey() {
		if err := oprot.WriteFieldBegin("dicKey", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dicKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DicKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dicKey (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dicKey: ", p), err)
		}
	}
	return err
}

func (p *PersonalSearchDataSwitch) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDicVal() {
		if err := oprot.WriteFieldBegin("dicVal", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dicVal: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DicVal)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dicVal (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dicVal: ", p), err)
		}
	}
	return err
}

func (p *PersonalSearchDataSwitch) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearchKey() {
		if err := oprot.WriteFieldBegin("searchKey", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:searchKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SearchKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.searchKey (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:searchKey: ", p), err)
		}
	}
	return err
}

func (p *PersonalSearchDataSwitch) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("switchValue", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:switchValue: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SwitchValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.switchValue (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:switchValue: ", p), err)
	}
	return err
}

func (p *PersonalSearchDataSwitch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonalSearchDataSwitch(%+v)", *p)
}
